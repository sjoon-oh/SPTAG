!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AIOTimeout	src/Helper/AsyncFileReader.cpp	/^        struct timespec AIOTimeout {0, 30000};$/;"	s	namespace:SPTAG::Helper	file:
ALIGN_ALLOC	inc/Core/Common.h	106;"	d
ALIGN_FREE	inc/Core/Common.h	107;"	d
ASYNC_READ	inc/Helper/AsyncFileReader.h	18;"	d
AVX	src/Core/Common/InstructionUtils.cpp	/^        bool InstructionSet::AVX(void) { return CPU_Rep.HW_AVX; }$/;"	f	class:SPTAG::COMMON::InstructionSet
AVX2	src/Core/Common/InstructionUtils.cpp	/^        bool InstructionSet::AVX2(void) { return CPU_Rep.HW_AVX2; }$/;"	f	class:SPTAG::COMMON::InstructionSet
AVX512	src/Core/Common/InstructionUtils.cpp	/^        bool InstructionSet::AVX512(void) { return CPU_Rep.HW_AVX512; }$/;"	f	class:SPTAG::COMMON::InstructionSet
Abort	inc/Helper/ThreadPool.h	/^                Abort(bool p_status = true) { m_stopped = p_status; }$/;"	f	class:SPTAG::Helper::ThreadPool::Abort
Abort	inc/Helper/ThreadPool.h	/^            class Abort : public IAbortOperation$/;"	c	class:SPTAG::Helper::ThreadPool
AccurateDistance	inc/Core/BKT/Index.h	/^            inline float AccurateDistance(const void* pX, const void* pY) const { $/;"	f	class:SPTAG::BKT::Index
AccurateDistance	inc/Core/KDT/Index.h	/^            inline float AccurateDistance(const void* pX, const void* pY) const {$/;"	f	class:SPTAG::KDT::Index
AccurateDistance	inc/Core/SPANN/Index.h	/^            inline float AccurateDistance(const void* pX, const void* pY) const { $/;"	f	class:SPTAG::SPANN::Index
Add	inc/Socket/ResourceManager.h	/^    ResourceID Add(const std::shared_ptr<ResourceType>& p_resource,$/;"	f	class:SPTAG::Socket::ResourceManager
Add	src/Core/MetadataSet.cpp	/^FileMetadataSet::Add(const ByteArray& data)$/;"	f	class:FileMetadataSet
Add	src/Core/MetadataSet.cpp	/^MemMetadataSet::Add(const ByteArray& data)$/;"	f	class:MemMetadataSet
AddBatch	inc/Core/Common/Dataset.h	/^            ErrorCode AddBatch(SizeType num)$/;"	f	class:SPTAG::COMMON::Dataset
AddBatch	inc/Core/Common/Dataset.h	/^            ErrorCode AddBatch(const T* pData, SizeType num)$/;"	f	class:SPTAG::COMMON::Dataset
AddBatch	inc/Core/Common/Labelset.h	/^            inline ErrorCode AddBatch(SizeType num)$/;"	f	class:SPTAG::COMMON::Labelset
AddBatch	inc/Core/Common/NeighborhoodGraph.h	/^            inline ErrorCode AddBatch(SizeType num)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
AddBatch	src/Core/MetadataSet.cpp	/^MetadataSet::AddBatch(MetadataSet& data)$/;"	f	class:MetadataSet
AddConnection	src/Socket/ConnectionManager.cpp	/^ConnectionManager::AddConnection(boost::asio::ip::tcp::socket&& p_socket,$/;"	f	class:ConnectionManager
AddIndex	inc/Core/SPANN/Index.h	/^            ErrorCode AddIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, std::shared_ptr<MetadataSet> p_metadataSet, bool p_withMetaIndex = false, bool p_normalized = false) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
AddIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::AddIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, std::shared_ptr<MetadataSet> p_metadataSet, bool p_withMetaIndex, bool p_normalized)$/;"	f	class:SPTAG::BKT::Index
AddIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::AddIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, std::shared_ptr<MetadataSet> p_metadataSet, bool p_withMetaIndex, bool p_normalized)$/;"	f	class:SPTAG::KDT::Index
AddIndex	src/Core/VectorIndex.cpp	/^VectorIndex::AddIndex(std::shared_ptr<VectorSet> p_vectorSet, std::shared_ptr<MetadataSet> p_metadataSet, bool p_withMetaIndex, bool p_normalized) {$/;"	f	class:VectorIndex
AddNeighbor	inc/Core/Common/CommonUtils.h	/^            static inline void AddNeighbor(SizeType idx, float dist, SizeType* neighbors, float* dists, DimensionType size)$/;"	f	class:SPTAG::COMMON::Utils
AddOptionalOption	inc/Helper/ArgumentsParser.h	/^    void AddOptionalOption(DataType& p_target,$/;"	f	class:SPTAG::Helper::ArgumentsParser
AddOptionalSwitch	inc/Helper/ArgumentsParser.h	/^    void AddOptionalSwitch(DataType& p_target,$/;"	f	class:SPTAG::Helper::ArgumentsParser
AddPoint	inc/Core/Common/QueryResultSet.h	/^    bool AddPoint(const SizeType index, float dist)$/;"	f	class:SPTAG::COMMON::QueryResultSet
AddRequiredOption	inc/Helper/ArgumentsParser.h	/^    void AddRequiredOption(DataType& p_target,$/;"	f	class:SPTAG::Helper::ArgumentsParser
AddRequiredSwitch	inc/Helper/ArgumentsParser.h	/^    void AddRequiredSwitch(DataType& p_target,$/;"	f	class:SPTAG::Helper::ArgumentsParser
AddResults	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::AddResults(std::string p_indexName, QueryResult& p_results)$/;"	f	class:SearchExecutionContext
AddToPendingServers	src/Aggregator/AggregatorService.cpp	/^AggregatorService::AddToPendingServers(std::shared_ptr<RemoteMachine> p_remoteServer)$/;"	f	class:AggregatorService
AdjustOptions	inc/SSDServing/SelectHead.h	/^            void AdjustOptions(SPANN::Options& p_opts, int p_vectorCount)$/;"	f	namespace:SPTAG::SSDServing::SelectHead
AggregateResults	src/Aggregator/AggregatorService.cpp	/^AggregatorService::AggregateResults(std::shared_ptr<AggregatorExecutionContext> p_exectionContext)$/;"	f	class:AggregatorService
Aggregator	inc/Aggregator/AggregatorContext.h	/^namespace Aggregator$/;"	n	namespace:SPTAG
Aggregator	inc/Aggregator/AggregatorExecutionContext.h	/^namespace Aggregator$/;"	n	namespace:SPTAG
Aggregator	inc/Aggregator/AggregatorService.h	/^namespace Aggregator$/;"	n	namespace:SPTAG
Aggregator	inc/Aggregator/AggregatorSettings.h	/^namespace Aggregator$/;"	n	namespace:SPTAG
AggregatorCallback	inc/Aggregator/AggregatorService.h	/^    typedef std::function<void(Socket::RemoteSearchResult)> AggregatorCallback;$/;"	t	class:SPTAG::Aggregator::AggregatorService
AggregatorContext	inc/Aggregator/AggregatorContext.h	/^class AggregatorContext$/;"	c	namespace:SPTAG::Aggregator
AggregatorContext	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::AggregatorContext(const std::string& p_filePath)$/;"	f	class:AggregatorContext
AggregatorExecutionContext	inc/Aggregator/AggregatorExecutionContext.h	/^class AggregatorExecutionContext$/;"	c	namespace:SPTAG::Aggregator
AggregatorExecutionContext	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::AggregatorExecutionContext(std::size_t p_totalServerNumber,$/;"	f	class:AggregatorExecutionContext
AggregatorResult	inc/Aggregator/AggregatorExecutionContext.h	/^typedef std::shared_ptr<Socket::RemoteSearchResult> AggregatorResult;$/;"	t	namespace:SPTAG::Aggregator
AggregatorService	inc/Aggregator/AggregatorService.h	/^class AggregatorService$/;"	c	namespace:SPTAG::Aggregator
AggregatorService	src/Aggregator/AggregatorService.cpp	/^AggregatorService::AggregatorService()$/;"	f	class:AggregatorService
AggregatorSettings	inc/Aggregator/AggregatorSettings.h	/^struct AggregatorSettings$/;"	s	namespace:SPTAG::Aggregator
AggregatorSettings	src/Aggregator/AggregatorSettings.cpp	/^AggregatorSettings::AggregatorSettings()$/;"	f	class:AggregatorSettings
Alloc	inc/Core/CommonDataStructure.h	/^Array<T>::Alloc(std::size_t p_length)$/;"	f	class:SPTAG::Array
AllocateBuffer	src/Socket/Packet.cpp	/^Packet::AllocateBuffer(std::uint32_t p_bodyCapacity)$/;"	f	class:Packet
AlwaysContains	inc/Core/Common/Labelset.h	/^                AlwaysContains,$/;"	m	class:SPTAG::COMMON::Labelset::InvalidIDBehavior
AlwaysTrue	src/Core/BKT/BKTIndex.cpp	/^             bool AlwaysTrue(Args...)$/;"	f	namespace:SPTAG::BKT::StaticDispatch
AlwaysTrue	src/Core/KDT/KDTIndex.cpp	/^            bool AlwaysTrue(const COMMON::Labelset& deletedIDs, SizeType node)$/;"	f	namespace:SPTAG::KDT::StaticDispatch
AppendSave	src/Core/VectorSet.cpp	/^ErrorCode BasicVectorSet::AppendSave(const std::string& p_vectorFile) const$/;"	f	class:BasicVectorSet
ApproximateRNG	src/Core/VectorIndex.cpp	/^void VectorIndex::ApproximateRNG(std::shared_ptr<VectorSet>& fullVectors, std::unordered_set<SizeType>& exceptIDS, int candidateNum, Edge* selections, int replicaCount, int numThreads, int numTrees, int leafSize, float RNGFactor, int numGPUs)$/;"	f	class:VectorIndex
ArgumentT	inc/Helper/ArgumentsParser.h	/^        ArgumentT(DataType& p_target,$/;"	f	class:SPTAG::Helper::ArgumentsParser::ArgumentT
ArgumentT	inc/Helper/ArgumentsParser.h	/^    class ArgumentT : public IArgument$/;"	c	class:SPTAG::Helper::ArgumentsParser
ArgumentsParser	inc/Helper/ArgumentsParser.h	/^class ArgumentsParser$/;"	c	namespace:SPTAG::Helper
ArgumentsParser	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::ArgumentsParser()$/;"	f	class:ArgumentsParser
Array	inc/Core/CommonDataStructure.h	/^Array<T>::Array()$/;"	f	class:SPTAG::Array
Array	inc/Core/CommonDataStructure.h	/^Array<T>::Array(Array<T>&& p_right)$/;"	f	class:SPTAG::Array
Array	inc/Core/CommonDataStructure.h	/^Array<T>::Array(T* p_array, std::size_t p_length, bool p_transferOnwership)$/;"	f	class:SPTAG::Array
Array	inc/Core/CommonDataStructure.h	/^Array<T>::Array(T* p_array, std::size_t p_length, std::shared_ptr<T> p_dataHolder)$/;"	f	class:SPTAG::Array
Array	inc/Core/CommonDataStructure.h	/^Array<T>::Array(const Array<T>& p_right)$/;"	f	class:SPTAG::Array
Array	inc/Core/CommonDataStructure.h	/^class Array$/;"	c	namespace:SPTAG
AsyncConnectToServer	src/Socket/Client.cpp	/^Client::AsyncConnectToServer(const std::string& p_address,$/;"	f	class:Client
AsyncFileIO	inc/Helper/AsyncFileReader.h	/^            AsyncFileIO(DiskIOScenario scenario = DiskIOScenario::DIS_UserRead) {}$/;"	f	class:SPTAG::Helper::AsyncFileIO
AsyncFileIO	inc/Helper/AsyncFileReader.h	/^        class AsyncFileIO : public DiskIO$/;"	c	namespace:SPTAG::Helper
AsyncReadBody	src/Socket/Connection.cpp	/^Connection::AsyncReadBody()$/;"	f	class:Connection
AsyncReadHeader	src/Socket/Connection.cpp	/^Connection::AsyncReadHeader()$/;"	f	class:Connection
AsyncReadRequest	inc/Helper/DiskIO.h	/^            AsyncReadRequest() : m_offset(0), m_readSize(0), m_buffer(nullptr), m_status(0), m_payload(nullptr), m_success(false), m_extension(nullptr) {}$/;"	f	struct:SPTAG::Helper::AsyncReadRequest
AsyncReadRequest	inc/Helper/DiskIO.h	/^        struct AsyncReadRequest$/;"	s	namespace:SPTAG::Helper
AsyncSend	src/Socket/Connection.cpp	/^Connection::AsyncSend(Packet p_packet, std::function<void(bool)> p_callback)$/;"	f	class:Connection
At	inc/Core/Common/Dataset.h	/^            inline const T* At(SizeType index) const$/;"	f	class:SPTAG::COMMON::Dataset
Available	src/Core/MetadataSet.cpp	/^FileMetadataSet::Available() const$/;"	f	class:FileMetadataSet
Available	src/Core/MetadataSet.cpp	/^MemMetadataSet::Available() const$/;"	f	class:MemMetadataSet
Available	src/Core/VectorSet.cpp	/^BasicVectorSet::Available() const$/;"	f	class:BasicVectorSet
BASE	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __device__ float BASE<float>() {return 1;}$/;"	f
BASE	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __device__ int BASE<int>() {return 16384;}$/;"	f
BASE	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __device__ uint32_t BASE<uint32_t>() {return 65536;}$/;"	f
BASE	inc/Core/Common/cuda/Distance.hxx	/^template<typename T> __device__ T BASE() {}$/;"	f
BATCH_READ	inc/Helper/AsyncFileReader.h	19;"	d
BKT	inc/Core/BKT/Index.h	/^    namespace BKT$/;"	n	namespace:SPTAG
BKT	src/Core/BKT/BKTIndex.cpp	/^    namespace BKT$/;"	n	namespace:SPTAG	file:
BKTNode	inc/Core/Common/BKTree.h	/^            BKTNode(SizeType cid = -1) : centerid(cid), childStart(-1), childEnd(-1) {}$/;"	f	struct:SPTAG::COMMON::BKTNode
BKTNode	inc/Core/Common/BKTree.h	/^        struct BKTNode$/;"	s	namespace:SPTAG::COMMON
BKTNodeInfo	inc/SSDServing/SelectHead.h	/^                BKTNodeInfo() : leafSize(0), minDepth(INT32_MAX), maxDepth(0), parent(-1)$/;"	f	struct:SPTAG::SSDServing::SelectHead::BKTNodeInfo
BKTNodeInfo	inc/SSDServing/SelectHead.h	/^            struct BKTNodeInfo$/;"	s	namespace:SPTAG::SSDServing::SelectHead
BKTree	inc/Core/Common/BKTree.h	/^            BKTree(): m_iTreeNumber(1), m_iBKTKmeansK(32), m_iBKTLeafSize(8), m_iSamples(1000), m_fBalanceFactor(-1.0f), m_bfs(0), m_lock(new std::shared_timed_mutex), m_pQuantizer(nullptr) {}$/;"	f	class:SPTAG::COMMON::BKTree
BKTree	inc/Core/Common/BKTree.h	/^            BKTree(const BKTree& other): m_iTreeNumber(other.m_iTreeNumber), $/;"	f	class:SPTAG::COMMON::BKTree
BKTree	inc/Core/Common/BKTree.h	/^        class BKTree$/;"	c	namespace:SPTAG::COMMON
BLOCKS	inc/Core/Common/cuda/params.h	37;"	d
Base64	inc/Helper/Base64Encode.h	/^namespace Base64$/;"	n	namespace:SPTAG::Helper
BasicResult	inc/Core/SearchResult.h	/^        BasicResult() : VID(-1), Dist(MaxDist), RelaxedMono(false) {}$/;"	f	struct:SPTAG::BasicResult
BasicResult	inc/Core/SearchResult.h	/^        BasicResult(SizeType p_vid, float p_dist) : VID(p_vid), Dist(p_dist), RelaxedMono(false) {}$/;"	f	struct:SPTAG::BasicResult
BasicResult	inc/Core/SearchResult.h	/^        BasicResult(SizeType p_vid, float p_dist, ByteArray p_meta) : VID(p_vid), Dist(p_dist), Meta(p_meta), RelaxedMono(false) {}$/;"	f	struct:SPTAG::BasicResult
BasicResult	inc/Core/SearchResult.h	/^        BasicResult(SizeType p_vid, float p_dist, ByteArray p_meta, bool p_relaxedMono) : VID(p_vid), Dist(p_dist), Meta(p_meta), RelaxedMono(p_relaxedMono) {}$/;"	f	struct:SPTAG::BasicResult
BasicResult	inc/Core/SearchResult.h	/^    struct BasicResult$/;"	s	namespace:SPTAG
BasicVectorSet	inc/Core/VectorSet.h	/^class BasicVectorSet : public VectorSet$/;"	c	namespace:SPTAG
BasicVectorSet	src/Core/VectorSet.cpp	/^BasicVectorSet::BasicVectorSet(const ByteArray& p_bytesArray,$/;"	f	class:BasicVectorSet
BatchCleanRequests	inc/Helper/DiskIO.h	/^            virtual bool BatchCleanRequests(SPTAG::Helper::AsyncReadRequest* readRequests, std::uint32_t requestCount) { return false; }$/;"	f	class:SPTAG::Helper::DiskIO
BatchNormalize	src/Core/Common/CommonUtils.cpp	/^void Utils::BatchNormalize(T* data, SizeType row, DimensionType col, int base, int threads) $/;"	f	class:Utils
BatchReadFile	inc/Helper/AsyncFileReader.h	/^            virtual bool BatchReadFile(AsyncReadRequest* readRequests, std::uint32_t requestCount)$/;"	f	class:SPTAG::Helper::AsyncFileIO
BatchReadFile	inc/Helper/DiskIO.h	/^            virtual bool BatchReadFile(AsyncReadRequest* readRequests, std::uint32_t requestCount) { return false; }$/;"	f	class:SPTAG::Helper::DiskIO
BatchReadFileAsync	src/Helper/AsyncFileReader.cpp	/^        void BatchReadFileAsync(std::vector<std::shared_ptr<Helper::DiskIO>>& handlers, AsyncReadRequest* readRequests, int num, int p_tid)$/;"	f	namespace:SPTAG::Helper
Body	src/Socket/Packet.cpp	/^Packet::Body() const$/;"	f	class:Packet
BootProgram	src/SSDServing/main.cpp	/^		int BootProgram(bool forANNIndexTestTool, $/;"	f	namespace:SPTAG::SSDServing
Bootstrap	inc/SSDServing/SelectHead.h	/^            ErrorCode Bootstrap(SPANN::Options& opts) {$/;"	f	namespace:SPTAG::SSDServing::SelectHead
Buffer	src/Socket/Packet.cpp	/^Packet::Buffer() const$/;"	f	class:Packet
BufferCapacity	src/Socket/Packet.cpp	/^Packet::BufferCapacity() const$/;"	f	class:Packet
BufferLength	src/Socket/Packet.cpp	/^Packet::BufferLength() const$/;"	f	class:Packet
BufferSize	inc/Core/BKT/Index.h	/^            std::shared_ptr<std::vector<std::uint64_t>> BufferSize() const$/;"	f	class:SPTAG::BKT::Index
BufferSize	inc/Core/Common/BKTree.h	/^            inline std::uint64_t BufferSize() const$/;"	f	class:SPTAG::COMMON::BKTree
BufferSize	inc/Core/Common/Dataset.h	/^            inline std::uint64_t BufferSize() const { return sizeof(SizeType) + sizeof(DimensionType) + sizeof(T) * R() * C(); }$/;"	f	class:SPTAG::COMMON::Dataset
BufferSize	inc/Core/Common/KDTree.h	/^            inline std::uint64_t BufferSize() const $/;"	f	class:SPTAG::COMMON::KDTree
BufferSize	inc/Core/Common/Labelset.h	/^            inline std::uint64_t BufferSize() const $/;"	f	class:SPTAG::COMMON::Labelset
BufferSize	inc/Core/Common/NeighborhoodGraph.h	/^            inline std::uint64_t BufferSize() const$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
BufferSize	inc/Core/Common/OPQQuantizer.h	/^        std::uint64_t OPQQuantizer<T>::BufferSize() const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
BufferSize	inc/Core/Common/PQQuantizer.h	/^        std::uint64_t PQQuantizer<T>::BufferSize() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
BufferSize	inc/Core/KDT/Index.h	/^            std::shared_ptr<std::vector<std::uint64_t>> BufferSize() const$/;"	f	class:SPTAG::KDT::Index
BufferSize	inc/Core/SPANN/Index.h	/^            std::shared_ptr<std::vector<std::uint64_t>> BufferSize() const$/;"	f	class:SPTAG::SPANN::Index
BufferSize	src/Core/MetadataSet.cpp	/^FileMetadataSet::BufferSize() const$/;"	f	class:FileMetadataSet
BufferSize	src/Core/MetadataSet.cpp	/^MemMetadataSet::BufferSize() const$/;"	f	class:MemMetadataSet
BuildBKT	inc/SSDServing/SelectHead.h	/^            std::shared_ptr<COMMON::BKTree> BuildBKT(std::shared_ptr<VectorSet> p_vectorSet, const SPANN::Options& opts) {$/;"	f	namespace:SPTAG::SSDServing::SelectHead
BuildGraph	inc/Core/Common/NeighborhoodGraph.h	/^            void BuildGraph(VectorIndex* index, const std::unordered_map<SizeType, SizeType>* idmap = nullptr)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
BuildIndex	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool BuildIndex(std::shared_ptr<Helper::VectorSetReader>& p_reader, std::shared_ptr<VectorIndex> p_headIndex, Options& p_opt) {$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
BuildIndex	inc/Core/VectorIndex.h	/^    virtual ErrorCode BuildIndex(bool p_normalized = false) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::VectorIndex
BuildIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::BuildIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, bool p_normalized, bool p_shareOwnership)$/;"	f	class:SPTAG::BKT::Index
BuildIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::BuildIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, bool p_normalized, bool p_shareOwnership)$/;"	f	class:SPTAG::KDT::Index
BuildIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::BuildIndex(bool p_normalized) $/;"	f	class:SPTAG::SPANN::Index
BuildIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::BuildIndex(const void* p_data, SizeType p_vectorNum, DimensionType p_dimension, bool p_normalized, bool p_shareOwnership)$/;"	f	class:SPTAG::SPANN::Index
BuildIndex	src/Core/VectorIndex.cpp	/^VectorIndex::BuildIndex(std::shared_ptr<VectorSet> p_vectorSet,$/;"	f	class:VectorIndex
BuildIndexInternal	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::BuildIndexInternal(std::shared_ptr<Helper::VectorSetReader>& p_reader) {$/;"	f	class:SPTAG::SPANN::Index
BuildInitKNNGraph	inc/Core/Common/NeighborhoodGraph.h	/^            void BuildInitKNNGraph(VectorIndex* index, const std::unordered_map<SizeType, SizeType>* idmap)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
BuildMetaMapping	src/Core/VectorIndex.cpp	/^VectorIndex::BuildMetaMapping(bool p_checkDeleted)$/;"	f	class:VectorIndex
BuildTrees	inc/Core/Common/BKTree.h	/^            void BuildTrees(const Dataset<T>& data, DistCalcMethod distMethod, int numOfThreads, $/;"	f	class:SPTAG::COMMON::BKTree
BuildTrees	inc/Core/Common/KDTree.h	/^            void BuildTrees(const Dataset<T>& data, int numOfThreads, std::vector<SizeType>* indices = nullptr, IAbortOperation* abort = nullptr)$/;"	f	class:SPTAG::COMMON::KDTree
BuildTreesCore	inc/Core/Common/KDTree.h	/^            void BuildTreesCore(const Dataset<T>& data, int numOfThreads, std::vector<SizeType>* indices = nullptr, IAbortOperation* abort = nullptr)$/;"	f	class:SPTAG::COMMON::KDTree
BuilderOptions	src/IndexBuilder/main.cpp	/^    BuilderOptions() : Helper::ReaderOptions(VectorValueType::Float, 0, VectorFileType::TXT, "|", 32)$/;"	f	class:BuilderOptions
BuilderOptions	src/IndexBuilder/main.cpp	/^class BuilderOptions : public Helper::ReaderOptions$/;"	c	file:
ByteArray	inc/Core/CommonDataStructure.h	/^typedef Array<std::uint8_t> ByteArray;$/;"	t	namespace:SPTAG
ByteArray	inc/Core/ResultIterator.h	/^typedef SPTAG::ByteArray ByteArray;$/;"	t
C	inc/Core/Common/Dataset.h	/^            inline DimensionType C() const { return cols; }$/;"	f	class:SPTAG::COMMON::Dataset
CHECKIO	src/BalancedDataPartition/main.cpp	16;"	d	file:
COMMON	inc/Core/Common/BKTree.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/CommonUtils.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/Dataset.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/DistanceUtils.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/FineGrainedLock.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/Heap.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/IQuantizer.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/InstructionUtils.h	/^    namespace COMMON {$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/KDTree.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/KNearestNeighborhoodGraph.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/Labelset.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/NeighborhoodGraph.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/OPQQuantizer.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/PQQuantizer.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/QueryResultSet.h	/^namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/RelativeNeighborhoodGraph.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/SIMDUtils.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/TruthSet.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/WorkSpace.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	inc/Core/Common/WorkSpacePool.h	/^    namespace COMMON$/;"	n	namespace:SPTAG
COMMON	src/Core/Common/IQuantizer.cpp	/^    namespace COMMON$/;"	n	namespace:SPTAG	file:
COMMON	src/Core/Common/InstructionUtils.cpp	/^    namespace COMMON {$/;"	n	namespace:SPTAG	file:
COMMON	src/Core/Common/TruthSet.cpp	/^    namespace COMMON$/;"	n	namespace:SPTAG	file:
COPY_BATCH_SIZE	inc/Core/Common/cuda/Distance.hxx	156;"	d
COPY_BUFF_SIZE	inc/Core/Common/cuda/Kmeans.hxx	66;"	d
COPY_BUFF_SIZE	inc/Core/Common/cuda/TailNeighbors.hxx	367;"	d
CPU_Rep	inc/Core/Common/InstructionUtils.h	/^            static const InstructionSet_Internal CPU_Rep;$/;"	m	class:SPTAG::COMMON::InstructionSet
CPU_Rep	src/Core/Common/InstructionUtils.cpp	/^        const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;$/;"	m	class:SPTAG::COMMON::InstructionSet	file:
CUDA_CHECK	inc/Core/Common/cuda/params.h	47;"	d
CacheFifoSpannMt	inc/Extension/CacheFifoMt.hh	/^        class CacheFifoSpannMt$/;"	c	namespace:SPTAG::EXT
CacheItem	inc/Extension/CacheLruWeak.hh	/^        class CacheItem$/;"	c	namespace:SPTAG::EXT
CacheItemWrapper	inc/Extension/CacheLfuMt.hh	/^            CacheItemWrapper(CacheItem<uintptr_t>&& p_item)$/;"	f	struct:SPTAG::EXT::CacheItemWrapper
CacheItemWrapper	inc/Extension/CacheLfuMt.hh	/^        struct CacheItemWrapper$/;"	s	namespace:SPTAG::EXT
CacheLfuSpannMt	inc/Extension/CacheLfuMt.hh	/^        class CacheLfuSpannMt$/;"	c	namespace:SPTAG::EXT
CacheLru	inc/Extension/CacheLruWeak.hh	/^        class CacheLru$/;"	c	namespace:SPTAG::EXT
CacheLruSpannMt	inc/Extension/CacheLruMt.hh	/^        class CacheLruSpannMt$/;"	c	namespace:SPTAG::EXT
CacheLruSpannSt	inc/Extension/CacheLruWeak.hh	/^        class CacheLruSpannSt : public CacheLru<uintptr_t>$/;"	c	namespace:SPTAG::EXT
CacheStatMt	inc/Extension/CacheLruMt.hh	/^        class CacheStatMt$/;"	c	namespace:SPTAG::EXT
CacheStatWeak	inc/Extension/CacheLruWeak.hh	/^        class CacheStatWeak$/;"	c	namespace:SPTAG::EXT
CalcLeafSize	inc/SSDServing/SelectHead.h	/^            void CalcLeafSize(int p_nodeID,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
CalculateBufferSize	src/Core/VectorIndex.cpp	/^std::shared_ptr<std::vector<std::uint64_t>> VectorIndex::CalculateBufferSize() const$/;"	f	class:VectorIndex
CalculateRecall	inc/Core/Common/TruthSet.h	/^            static float CalculateRecall(VectorIndex* index, T* query, int K) {$/;"	f	class:SPTAG::COMMON::TruthSet
CalculateRecall	inc/Core/Common/TruthSet.h	/^            static float CalculateRecall(VectorIndex* index, std::vector<QueryResult>& results, const std::vector<std::set<SizeType>>& truth, int K, int truthK, std::shared_ptr<SPTAG::VectorSet> querySet, std::shared_ptr<SPTAG::VectorSet> vectorSet, SizeType NumQuerys, std::ofstream* log = nullptr, bool debug = false, float* MRR = nullptr)$/;"	f	class:SPTAG::COMMON::TruthSet
CallBack	inc/Server/SearchExecutor.h	/^    typedef std::function<void(std::shared_ptr<SearchExecutionContext>)> CallBack;$/;"	t	class:SPTAG::Service::SearchExecutor
Callback	inc/Client/ClientWrapper.h	/^    typedef std::function<void(Socket::RemoteSearchResult)> Callback;$/;"	t	class:SPTAG::Client::ClientWrapper
CallbackOverLapped	inc/Helper/AsyncFileReader.h	/^                CallbackOverLapped(PrioritizedDiskFileReaderResource* p_registeredResource)$/;"	f	struct:SPTAG::Helper::DiskUtils::CallbackOverLapped
CallbackOverLapped	inc/Helper/AsyncFileReader.h	/^            struct CallbackOverLapped : public OVERLAPPED$/;"	s	namespace:SPTAG::Helper::DiskUtils
CapacityForDecode	src/Helper/Base64Encode.cpp	/^Base64::CapacityForDecode(std::size_t p_inLen)$/;"	f	class:Base64
CapacityForEncode	src/Helper/Base64Encode.cpp	/^Base64::CapacityForEncode(std::size_t p_inLen)$/;"	f	class:Base64
CheckAndSet	inc/Core/Common/WorkSpace.h	/^            inline bool CheckAndSet(SizeType idx)$/;"	f	class:SPTAG::COMMON::OptHashPosVector
CheckAndSet	inc/Core/Common/WorkSpace.h	/^            inline bool CheckAndSet(SizeType idx)$/;"	f	struct:SPTAG::COMMON::WorkSpace
CheckDup	src/Core/BKT/BKTIndex.cpp	/^            bool CheckDup(COMMON::QueryResultSet<T>& query, SizeType node, float score) $/;"	f	namespace:SPTAG::BKT::StaticDispatch
CheckFilter	src/Core/BKT/BKTIndex.cpp	/^            bool CheckFilter(const std::shared_ptr<MetadataSet>& metadata, SizeType node, std::function<bool(const ByteArray&)> filterFunc)$/;"	f	namespace:SPTAG::BKT::StaticDispatch
CheckHeadIndexType	src/Core/SPANN/SPANNIndex.cpp	/^        bool Index<T>::CheckHeadIndexType() {$/;"	f	class:SPTAG::SPANN::Index
CheckIfNotDeleted	src/Core/BKT/BKTIndex.cpp	/^            bool CheckIfNotDeleted(const COMMON::Labelset& deletedIDs, SizeType node)$/;"	f	namespace:SPTAG::BKT::StaticDispatch
CheckIfNotDeleted	src/Core/KDT/KDTIndex.cpp	/^            bool CheckIfNotDeleted(const COMMON::Labelset& deletedIDs, SizeType node)$/;"	f	namespace:SPTAG::KDT::StaticDispatch
CheckValidPosting	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual bool CheckValidPosting(SizeType postingID)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ChooseDivision	inc/Core/Common/KDTree.h	/^            void ChooseDivision(const Dataset<T>& data, KDTNode& node, const std::vector<SizeType>& indices, const SizeType first, const SizeType last)$/;"	f	class:SPTAG::COMMON::KDTree
CleanQuantizedTarget	inc/Core/SearchQuery.h	/^    inline void CleanQuantizedTarget()$/;"	f	class:SPTAG::QueryResult
Clear	inc/Core/CommonDataStructure.h	/^Array<T>::Clear()$/;"	f	class:SPTAG::Array
Clear	inc/Core/SPANN/IExtraSearcher.h	/^            void Clear(int p_internalResultNum, int p_maxPages, bool enableDataCompression) {$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
ClearCenters	inc/Core/Common/BKTree.h	/^            inline void ClearCenters() {$/;"	f	struct:SPTAG::COMMON::KmeansArgs
ClearCounts	inc/Core/Common/BKTree.h	/^            inline void ClearCounts() {$/;"	f	struct:SPTAG::COMMON::KmeansArgs
ClearDists	inc/Core/Common/BKTree.h	/^            inline void ClearDists(float dist) {$/;"	f	struct:SPTAG::COMMON::KmeansArgs
Client	inc/Client/ClientWrapper.h	/^namespace Client$/;"	n	namespace:SPTAG
Client	inc/Client/Options.h	/^namespace Client$/;"	n	namespace:SPTAG
Client	inc/Socket/Client.h	/^class Client$/;"	c	namespace:SPTAG::Socket
Client	src/Socket/Client.cpp	/^Client::Client(const PacketHandlerMapPtr& p_handlerMap,$/;"	f	class:Client
ClientOptions	inc/Client/Options.h	/^class ClientOptions : public Helper::ArgumentsParser$/;"	c	namespace:SPTAG::Client
ClientOptions	src/Client/Options.cpp	/^ClientOptions::ClientOptions()$/;"	f	class:ClientOptions
ClientWrapper	inc/Client/ClientWrapper.h	/^class ClientWrapper$/;"	c	namespace:SPTAG::Client
ClientWrapper	src/Client/ClientWrapper.cpp	/^ClientWrapper::ClientWrapper(const ClientOptions& p_options)$/;"	f	class:ClientWrapper
Close	inc/Core/SPANN/SPANNResultIterator.h	/^			virtual void Close()$/;"	f	class:SPTAG::SPANN::SPANNResultIterator
Close	inc/Helper/AsyncFileReader.h	/^            void Close() { m_handle.reset(INVALID_HANDLE_VALUE); }$/;"	f	class:SPTAG::Helper::HandleWrapper
Close	src/Core/MultiIndexScan.cpp	/^	void MultiIndexScan::Close()$/;"	f	class:SPTAG::MultiIndexScan
Close	src/Core/ResultIterator.cpp	/^	void ResultIterator::Close()$/;"	f	class:ResultIterator
Compare	inc/Core/Common/QueryResultSet.h	/^inline bool Compare(const BasicResult& lhs, const BasicResult& rhs)$/;"	f	namespace:SPTAG::COMMON
Compress	inc/Core/SPANN/Compressor.h	/^            std::string Compress(const std::string &src, const bool useDict)$/;"	f	class:SPTAG::SPANN::Compressor
CompressWithDict	inc/Core/SPANN/Compressor.h	/^            std::string CompressWithDict(const std::string &src)$/;"	f	class:SPTAG::SPANN::Compressor
CompressWithoutDict	inc/Core/SPANN/Compressor.h	/^            std::string CompressWithoutDict(const std::string &src)$/;"	f	class:SPTAG::SPANN::Compressor
Compressor	inc/Core/SPANN/Compressor.h	/^            Compressor(int level = 0, int bufferCapacity = 102400)$/;"	f	class:SPTAG::SPANN::Compressor
Compressor	inc/Core/SPANN/Compressor.h	/^        class Compressor$/;"	c	namespace:SPTAG::SPANN
ComputeCosineDistance	inc/Core/Common/DistanceUtils.h	/^            static float ComputeCosineDistance(const T* pX, const T* pY, DimensionType length)$/;"	f	class:SPTAG::COMMON::DistanceUtils
ComputeCosineDistance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX512(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX512(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX512(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_AVX512(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_SSE(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_SSE(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_SSE(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeCosineDistance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeCosineDistance_SSE(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeDistance	inc/Core/BKT/Index.h	/^            inline float ComputeDistance(const void* pX, const void* pY) const { return m_fComputeDistance((const T*)pX, (const T*)pY, m_pSamples.C()); }$/;"	f	class:SPTAG::BKT::Index
ComputeDistance	inc/Core/Common/DistanceUtils.h	/^            static inline float ComputeDistance(const T* p1, const T* p2, DimensionType length, SPTAG::DistCalcMethod distCalcMethod)$/;"	f	class:SPTAG::COMMON::DistanceUtils
ComputeDistance	inc/Core/KDT/Index.h	/^            inline float ComputeDistance(const void* pX, const void* pY) const { return m_fComputeDistance((const T*)pX, (const T*)pY, m_pSamples.C()); }$/;"	f	class:SPTAG::KDT::Index
ComputeDistance	inc/Core/SPANN/Index.h	/^            inline float ComputeDistance(const void* pX, const void* pY) const { return m_fComputeDistance((const T*)pX, (const T*)pY, m_options.m_dim); }$/;"	f	class:SPTAG::SPANN::Index
ComputeL2Distance	inc/Core/Common/DistanceUtils.h	/^            static float ComputeL2Distance(const T* pX, const T* pY, DimensionType length)$/;"	f	class:SPTAG::COMMON::DistanceUtils
ComputeL2Distance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX512(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX512(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX512(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_AVX512	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_AVX512(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_SSE(const float* pX, const float* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_SSE(const std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_SSE(const std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeL2Distance_SSE	src/Core/Common/DistanceUtils.cpp	/^float DistanceUtils::ComputeL2Distance_SSE(const std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:DistanceUtils
ComputeSum	inc/Core/Common/SIMDUtils.h	/^            static inline void ComputeSum(T* p1, const T* p2, DimensionType length)$/;"	f	class:SPTAG::COMMON::SIMDUtils
ComputeSum_AVX	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX(float* pX, const float* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX(std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX(std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX(std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX512	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX512(float* pX, const float* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX512	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX512(std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX512	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX512(std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_AVX512	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_AVX512(std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_Naive	inc/Core/Common/SIMDUtils.h	/^            static void ComputeSum_Naive(T* pX, const T* pY, DimensionType length)$/;"	f	class:SPTAG::COMMON::SIMDUtils
ComputeSum_SSE	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_SSE(float* pX, const float* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_SSE	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_SSE(std::int16_t* pX, const std::int16_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_SSE	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_SSE(std::int8_t* pX, const std::int8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
ComputeSum_SSE	src/Core/Common/SIMDUtils.cpp	/^void SIMDUtils::ComputeSum_SSE(std::uint8_t* pX, const std::uint8_t* pY, DimensionType length)$/;"	f	class:SIMDUtils
Concurrent	inc/Helper/Concurrent.h	/^namespace Concurrent$/;"	n	namespace:SPTAG::Helper
Concurrent	inc/Helper/ConcurrentSet.h	/^        namespace Concurrent$/;"	n	namespace:SPTAG::Helper
ConcurrentMap	inc/Helper/ConcurrentSet.h	/^                ConcurrentMap(int capacity = 8) { m_lock.reset(new std::shared_timed_mutex); m_data.reserve(capacity); }$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentMap
ConcurrentMap	inc/Helper/ConcurrentSet.h	/^            class ConcurrentMap$/;"	c	namespace:SPTAG::Helper::Concurrent
ConcurrentQueue	inc/Helper/ConcurrentSet.h	/^                ConcurrentQueue() {}$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentQueue
ConcurrentQueue	inc/Helper/ConcurrentSet.h	/^            class ConcurrentQueue$/;"	c	namespace:SPTAG::Helper::Concurrent
ConcurrentSet	inc/Helper/ConcurrentSet.h	/^                ConcurrentSet() { m_lock.reset(new std::shared_timed_mutex); }$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentSet
ConcurrentSet	inc/Helper/ConcurrentSet.h	/^            class ConcurrentSet$/;"	c	namespace:SPTAG::Helper::Concurrent
ConnectCallback	inc/Socket/Client.h	/^    typedef std::function<void(ConnectionID p_cid, SPTAG::ErrorCode)> ConnectCallback;$/;"	t	class:SPTAG::Socket::Client
ConnectToPendingServers	src/Aggregator/AggregatorService.cpp	/^AggregatorService::ConnectToPendingServers()$/;"	f	class:AggregatorService
ConnectToServer	src/Socket/Client.cpp	/^Client::ConnectToServer(const std::string& p_address,$/;"	f	class:Client
Connection	inc/Socket/Connection.h	/^class Connection : public std::enable_shared_from_this<Connection>$/;"	c	namespace:SPTAG::Socket
Connection	src/Socket/Connection.cpp	/^Connection::Connection(ConnectionID p_connectionID,$/;"	f	class:Connection
ConnectionID	inc/Socket/Common.h	/^typedef std::uint32_t ConnectionID;$/;"	t	namespace:SPTAG::Socket
ConnectionItem	inc/Socket/ConnectionManager.h	/^    struct ConnectionItem$/;"	s	class:SPTAG::Socket::ConnectionManager
ConnectionItem	src/Socket/ConnectionManager.cpp	/^ConnectionManager::ConnectionItem::ConnectionItem()$/;"	f	class:ConnectionManager::ConnectionItem
ConnectionManager	inc/Socket/ConnectionManager.h	/^class ConnectionManager : public std::enable_shared_from_this<ConnectionManager>$/;"	c	namespace:SPTAG::Socket
ConnectionManager	src/Socket/ConnectionManager.cpp	/^ConnectionManager::ConnectionManager()$/;"	f	class:ConnectionManager
ConnectionPair	inc/Client/ClientWrapper.h	/^    typedef std::pair<Socket::ConnectionID, Socket::ConnectionID> ConnectionPair;$/;"	t	class:SPTAG::Client::ClientWrapper
ContainSample	inc/Core/BKT/Index.h	/^            inline bool ContainSample(const SizeType idx) const { return idx >= 0 && idx < m_deletedID.R() && !m_deletedID.Contains(idx); }$/;"	f	class:SPTAG::BKT::Index
ContainSample	inc/Core/KDT/Index.h	/^            inline bool ContainSample(const SizeType idx) const { return idx >= 0 && idx < m_deletedID.R() && !m_deletedID.Contains(idx); }$/;"	f	class:SPTAG::KDT::Index
ContainSample	inc/Core/SPANN/Index.h	/^            inline bool ContainSample(const SizeType idx) const { return idx < m_options.m_vectorSize; }$/;"	f	class:SPTAG::SPANN::Index
Contains	inc/Core/Common/Labelset.h	/^            inline bool Contains(const SizeType& key) const$/;"	f	class:SPTAG::COMMON::Labelset
Convert	inc/Helper/StringConvert.h	/^namespace Convert$/;"	n	namespace:SPTAG::Helper
ConvertCosineSimilarityToDistance	inc/Core/Common/DistanceUtils.h	/^            static inline float ConvertCosineSimilarityToDistance(float cs)$/;"	f	class:SPTAG::COMMON::DistanceUtils
ConvertDatasetToPoints	inc/Core/Common/cuda/Kmeans.hxx	/^void ConvertDatasetToPoints(const Dataset<T>& data, std::vector<SizeType>& indices, Point<T,SUMTYPE,MAX_DIM>* d_points, size_t workSize, int dim) {$/;"	f
ConvertDistanceBackToCosineSimilarity	inc/Core/Common/DistanceUtils.h	/^            static inline float ConvertDistanceBackToCosineSimilarity(float d)$/;"	f	class:SPTAG::COMMON::DistanceUtils
ConvertStringTo	inc/Helper/SimpleIniReader.h	/^IniReader::ConvertStringTo(std::string&& p_str, const DataType& p_defaultVal)$/;"	f	class:SPTAG::Helper::IniReader
ConvertStringTo	inc/Helper/SimpleIniReader.h	/^IniReader::ConvertStringTo<std::string>(std::string&& p_str, const std::string& p_defaultVal)$/;"	f	class:SPTAG::Helper::IniReader
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo(const char* p_str, DataType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<DistCalcMethod>(const char* p_str, DistCalcMethod& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<IndexAlgoType>(const char* p_str, IndexAlgoType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<QuantizerType>(const char* p_str, QuantizerType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<TruthFileType>(const char* p_str, TruthFileType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<VectorFileType>(const char* p_str, VectorFileType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<VectorValueType>(const char* p_str, VectorValueType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<bool>(const char* p_str, bool& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<double>(const char* p_str, double& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<float>(const char* p_str, float& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::int16_t>(const char* p_str, std::int16_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::int32_t>(const char* p_str, std::int32_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::int64_t>(const char* p_str, std::int64_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::int8_t>(const char* p_str, std::int8_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::string>(const char* p_str, std::string& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::uint16_t>(const char* p_str, std::uint16_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::uint32_t>(const char* p_str, std::uint32_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::uint64_t>(const char* p_str, std::uint64_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringTo	inc/Helper/StringConvert.h	/^inline bool ConvertStringTo<std::uint8_t>(const char* p_str, std::uint8_t& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringToSignedInt	inc/Helper/StringConvert.h	/^inline bool ConvertStringToSignedInt(const char* p_str, DataType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertStringToUnsignedInt	inc/Helper/StringConvert.h	/^inline bool ConvertStringToUnsignedInt(const char* p_str, DataType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString(const DataType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<DistCalcMethod>(const DistCalcMethod& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<ErrorCode>(const ErrorCode& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<IndexAlgoType>(const IndexAlgoType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<QuantizerType>(const QuantizerType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<TruthFileType>(const TruthFileType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<VectorFileType>(const VectorFileType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<VectorValueType>(const VectorValueType& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<bool>(const bool& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertToString	inc/Helper/StringConvert.h	/^inline std::string ConvertToString<std::string>(const std::string& p_value)$/;"	f	namespace:SPTAG::Helper::Convert
ConvertVectorFromString	inc/Server/QueryParser.h	/^	ConvertVectorFromString(const std::vector<const char*>& p_source, ByteArray& p_dest, SizeType& p_dimension)$/;"	f	namespace:SPTAG::Service
Cosine	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum DistMetric { L2, Cosine };$/;"	e	enum:DistMetric
CosineDistance	inc/Core/Common/PQQuantizer.h	/^        float PQQuantizer<T>::CosineDistance(const std::uint8_t* pX, const std::uint8_t* pY) const$/;"	f	class:SPTAG::COMMON::PQQuantizer
Count	inc/Core/Common/Labelset.h	/^            inline size_t Count() const { return m_inserted.load(); }$/;"	f	class:SPTAG::COMMON::Labelset
Count	src/Core/MetadataSet.cpp	/^FileMetadataSet::Count() const$/;"	f	class:FileMetadataSet
Count	src/Core/MetadataSet.cpp	/^MemMetadataSet::Count() const$/;"	f	class:MemMetadataSet
Count	src/Core/VectorSet.cpp	/^BasicVectorSet::Count() const$/;"	f	class:BasicVectorSet
CreateCDict	inc/Core/SPANN/Compressor.h	/^            void CreateCDict()$/;"	f	class:SPTAG::SPANN::Compressor
CreateDDict	inc/Core/SPANN/Compressor.h	/^            void CreateDDict()$/;"	f	class:SPTAG::SPANN::Compressor
CreateInstance	src/Core/Common/NeighborhoodGraph.cpp	/^std::shared_ptr<NeighborhoodGraph> NeighborhoodGraph::CreateInstance(std::string type)$/;"	f	class:NeighborhoodGraph
CreateInstance	src/Core/VectorIndex.cpp	/^VectorIndex::CreateInstance(IndexAlgoType p_algo, VectorValueType p_valuetype)$/;"	f	class:VectorIndex
CreateInstance	src/Helper/VectorSetReader.cpp	/^VectorSetReader::CreateInstance(std::shared_ptr<ReaderOptions> p_options)$/;"	f	class:VectorSetReader
DIFF128	src/Core/Common/DistanceUtils.cpp	10;"	d	file:
DIFF256	src/Core/Common/DistanceUtils.cpp	11;"	d	file:
DIS_BulkRead	inc/Helper/DiskIO.h	/^            DIS_BulkRead = 0,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DIS_BulkWrite	inc/Helper/DiskIO.h	/^            DIS_BulkWrite,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DIS_HighPriorityUserRead	inc/Helper/DiskIO.h	/^            DIS_HighPriorityUserRead,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DIS_HighPriorityUserWrite	inc/Helper/DiskIO.h	/^            DIS_HighPriorityUserWrite,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DIS_UserRead	inc/Helper/DiskIO.h	/^            DIS_UserRead,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DIS_UserWrite	inc/Helper/DiskIO.h	/^            DIS_UserWrite,$/;"	m	class:SPTAG::Helper::DiskIOScenario
DLOG_ALL	inc/Core/Common/cuda/log.hxx	45;"	d
DLOG_CRIT	inc/Core/Common/cuda/log.hxx	49;"	d
DLOG_CRIT	inc/Core/Common/cuda/log.hxx	52;"	d
DLOG_DEBUG	inc/Core/Common/cuda/log.hxx	81;"	d
DLOG_DEBUG	inc/Core/Common/cuda/log.hxx	84;"	d
DLOG_ERR	inc/Core/Common/cuda/log.hxx	57;"	d
DLOG_ERR	inc/Core/Common/cuda/log.hxx	60;"	d
DLOG_INFO	inc/Core/Common/cuda/log.hxx	73;"	d
DLOG_INFO	inc/Core/Common/cuda/log.hxx	76;"	d
DLOG_WARN	inc/Core/Common/cuda/log.hxx	65;"	d
DLOG_WARN	inc/Core/Common/cuda/log.hxx	68;"	d
Data	inc/Core/CommonDataStructure.h	/^Array<T>::Data() const$/;"	f	class:SPTAG::Array
DataHolder	inc/Core/CommonDataStructure.h	/^Array<T>::DataHolder() const$/;"	f	class:SPTAG::Array
Dataset	inc/Core/Common/Dataset.h	/^            Dataset() {}$/;"	f	class:SPTAG::COMMON::Dataset
Dataset	inc/Core/Common/Dataset.h	/^            Dataset(SizeType rows_, DimensionType cols_, SizeType rowsInBlock_, SizeType capacity_, T* data_ = nullptr, bool shareOwnership_ = true)$/;"	f	class:SPTAG::COMMON::Dataset
Dataset	inc/Core/Common/Dataset.h	/^        class Dataset$/;"	c	namespace:SPTAG::COMMON
DebugSearchDiskIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::DebugSearchDiskIndex(QueryResult& p_query, int p_subInternalResultNum, int p_internalResultNum,$/;"	f	class:SPTAG::SPANN::Index
Decode	src/Helper/Base64Encode.cpp	/^Base64::Decode(const char* p_in, std::size_t p_inLen, std::uint8_t* p_out, std::size_t& p_outLen)$/;"	f	class:Base64
Decompress	inc/Core/SPANN/Compressor.h	/^            std::size_t Decompress(const char *src, size_t srcSize, char* dst, size_t dstCapacity, const bool useDict)$/;"	f	class:SPTAG::SPANN::Compressor
DecompressPosting	inc/Core/SPANN/ExtraFullGraphSearcher.h	113;"	d
DecompressPostingIterative	inc/Core/SPANN/ExtraFullGraphSearcher.h	131;"	d
DecompressWithDict	inc/Core/SPANN/Compressor.h	/^            std::size_t DecompressWithDict(const char* src, size_t srcSize, char* dst, size_t dstCapacity)$/;"	f	class:SPTAG::SPANN::Compressor
DecompressWithoutDict	inc/Core/SPANN/Compressor.h	/^            std::size_t DecompressWithoutDict(const char *src, size_t srcSize, char* dst, size_t dstCapacity)$/;"	f	class:SPTAG::SPANN::Compressor
DecreaseUnfnishedJobCount	src/Client/ClientWrapper.cpp	/^ClientWrapper::DecreaseUnfnishedJobCount()$/;"	f	class:ClientWrapper
DefaultVectorReader	inc/Helper/VectorSetReaders/DefaultReader.h	/^class DefaultVectorReader : public VectorSetReader$/;"	c	namespace:SPTAG::Helper
DefaultVectorReader	src/Helper/VectorSetReaders/DefaultReader.cpp	/^DefaultVectorReader::DefaultVectorReader(std::shared_ptr<ReaderOptions> p_options)$/;"	f	class:DefaultVectorReader
DefineBKTParameter	inc/Core/BKT/Index.h	111;"	d
DefineBKTParameter	inc/Core/BKT/Index.h	115;"	d
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	1015;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	1022;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	118;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	122;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	23;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	30;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	780;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	784;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	986;"	d	file:
DefineBKTParameter	src/Core/BKT/BKTIndex.cpp	998;"	d	file:
DefineBasicParameter	inc/Core/SPANN/Options.h	130;"	d
DefineBasicParameter	inc/Core/SPANN/Options.h	134;"	d
DefineBasicParameter	inc/Core/SPANN/Options.h	162;"	d
DefineBasicParameter	inc/Core/SPANN/Options.h	174;"	d
DefineBasicParameter	inc/Core/SPANN/Options.h	237;"	d
DefineBasicParameter	inc/Core/SPANN/Options.h	244;"	d
DefineBasicParameter	src/Core/SPANN/SPANNIndex.cpp	144;"	d	file:
DefineBasicParameter	src/Core/SPANN/SPANNIndex.cpp	148;"	d	file:
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	142;"	d
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	146;"	d
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	196;"	d
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	208;"	d
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	261;"	d
DefineBuildHeadParameter	inc/Core/SPANN/Options.h	268;"	d
DefineBuildHeadParameter	src/Core/SPANN/SPANNIndex.cpp	158;"	d	file:
DefineBuildHeadParameter	src/Core/SPANN/SPANNIndex.cpp	162;"	d	file:
DefineDistCalcMethod	inc/Core/Common.h	166;"	d
DefineDistCalcMethod	inc/Core/Common.h	168;"	d
DefineDistCalcMethod	inc/Helper/StringConvert.h	300;"	d
DefineDistCalcMethod	inc/Helper/StringConvert.h	308;"	d
DefineDistCalcMethod	inc/Helper/StringConvert.h	415;"	d
DefineDistCalcMethod	inc/Helper/StringConvert.h	420;"	d
DefineErrorCode	inc/Core/Common.h	155;"	d
DefineErrorCode	inc/Core/Common.h	157;"	d
DefineErrorCode	inc/Helper/StringConvert.h	492;"	d
DefineErrorCode	inc/Helper/StringConvert.h	497;"	d
DefineIndexAlgo	inc/Core/Common.h	188;"	d
DefineIndexAlgo	inc/Core/Common.h	190;"	d
DefineIndexAlgo	inc/Helper/StringConvert.h	236;"	d
DefineIndexAlgo	inc/Helper/StringConvert.h	244;"	d
DefineIndexAlgo	inc/Helper/StringConvert.h	377;"	d
DefineIndexAlgo	inc/Helper/StringConvert.h	382;"	d
DefineKDTParameter	inc/Core/KDT/Index.h	90;"	d
DefineKDTParameter	inc/Core/KDT/Index.h	94;"	d
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	116;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	120;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	22;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	29;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	497;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	501;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	712;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	724;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	741;"	d	file:
DefineKDTParameter	src/Core/KDT/KDTIndex.cpp	748;"	d	file:
DefineNumaStrategy	inc/Core/Common.h	264;"	d
DefineNumaStrategy	inc/Core/Common.h	266;"	d
DefineOrderStrategy	inc/Core/Common.h	274;"	d
DefineOrderStrategy	inc/Core/Common.h	276;"	d
DefineQuantizerType	inc/Core/Common.h	254;"	d
DefineQuantizerType	inc/Core/Common.h	256;"	d
DefineQuantizerType	inc/Helper/StringConvert.h	343;"	d
DefineQuantizerType	inc/Helper/StringConvert.h	351;"	d
DefineQuantizerType	inc/Helper/StringConvert.h	396;"	d
DefineQuantizerType	inc/Helper/StringConvert.h	401;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	148;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	152;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	213;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	225;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	273;"	d
DefineSSDParameter	inc/Core/SPANN/Options.h	280;"	d
DefineSSDParameter	src/Core/SPANN/SPANNIndex.cpp	168;"	d	file:
DefineSSDParameter	src/Core/SPANN/SPANNIndex.cpp	172;"	d	file:
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	136;"	d
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	140;"	d
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	179;"	d
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	191;"	d
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	249;"	d
DefineSelectHeadParameter	inc/Core/SPANN/Options.h	256;"	d
DefineSelectHeadParameter	src/Core/SPANN/SPANNIndex.cpp	151;"	d	file:
DefineSelectHeadParameter	src/Core/SPANN/SPANNIndex.cpp	155;"	d	file:
DefineTruthFileType	inc/Core/Common.h	208;"	d
DefineTruthFileType	inc/Core/Common.h	210;"	d
DefineTruthFileType	inc/Helper/StringConvert.h	278;"	d
DefineTruthFileType	inc/Helper/StringConvert.h	286;"	d
DefineTruthFileType	inc/Helper/StringConvert.h	473;"	d
DefineTruthFileType	inc/Helper/StringConvert.h	478;"	d
DefineVectorFileType	inc/Core/Common.h	198;"	d
DefineVectorFileType	inc/Core/Common.h	200;"	d
DefineVectorFileType	inc/Helper/StringConvert.h	257;"	d
DefineVectorFileType	inc/Helper/StringConvert.h	265;"	d
DefineVectorFileType	inc/Helper/StringConvert.h	454;"	d
DefineVectorFileType	inc/Helper/StringConvert.h	459;"	d
DefineVectorValueType	inc/Core/Common.h	177;"	d
DefineVectorValueType	inc/Core/Common.h	179;"	d
DefineVectorValueType	inc/Core/Common.h	223;"	d
DefineVectorValueType	inc/Core/Common.h	231;"	d
DefineVectorValueType	inc/Core/Common.h	238;"	d
DefineVectorValueType	inc/Core/Common.h	243;"	d
DefineVectorValueType	inc/Core/Common/BKTree.h	426;"	d
DefineVectorValueType	inc/Core/Common/BKTree.h	432;"	d
DefineVectorValueType	inc/Core/Common/BKTree.h	474;"	d
DefineVectorValueType	inc/Core/Common/BKTree.h	480;"	d
DefineVectorValueType	inc/Core/Common/KDTree.h	68;"	d
DefineVectorValueType	inc/Core/Common/KDTree.h	74;"	d
DefineVectorValueType	inc/Core/Common/NeighborhoodGraph.h	134;"	d
DefineVectorValueType	inc/Core/Common/NeighborhoodGraph.h	140;"	d
DefineVectorValueType	inc/Core/Common/cuda/KNN.hxx	1069;"	d
DefineVectorValueType	inc/Core/Common/cuda/KNN.hxx	1071;"	d
DefineVectorValueType	inc/Helper/StringConvert.h	322;"	d
DefineVectorValueType	inc/Helper/StringConvert.h	330;"	d
DefineVectorValueType	inc/Helper/StringConvert.h	435;"	d
DefineVectorValueType	inc/Helper/StringConvert.h	440;"	d
DefineVectorValueType	inc/SSDServing/SelectHead.h	901;"	d
DefineVectorValueType	inc/SSDServing/SelectHead.h	907;"	d
DefineVectorValueType	inc/SSDServing/SelectHead.h	918;"	d
DefineVectorValueType	inc/SSDServing/SelectHead.h	924;"	d
DefineVectorValueType	src/Aggregator/AggregatorService.cpp	227;"	d	file:
DefineVectorValueType	src/Aggregator/AggregatorService.cpp	243;"	d	file:
DefineVectorValueType	src/Core/BKT/BKTIndex.cpp	1029;"	d	file:
DefineVectorValueType	src/Core/BKT/BKTIndex.cpp	1033;"	d	file:
DefineVectorValueType	src/Core/Common/CommonUtils.cpp	10;"	d	file:
DefineVectorValueType	src/Core/Common/CommonUtils.cpp	22;"	d	file:
DefineVectorValueType	src/Core/Common/CommonUtils.cpp	24;"	d	file:
DefineVectorValueType	src/Core/Common/CommonUtils.cpp	8;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	122;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	125;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	25;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	31;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	40;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	46;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	73;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	79;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	87;"	d	file:
DefineVectorValueType	src/Core/Common/IQuantizer.cpp	93;"	d	file:
DefineVectorValueType	src/Core/Common/TruthSet.cpp	129;"	d	file:
DefineVectorValueType	src/Core/Common/TruthSet.cpp	131;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	290;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	296;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	386;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	392;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	425;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	432;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	755;"	d	file:
DefineVectorValueType	src/Core/KDT/KDTIndex.cpp	759;"	d	file:
DefineVectorValueType	src/Core/SPANN/SPANNIndex.cpp	1098;"	d	file:
DefineVectorValueType	src/Core/SPANN/SPANNIndex.cpp	1102;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	577;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	582;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	590;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	595;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	603;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	608;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	861;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	867;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	919;"	d	file:
DefineVectorValueType	src/Core/VectorIndex.cpp	924;"	d	file:
DefineVectorValueType	src/Core/VectorSet.cpp	147;"	d	file:
DefineVectorValueType	src/Core/VectorSet.cpp	153;"	d	file:
DefineVectorValueType	src/Helper/VectorSetReaders/TxtReader.cpp	231;"	d	file:
DefineVectorValueType	src/Helper/VectorSetReaders/TxtReader.cpp	237;"	d	file:
DefineVectorValueType	src/IndexSearcher/main.cpp	395;"	d	file:
DefineVectorValueType	src/IndexSearcher/main.cpp	401;"	d	file:
DefineVectorValueType	src/Quantizer/main.cpp	117;"	d	file:
DefineVectorValueType	src/Quantizer/main.cpp	123;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	131;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	137;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	174;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	181;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	199;"	d	file:
DefineVectorValueType	src/SSDServing/main.cpp	205;"	d	file:
DefineVectorValueType	src/Server/SearchExecutionContext.cpp	87;"	d	file:
DefineVectorValueType	src/Server/SearchExecutionContext.cpp	93;"	d	file:
DeleteIndex	inc/Core/SPANN/Index.h	/^            ErrorCode DeleteIndex(const SizeType& p_id) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
DeleteIndex	inc/Core/SPANN/Index.h	/^            ErrorCode DeleteIndex(const void* p_vectors, SizeType p_vectorNum) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
DeleteIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::DeleteIndex(const SizeType& p_id) {$/;"	f	class:SPTAG::BKT::Index
DeleteIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::DeleteIndex(const void* p_vectors, SizeType p_vectorNum) {$/;"	f	class:SPTAG::BKT::Index
DeleteIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::DeleteIndex(const SizeType& p_id) {$/;"	f	class:SPTAG::KDT::Index
DeleteIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::DeleteIndex(const void* p_vectors, SizeType p_vectorNum) {$/;"	f	class:SPTAG::KDT::Index
DeleteIndex	src/Core/VectorIndex.cpp	/^VectorIndex::DeleteIndex(ByteArray p_meta) {$/;"	f	class:VectorIndex
DfsAnalyze	inc/SSDServing/SelectHead.h	/^            void DfsAnalyze(int p_nodeID,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
DfsCovered	inc/SSDServing/SelectHead.h	/^            int DfsCovered(int p_nodeID,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
DfsSelect	inc/SSDServing/SelectHead.h	/^            void DfsSelect(int p_nodeID,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
Dim	inc/Core/Common/cuda/TPtree.hxx	/^    int Dim;$/;"	m	class:TPtree
Dimension	src/Core/VectorSet.cpp	/^BasicVectorSet::Dimension() const$/;"	f	class:BasicVectorSet
DimensionType	inc/Core/Common.h	/^typedef std::int32_t DimensionType;$/;"	t	namespace:SPTAG
DiskIO	inc/Helper/DiskIO.h	/^            DiskIO(DiskIOScenario scenario = DiskIOScenario::DIS_UserRead) {}$/;"	f	class:SPTAG::Helper::DiskIO
DiskIO	inc/Helper/DiskIO.h	/^        class DiskIO$/;"	c	namespace:SPTAG::Helper
DiskIOScenario	inc/Helper/DiskIO.h	/^        enum class DiskIOScenario$/;"	c	namespace:SPTAG::Helper
DiskUtils	inc/Helper/AsyncFileReader.h	/^        namespace DiskUtils$/;"	n	namespace:SPTAG::Helper
Dist	inc/Core/SearchResult.h	/^        float Dist;$/;"	m	struct:SPTAG::BasicResult
DistCalcMethod	inc/Core/Common.h	/^enum class DistCalcMethod : std::uint8_t$/;"	c	namespace:SPTAG
DistMetric	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum DistMetric { L2, Cosine };$/;"	g
DistPair	inc/Core/Common/cuda/ThreadHeap.hxx	/^class DistPair {$/;"	c
DistPriorityQueue	inc/Core/Common/WorkSpace.h	/^            DistPriorityQueue(): m_size(0), m_length(0), m_count(0) {}$/;"	f	class:SPTAG::COMMON::DistPriorityQueue
DistPriorityQueue	inc/Core/Common/WorkSpace.h	/^        class DistPriorityQueue {$/;"	c	namespace:SPTAG::COMMON
DistanceCalcSelector	inc/Core/Common/DistanceUtils.h	/^        inline DistanceCalcReturn<T> DistanceCalcSelector(SPTAG::DistCalcMethod p_method)$/;"	f	namespace:SPTAG::COMMON
DistanceCalcSelector	src/Core/Common/IQuantizer.cpp	/^        std::function<float(const T*, const T*, SizeType)> IQuantizer::DistanceCalcSelector(SPTAG::DistCalcMethod p_method) const$/;"	f	class:SPTAG::COMMON::IQuantizer
DistanceCalcSelector	src/Core/Common/IQuantizer.cpp	/^        std::function<float(const std::uint8_t*, const std::uint8_t*, SizeType)> IQuantizer::DistanceCalcSelector<std::uint8_t>(SPTAG::DistCalcMethod p_method) const$/;"	f	class:SPTAG::COMMON::IQuantizer
DistanceUtils	inc/Core/Common/DistanceUtils.h	/^        class DistanceUtils$/;"	c	namespace:SPTAG::COMMON
DivideTree	inc/Core/Common/KDTree.h	/^            void DivideTree(const Dataset<T>& data, std::vector<SizeType>& indices, SizeType first, SizeType last,$/;"	f	class:SPTAG::COMMON::KDTree
DoesParameterExist	src/Helper/SimpleIniReader.cpp	/^IniReader::DoesParameterExist(const std::string& p_section, const std::string& p_param) const$/;"	f	class:IniReader
DoesSectionExist	src/Helper/SimpleIniReader.cpp	/^IniReader::DoesSectionExist(const std::string& p_section) const$/;"	f	class:IniReader
DoubleSize	inc/Core/Common/WorkSpace.h	/^            inline void DoubleSize()$/;"	f	class:SPTAG::COMMON::OptHashPosVector
Dropped	inc/Socket/Packet.h	/^    Dropped = 0x02,$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus
Dropped	inc/Socket/RemoteSearchQuery.h	/^        Dropped = 4$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
DynamicFactorSelect	inc/Core/Common/BKTree.h	/^        float DynamicFactorSelect(const Dataset<T> & data,$/;"	f	namespace:SPTAG::COMMON
DynamicNeighbors	inc/Helper/DynamicNeighbors.h	/^    class DynamicNeighbors$/;"	c	namespace:SPTAG::Helper
DynamicNeighbors	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighbors::DynamicNeighbors(const int* p_data, const int p_length)$/;"	f	class:DynamicNeighbors
DynamicNeighborsSet	inc/Helper/DynamicNeighbors.h	/^    class DynamicNeighborsSet$/;"	c	namespace:SPTAG::Helper
DynamicNeighborsSet	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighborsSet::DynamicNeighborsSet(const char* p_filePath)$/;"	f	class:DynamicNeighborsSet
EXT	inc/Extension/CacheFifoMt.hh	/^    namespace EXT {$/;"	n	namespace:SPTAG
EXT	inc/Extension/CacheLfuMt.hh	/^    namespace EXT {$/;"	n	namespace:SPTAG
EXT	inc/Extension/CacheLruMt.hh	/^    namespace EXT {$/;"	n	namespace:SPTAG
EXT	inc/Extension/CacheLruWeak.hh	/^    namespace EXT {$/;"	n	namespace:SPTAG
EXT	inc/Extension/Locks.hh	/^    namespace EXT {$/;"	n	namespace:SPTAG
EXTLOCK_STAT_MAX	inc/Extension/Locks.hh	15;"	d
Edge	inc/Core/SearchResult.h	/^        Edge() : node(MaxSize), distance(MaxDist), tonode(MaxSize) {}$/;"	f	struct:SPTAG::Edge
Edge	inc/Core/SearchResult.h	/^    struct Edge$/;"	s	namespace:SPTAG
EdgeCompare	inc/Core/SearchResult.h	/^    struct EdgeCompare$/;"	s	namespace:SPTAG
Encode	src/Helper/Base64Encode.cpp	/^Base64::Encode(const std::uint8_t* p_in, std::size_t p_inLen, char* p_out, std::size_t& p_outLen)$/;"	f	class:Base64
Encode	src/Helper/Base64Encode.cpp	/^Base64::Encode(const std::uint8_t* p_in, std::size_t p_inLen, std::ostream& p_out, std::size_t& p_outLen)$/;"	f	class:Base64
Epsilon	inc/Core/Common.h	/^const float Epsilon = 0.000001f;$/;"	m	namespace:SPTAG
ErrorCode	inc/Core/Common.h	/^enum class ErrorCode : std::uint16_t$/;"	c	namespace:SPTAG
ErrorExit	inc/Helper/AsyncFileReader.h	/^            void ErrorExit()$/;"	f	class:SPTAG::Helper::AsyncFileIO
EstimateBufferSize	inc/Socket/SimpleSerialization.h	/^    EstimateBufferSize(const T& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
EstimateBufferSize	inc/Socket/SimpleSerialization.h	/^    EstimateBufferSize<ByteArray>(const ByteArray& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
EstimateBufferSize	inc/Socket/SimpleSerialization.h	/^    EstimateBufferSize<std::string>(const std::string& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
EstimateBufferSize	src/Socket/RemoteSearchQuery.cpp	/^RemoteQuery::EstimateBufferSize() const$/;"	f	class:RemoteQuery
EstimateBufferSize	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::EstimateBufferSize() const$/;"	f	class:RemoteSearchResult
EstimateSharedPtrBufferSize	inc/Socket/SimpleSerialization.h	/^    EstimateSharedPtrBufferSize(const std::shared_ptr<T>& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
EstimatedMemoryUsage	src/Core/VectorIndex.cpp	/^std::uint64_t VectorIndex::EstimatedMemoryUsage(std::uint64_t p_vectorCount, DimensionType p_dimension, VectorValueType p_valuetype, SizeType p_vectorsInBlock, SizeType p_maxmeta, IndexAlgoType p_algo, int p_treeNumber, int p_neighborhoodSize)$/;"	f	class:VectorIndex
EstimatedVectorCount	src/Core/VectorIndex.cpp	/^std::uint64_t VectorIndex::EstimatedVectorCount(std::uint64_t p_memory, DimensionType p_dimension, VectorValueType p_valuetype, SizeType p_vectorsInBlock, SizeType p_maxmeta, IndexAlgoType p_algo, int p_treeNumber, int p_neighborhoodSize)$/;"	f	class:VectorIndex
Execute	src/Server/SearchExecutor.cpp	/^SearchExecutor::Execute()$/;"	f	class:SearchExecutor
ExecuteInternal	src/Server/SearchExecutor.cpp	/^SearchExecutor::ExecuteInternal()$/;"	f	class:SearchExecutor
Exp	inc/Core/Common.h	/^    std::string Exp;$/;"	m	class:SPTAG::MyException
ExtraFullGraphSearcher	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            ExtraFullGraphSearcher()$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ExtraFullGraphSearcher	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^        class ExtraFullGraphSearcher : public IExtraSearcher$/;"	c	namespace:SPTAG::SPANN
ExtraWorkSpace	inc/Core/SPANN/IExtraSearcher.h	/^            ExtraWorkSpace() {}$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
ExtraWorkSpace	inc/Core/SPANN/IExtraSearcher.h	/^            ExtraWorkSpace(ExtraWorkSpace& other) {$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
ExtraWorkSpace	inc/Core/SPANN/IExtraSearcher.h	/^        struct ExtraWorkSpace : public SPTAG::COMMON::IWorkSpace$/;"	s	namespace:SPTAG::SPANN
ExtractOption	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::ExtractOption()$/;"	f	class:SearchExecutionContext
ExtractVector	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::ExtractVector(VectorValueType p_targetType)$/;"	f	class:SearchExecutionContext
Failed	inc/Socket/Packet.h	/^    Failed = 0x03$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus
FailedExecute	inc/Socket/RemoteSearchQuery.h	/^        FailedExecute = 3,$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
FailedNetwork	inc/Socket/RemoteSearchQuery.h	/^        FailedNetwork = 2,$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
FileInfoPair	inc/Helper/VectorSetReaders/TxtReader.h	/^    typedef std::pair<std::string, std::size_t> FileInfoPair;$/;"	t	class:SPTAG::Helper::TxtVectorReader
FileLogger	inc/Helper/Logging.h	/^            FileLogger(LogLevel level, const char* file) : m_level(level)$/;"	f	class:SPTAG::Helper::FileLogger
FileLogger	inc/Helper/Logging.h	/^        class FileLogger : public Logger {$/;"	c	namespace:SPTAG::Helper
FileMetadataSet	inc/Core/MetadataSet.h	/^class FileMetadataSet : public MetadataSet$/;"	c	namespace:SPTAG
FileMetadataSet	src/Core/MetadataSet.cpp	/^FileMetadataSet::FileMetadataSet(const std::string& p_metafile, const std::string& p_metaindexfile, std::uint64_t p_blockSize, std::uint64_t p_capacity, std::uint64_t p_metaSize)$/;"	f	class:FileMetadataSet
FindTrimmedSegment	src/Helper/CommonHelper.cpp	/^StrUtils::FindTrimmedSegment(const char* p_begin,$/;"	f	class:StrUtils
FineGrainedLock	inc/Core/Common/FineGrainedLock.h	/^            FineGrainedLock() {$/;"	f	class:SPTAG::COMMON::FineGrainedLock
FineGrainedLock	inc/Core/Common/FineGrainedLock.h	/^        class FineGrainedLock {$/;"	c	namespace:SPTAG::COMMON
FinishOne	src/Helper/Concurrent.cpp	/^WaitSignal::FinishOne()$/;"	f	class:WaitSignal
Float	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum RType {Int8, UInt8, Float, Int16};$/;"	e	enum:RType
FolderSep	inc/Core/Common.h	41;"	d
FolderSep	inc/Core/Common.h	81;"	d
GET_CHRONO_TIME	inc/Core/Common/cuda/params.h	57;"	d
GPUEdge	inc/Core/Common/cuda/TailNeighbors.hxx	/^    __host__ __device__ GPUEdge() : node(MaxSize), distance(FLT_MAX\/10.0), tonode(MaxSize) {}$/;"	f	struct:GPUEdge
GPUEdge	inc/Core/Common/cuda/TailNeighbors.hxx	/^__host__ __device__ struct GPUEdge$/;"	s
GPU_EdgeCompare	inc/Core/Common/cuda/TailNeighbors.hxx	/^struct GPU_EdgeCompare {$/;"	s
GPU_Quantizer	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __host__ GPU_Quantizer() {}$/;"	f	class:__anon1::GPU_Quantizer
GPU_Quantizer	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __host__ GPU_Quantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer, DistMetric metric) {$/;"	f	class:__anon1::GPU_Quantizer
GPU_Quantizer	inc/Core/Common/cuda/GPUQuantizer.hxx	/^class GPU_Quantizer {$/;"	c	namespace:__anon1
GPU_SortSelections	inc/Core/Common/cuda/TailNeighbors.hxx	/^void GPU_SortSelections(std::vector<Edge>* selections) {$/;"	f
GenerateTruth	src/Core/Common/TruthSet.cpp	/^        void TruthSet::GenerateTruth(std::shared_ptr<VectorSet> querySet, std::shared_ptr<VectorSet> vectorSet, const std::string truthFile,$/;"	f	class:SPTAG::COMMON::TruthSet
GenerateTruthGPU	inc/Core/Common/cuda/KNN.hxx	/^void GenerateTruthGPU(std::shared_ptr<VectorSet> querySet, std::shared_ptr<VectorSet> vectorSet, const std::string truthFile,$/;"	f
GenerateTruthGPUCore	inc/Core/Common/cuda/KNN.hxx	/^__host__ void GenerateTruthGPUCore(std::shared_ptr<VectorSet> querySet, std::shared_ptr<VectorSet> vectorSet, const std::string truthFile,$/;"	f
GetAndRemove	inc/Socket/ResourceManager.h	/^    std::shared_ptr<ResourceType> GetAndRemove(ResourceID p_resourceID)$/;"	f	class:SPTAG::Socket::ResourceManager
GetBase	inc/Core/Common/CommonUtils.h	/^            static inline int GetBase() {$/;"	f	class:SPTAG::COMMON::Utils
GetBase	inc/Core/Common/OPQQuantizer.h	/^        int OPQQuantizer<T>::GetBase() const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
GetBase	inc/Core/Common/PQQuantizer.h	/^        int PQQuantizer<T>::GetBase() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetBlockSize	inc/Core/Common/PQQuantizer.h	/^        SizeType PQQuantizer<T>::GetBlockSize() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetBuffer	inc/Core/SPANN/IExtraSearcher.h	/^            T* GetBuffer()$/;"	f	class:SPTAG::SPANN::PageBuffer
GetCenters	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::GetCenters() const$/;"	f	class:AggregatorContext
GetCodebooks	inc/Core/Common/PQQuantizer.h	/^        T* PQQuantizer<T>::GetCodebooks() {$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetCompressedSize	inc/Core/SPANN/Compressor.h	/^            size_t GetCompressedSize(const std::string &src, bool useDict)$/;"	f	class:SPTAG::SPANN::Compressor
GetConnection	src/Client/ClientWrapper.cpp	/^ClientWrapper::GetConnection()$/;"	f	class:ClientWrapper
GetConnection	src/Socket/ConnectionManager.cpp	/^ConnectionManager::GetConnection(ConnectionID p_connectionID)$/;"	f	class:ConnectionManager
GetConnectionID	src/Socket/Connection.cpp	/^Connection::GetConnectionID() const$/;"	f	class:Connection
GetContext	src/Aggregator/AggregatorService.cpp	/^AggregatorService::GetContext()$/;"	f	class:AggregatorService
GetCrosspondingResponseType	src/Socket/Packet.cpp	/^PacketTypeHelper::GetCrosspondingResponseType(PacketType p_type)$/;"	f	class:PacketTypeHelper
GetCurrMaxCheck	inc/Core/BKT/Index.h	/^            inline int GetCurrMaxCheck() const { return m_iMaxCheck; }$/;"	f	class:SPTAG::BKT::Index
GetCurrMaxCheck	inc/Core/KDT/Index.h	/^            inline int GetCurrMaxCheck() const { return m_iMaxCheck; }$/;"	f	class:SPTAG::KDT::Index
GetCurrMaxCheck	inc/Core/SPANN/Index.h	/^            inline int GetCurrMaxCheck() const { return m_options.m_maxCheck; }$/;"	f	class:SPTAG::SPANN::Index
GetData	src/Core/VectorSet.cpp	/^BasicVectorSet::GetData() const$/;"	f	class:BasicVectorSet
GetDictBuffer	inc/Core/SPANN/Compressor.h	/^            std::string GetDictBuffer()$/;"	f	class:SPTAG::SPANN::Compressor
GetDimPerSubvector	inc/Core/Common/PQQuantizer.h	/^        DimensionType PQQuantizer<T>::GetDimPerSubvector() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetDiskIndex	inc/Core/SPANN/Index.h	/^            inline std::shared_ptr<IExtraSearcher> GetDiskIndex() { return m_extraSearcher; }$/;"	f	class:SPTAG::SPANN::Index
GetDistCalcMethod	inc/Core/BKT/Index.h	/^            inline DistCalcMethod GetDistCalcMethod() const { return m_iDistCalcMethod; }$/;"	f	class:SPTAG::BKT::Index
GetDistCalcMethod	inc/Core/KDT/Index.h	/^            inline DistCalcMethod GetDistCalcMethod() const { return m_iDistCalcMethod; }$/;"	f	class:SPTAG::KDT::Index
GetDistCalcMethod	inc/Core/SPANN/Index.h	/^            inline DistCalcMethod GetDistCalcMethod() const { return m_options.m_distCalcMethod; }$/;"	f	class:SPTAG::SPANN::Index
GetDistance	inc/Core/BKT/Index.h	/^            inline float GetDistance(const void* target, const SizeType idx) const {$/;"	f	class:SPTAG::BKT::Index
GetDistance	inc/Core/KDT/Index.h	/^            inline float GetDistance(const void* target, const SizeType idx) const {$/;"	f	class:SPTAG::KDT::Index
GetDistance	inc/Core/SPANN/Index.h	/^            inline float GetDistance(const void* target, const SizeType idx) const {$/;"	f	class:SPTAG::SPANN::Index
GetEnableADC	inc/Core/Common/PQQuantizer.h	/^        bool PQQuantizer<T>::GetEnableADC() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetEnumValueType	inc/Core/Common.h	/^constexpr VectorValueType GetEnumValueType()$/;"	f	namespace:SPTAG
GetExtractMetadata	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetExtractMetadata() const$/;"	f	class:SearchExecutionContext
GetFeatureDim	inc/Core/BKT/Index.h	/^            inline DimensionType GetFeatureDim() const { return m_pSamples.C(); }$/;"	f	class:SPTAG::BKT::Index
GetFeatureDim	inc/Core/KDT/Index.h	/^            inline DimensionType GetFeatureDim() const { return m_pSamples.C(); }$/;"	f	class:SPTAG::KDT::Index
GetFeatureDim	inc/Core/SPANN/Index.h	/^            inline DimensionType GetFeatureDim() const { return m_pQuantizer ? m_pQuantizer->ReconstructDim() : m_index->GetFeatureDim(); }$/;"	f	class:SPTAG::SPANN::Index
GetFileHandler	inc/Helper/AsyncFileReader.h	/^            int GetFileHandler() { return m_fileHandle; }$/;"	f	class:SPTAG::Helper::AsyncFileIO
GetFileSizes	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::GetFileSizes(const std::string& p_filePaths)$/;"	f	class:TxtVectorReader
GetGlobalVID	inc/Core/SPANN/Index.h	/^            SizeType GetGlobalVID(SizeType vid)$/;"	f	class:SPTAG::SPANN::Index
GetHandle	inc/Helper/AsyncFileReader.h	/^            HANDLE GetHandle() { return m_handle.get(); }$/;"	f	class:SPTAG::Helper::HandleWrapper
GetHandlerMap	src/Client/ClientWrapper.cpp	/^ClientWrapper::GetHandlerMap()$/;"	f	class:ClientWrapper
GetIOCP	inc/Helper/AsyncFileReader.h	/^            aio_context_t& GetIOCP(int i) { return m_iocps[i]; }$/;"	f	class:SPTAG::Helper::AsyncFileIO
GetIndexAlgoType	inc/Core/BKT/Index.h	/^            inline IndexAlgoType GetIndexAlgoType() const { return IndexAlgoType::BKT; }$/;"	f	class:SPTAG::BKT::Index
GetIndexAlgoType	inc/Core/KDT/Index.h	/^            inline IndexAlgoType GetIndexAlgoType() const { return IndexAlgoType::KDT; }$/;"	f	class:SPTAG::KDT::Index
GetIndexAlgoType	inc/Core/SPANN/Index.h	/^            inline IndexAlgoType GetIndexAlgoType() const { return IndexAlgoType::SPANN; }$/;"	f	class:SPTAG::SPANN::Index
GetIndexFiles	inc/Core/BKT/Index.h	/^            std::shared_ptr<std::vector<std::string>> GetIndexFiles() const$/;"	f	class:SPTAG::BKT::Index
GetIndexFiles	inc/Core/KDT/Index.h	/^            std::shared_ptr<std::vector<std::string>> GetIndexFiles() const$/;"	f	class:SPTAG::KDT::Index
GetIndexFiles	inc/Core/SPANN/Index.h	/^            std::shared_ptr<std::vector<std::string>> GetIndexFiles() const$/;"	f	class:SPTAG::SPANN::Index
GetIndexMap	src/Server/ServiceContext.cpp	/^ServiceContext::GetIndexMap() const$/;"	f	class:ServiceContext
GetIndexName	inc/Core/VectorIndex.h	/^    virtual std::string GetIndexName() const $/;"	f	class:SPTAG::VectorIndex
GetIterator	src/Core/BKT/BKTIndex.cpp	/^        std::shared_ptr<ResultIterator> Index<T>::GetIterator(const void* p_target, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
GetIterator	src/Core/KDT/KDTIndex.cpp	/^        std::shared_ptr<ResultIterator> Index<T>::GetIterator(const void* p_target, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
GetIterator	src/Core/SPANN/SPANNIndex.cpp	/^        std::shared_ptr<ResultIterator> Index<T>::GetIterator(const void* p_target, bool p_searchDeleted) const$/;"	f	class:SPTAG::SPANN::Index
GetKsPerSubvector	inc/Core/Common/PQQuantizer.h	/^        SizeType PQQuantizer<T>::GetKsPerSubvector() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetL2DistanceTables	inc/Core/Common/PQQuantizer.h	/^        float* PQQuantizer<T>::GetL2DistanceTables() {$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetLogger	inc/Helper/Logging.h	/^            std::shared_ptr<Logger> GetLogger()$/;"	f	class:SPTAG::Helper::LoggerHolder
GetLogger	src/Core/VectorIndex.cpp	/^std::shared_ptr<Helper::Logger> SPTAG::GetLogger() {$/;"	f	class:SPTAG
GetLoggerHolder	src/Core/VectorIndex.cpp	/^Helper::LoggerHolder& SPTAG::GetLoggerHolder() {$/;"	f	class:SPTAG
GetMemoryIndex	inc/Core/SPANN/Index.h	/^            inline std::shared_ptr<VectorIndex> GetMemoryIndex() { return m_index; }$/;"	f	class:SPTAG::SPANN::Index
GetMetaMapping	src/Core/VectorIndex.cpp	/^VectorIndex::GetMetaMapping(std::string& meta) const$/;"	f	class:VectorIndex
GetMetadata	inc/Core/SearchQuery.h	/^    inline const ByteArray& GetMetadata(int p_index) const$/;"	f	class:SPTAG::QueryResult
GetMetadata	src/Core/MetadataSet.cpp	/^FileMetadataSet::GetMetadata(SizeType p_vectorID) const$/;"	f	class:FileMetadataSet
GetMetadata	src/Core/MetadataSet.cpp	/^MemMetadataSet::GetMetadata(SizeType p_vectorID) const$/;"	f	class:MemMetadataSet
GetMetadata	src/Core/VectorIndex.cpp	/^VectorIndex::GetMetadata() const {$/;"	f	class:VectorIndex
GetMetadata	src/Core/VectorIndex.cpp	/^VectorIndex::GetMetadata(SizeType p_vectorID) const {$/;"	f	class:VectorIndex
GetMetadataCopy	src/Core/MetadataSet.cpp	/^FileMetadataSet::GetMetadataCopy(SizeType p_vectorID) const$/;"	f	class:FileMetadataSet
GetMetadataCopy	src/Core/MetadataSet.cpp	/^MemMetadataSet::GetMetadataCopy(SizeType p_vectorID) const$/;"	f	class:MemMetadataSet
GetMetadataOffsets	src/Core/MetadataSet.cpp	/^bool MetadataSet::GetMetadataOffsets(const std::uint8_t* p_meta, const std::uint64_t p_metaLength, std::uint64_t* p_offsets, std::uint64_t p_offsetLength, char p_delimiter)$/;"	f	class:MetadataSet
GetMetadataSet	inc/Helper/VectorSetReaders/MemoryReader.h	/^            virtual std::shared_ptr<MetadataSet> GetMetadataSet() const { return nullptr; }$/;"	f	class:SPTAG::Helper::MemoryVectorReader
GetMetadataSet	src/Helper/VectorSetReaders/DefaultReader.cpp	/^DefaultVectorReader::GetMetadataSet() const$/;"	f	class:DefaultVectorReader
GetMetadataSet	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::GetMetadataSet() const$/;"	f	class:TxtVectorReader
GetMetadataSet	src/Helper/VectorSetReaders/XvecReader.cpp	/^XvecVectorReader::GetMetadataSet() const$/;"	f	class:XvecVectorReader
GetNumDeleted	inc/Core/BKT/Index.h	/^            inline SizeType GetNumDeleted() const { return (SizeType)m_deletedID.Count(); }$/;"	f	class:SPTAG::BKT::Index
GetNumDeleted	inc/Core/KDT/Index.h	/^            inline SizeType GetNumDeleted() const { return (SizeType)m_deletedID.Count(); }$/;"	f	class:SPTAG::KDT::Index
GetNumDeleted	inc/Core/SPANN/Index.h	/^            inline SizeType GetNumDeleted() const { return 0; }$/;"	f	class:SPTAG::SPANN::Index
GetNumSamples	inc/Core/BKT/Index.h	/^            inline SizeType GetNumSamples() const { return m_pSamples.R(); }$/;"	f	class:SPTAG::BKT::Index
GetNumSamples	inc/Core/KDT/Index.h	/^            inline SizeType GetNumSamples() const { return m_pSamples.R(); }$/;"	f	class:SPTAG::KDT::Index
GetNumSamples	inc/Core/SPANN/Index.h	/^            inline SizeType GetNumSamples() const { return m_options.m_vectorSize; }$/;"	f	class:SPTAG::SPANN::Index
GetNumSubvectors	inc/Core/Common/PQQuantizer.h	/^        DimensionType PQQuantizer<T>::GetNumSubvectors() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetNumThreads	inc/Core/BKT/Index.h	/^            inline int GetNumThreads() const { return m_iNumberOfThreads; }$/;"	f	class:SPTAG::BKT::Index
GetNumThreads	inc/Core/KDT/Index.h	/^            inline int GetNumThreads() const { return m_iNumberOfThreads; }$/;"	f	class:SPTAG::KDT::Index
GetNumThreads	inc/Core/SPANN/Index.h	/^            inline int GetNumThreads() const { return m_options.m_iSSDNumberOfThreads; }$/;"	f	class:SPTAG::SPANN::Index
GetOptions	inc/Core/SPANN/Index.h	/^            inline Options* GetOptions() { return &m_options; }$/;"	f	class:SPTAG::SPANN::Index
GetOptions	src/Server/QueryParser.cpp	/^QueryParser::GetOptions() const$/;"	f	class:QueryParser
GetOptions	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetOptions() const$/;"	f	class:SearchExecutionContext
GetPageSize	inc/Core/SPANN/IExtraSearcher.h	/^            std::size_t GetPageSize()$/;"	f	class:SPTAG::SPANN::PageBuffer
GetParameter	inc/Core/SPANN/Options.h	/^            std::string GetParameter(const char* p_section, const char* p_param) const$/;"	f	class:SPTAG::SPANN::Options
GetParameter	inc/Helper/SimpleIniReader.h	/^IniReader::GetParameter(const std::string& p_section, const std::string& p_param, const DataType& p_defaultVal) const$/;"	f	class:SPTAG::Helper::IniReader
GetParameter	src/Core/BKT/BKTIndex.cpp	/^            Index<T>::GetParameter(const char* p_param, const char* p_section) const$/;"	f	class:SPTAG::BKT::Index
GetParameter	src/Core/KDT/KDTIndex.cpp	/^            Index<T>::GetParameter(const char* p_param, const char* p_section) const$/;"	f	class:SPTAG::KDT::Index
GetParameter	src/Core/SPANN/SPANNIndex.cpp	/^            Index<T>::GetParameter(const char* p_param, const char* p_section) const$/;"	f	class:SPTAG::SPANN::Index
GetParameter	src/Core/VectorIndex.cpp	/^VectorIndex::GetParameter(const std::string& p_param, const std::string& p_section) const$/;"	f	class:VectorIndex
GetParameters	src/Helper/SimpleIniReader.cpp	/^IniReader::GetParameters(const std::string& p_section) const$/;"	f	class:IniReader
GetPosition	src/Socket/ConnectionManager.cpp	/^ConnectionManager::GetPosition(ConnectionID p_connectionID)$/;"	f	class:ConnectionManager
GetPostingDebug	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual ErrorCode GetPostingDebug(ExtraWorkSpace* p_exWorkSpace, std::shared_ptr<VectorIndex> p_index, SizeType vid, std::vector<SizeType>& VIDs, std::shared_ptr<VectorSet>& vecs)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
GetPostingDebug	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::GetPostingDebug(SizeType vid, std::vector<SizeType>& VIDs, std::shared_ptr<VectorSet>& vecs)$/;"	f	class:SPTAG::SPANN::Index
GetPostingListFullData	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::string GetPostingListFullData($/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
GetQuantizedTarget	inc/Core/Common/QueryResultSet.h	/^    T* GetQuantizedTarget()$/;"	f	class:SPTAG::COMMON::QueryResultSet
GetQuantizedTarget	inc/Core/SearchQuery.h	/^    inline const void* GetQuantizedTarget()$/;"	f	class:SPTAG::QueryResult
GetQuantizer	inc/Core/VectorIndex.h	/^    virtual std::shared_ptr<SPTAG::COMMON::IQuantizer> GetQuantizer() {$/;"	f	class:SPTAG::VectorIndex
GetQuantizerType	inc/Core/Common/OPQQuantizer.h	/^            QuantizerType GetQuantizerType() const $/;"	f	class:SPTAG::COMMON::OPQQuantizer
GetQuantizerType	inc/Core/Common/PQQuantizer.h	/^            QuantizerType GetQuantizerType() const {$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetRTypeWidth	inc/Core/Common/cuda/GPUQuantizer.hxx	/^__host__ int GetRTypeWidth(RType type) {$/;"	f	namespace:__anon1
GetRawValue	src/Helper/SimpleIniReader.cpp	/^IniReader::GetRawValue(const std::string& p_section, const std::string& p_param, std::string& p_value) const$/;"	f	class:IniReader
GetReconstructType	inc/Core/Common/OPQQuantizer.h	/^            VectorValueType GetReconstructType() const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
GetReconstructType	inc/Core/Common/PQQuantizer.h	/^            VectorValueType GetReconstructType() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
GetRelaxedMono	inc/Core/SPANN/SPANNResultIterator.h	/^			virtual bool GetRelaxedMono() $/;"	f	class:SPTAG::SPANN::SPANNResultIterator
GetRelaxedMono	src/Core/ResultIterator.cpp	/^	bool ResultIterator::GetRelaxedMono()$/;"	f	class:ResultIterator
GetRemoteConnectionID	src/Socket/Connection.cpp	/^Connection::GetRemoteConnectionID() const$/;"	f	class:Connection
GetRemoteServers	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::GetRemoteServers() const$/;"	f	class:AggregatorContext
GetRequestHeader	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::GetRequestHeader() const$/;"	f	class:AggregatorExecutionContext
GetResource	inc/Helper/AsyncFileReader.h	/^            ResourceType* GetResource()$/;"	f	class:SPTAG::Helper::AsyncFileIO
GetResult	inc/Core/SearchQuery.h	/^    inline BasicResult* GetResult(int i) const$/;"	f	class:SPTAG::QueryResult
GetResult	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::GetResult(std::size_t p_num)$/;"	f	class:AggregatorExecutionContext
GetResultNum	inc/Core/SearchQuery.h	/^    inline int GetResultNum() const$/;"	f	class:SPTAG::QueryResult
GetResultNum	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetResultNum() const$/;"	f	class:SearchExecutionContext
GetResults	inc/Core/SearchQuery.h	/^    inline BasicResult* GetResults() const$/;"	f	class:SPTAG::QueryResult
GetResults	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetResults() const$/;"	f	class:SearchExecutionContext
GetResults	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetResults()$/;"	f	class:SearchExecutionContext
GetSample	inc/Core/BKT/Index.h	/^            inline const void* GetSample(const SizeType idx) const { return (void*)m_pSamples[idx]; }$/;"	f	class:SPTAG::BKT::Index
GetSample	inc/Core/KDT/Index.h	/^            inline const void* GetSample(const SizeType idx) const { return (void*)m_pSamples[idx]; }$/;"	f	class:SPTAG::KDT::Index
GetSample	inc/Core/SPANN/Index.h	/^            inline const void* GetSample(const SizeType idx) const { return nullptr; }$/;"	f	class:SPTAG::SPANN::Index
GetSample	src/Core/VectorIndex.cpp	/^const void* VectorIndex::GetSample(ByteArray p_meta, bool& deleteFlag)$/;"	f	class:VectorIndex
GetSampleMap	inc/Core/Common/BKTree.h	/^            inline const std::unordered_map<SizeType, SizeType>& GetSampleMap() const { return m_pSampleCenterMap; }$/;"	f	class:SPTAG::COMMON::BKTree
GetSectorSize	inc/Helper/AsyncFileReader.h	/^            static uint64_t GetSectorSize(const char* p_filePath)$/;"	f	class:SPTAG::Helper::AsyncFileIO
GetSelectedIndexNames	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetSelectedIndexNames() const$/;"	f	class:SearchExecutionContext
GetServerNumber	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::GetServerNumber() const$/;"	f	class:AggregatorExecutionContext
GetServiceSettings	src/Server/ServiceContext.cpp	/^ServiceContext::GetServiceSettings() const$/;"	f	class:ServiceContext
GetSettings	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::GetSettings() const$/;"	f	class:AggregatorContext
GetTarget	inc/Core/Common/QueryResultSet.h	/^    inline const T* GetTarget() const$/;"	f	class:SPTAG::COMMON::QueryResultSet
GetTarget	inc/Core/SearchQuery.h	/^    inline const void* GetTarget()$/;"	f	class:SPTAG::QueryResult
GetTarget	src/Core/ResultIterator.cpp	/^	const void* ResultIterator::GetTarget()$/;"	f	class:ResultIterator
GetValueType	src/Core/VectorSet.cpp	/^BasicVectorSet::GetValueType() const$/;"	f	class:BasicVectorSet
GetValueTypeSize	inc/Core/Common.h	/^inline std::size_t GetValueTypeSize(VectorValueType p_valueType)$/;"	f	namespace:SPTAG
GetVector	src/Core/VectorSet.cpp	/^BasicVectorSet::GetVector(SizeType p_vectorID) const$/;"	f	class:BasicVectorSet
GetVector	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetVector() const$/;"	f	class:SearchExecutionContext
GetVectorBase64	src/Server/QueryParser.cpp	/^QueryParser::GetVectorBase64() const$/;"	f	class:QueryParser
GetVectorBase64Length	src/Server/QueryParser.cpp	/^QueryParser::GetVectorBase64Length() const$/;"	f	class:QueryParser
GetVectorDimension	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::GetVectorDimension() const$/;"	f	class:SearchExecutionContext
GetVectorElements	src/Server/QueryParser.cpp	/^QueryParser::GetVectorElements() const$/;"	f	class:QueryParser
GetVectorSet	inc/Helper/VectorSetReaders/MemoryReader.h	/^            virtual std::shared_ptr<VectorSet> GetVectorSet(SizeType start = 0, SizeType end = -1) const $/;"	f	class:SPTAG::Helper::MemoryVectorReader
GetVectorSet	src/Helper/VectorSetReaders/DefaultReader.cpp	/^DefaultVectorReader::GetVectorSet(SizeType start, SizeType end) const$/;"	f	class:DefaultVectorReader
GetVectorSet	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::GetVectorSet(SizeType start, SizeType end) const$/;"	f	class:TxtVectorReader
GetVectorSet	src/Helper/VectorSetReaders/XvecReader.cpp	/^XvecVectorReader::GetVectorSet(SizeType start, SizeType end) const$/;"	f	class:XvecVectorReader
GetVectorValueType	inc/Core/BKT/Index.h	/^            inline VectorValueType GetVectorValueType() const { return GetEnumValueType<T>(); }$/;"	f	class:SPTAG::BKT::Index
GetVectorValueType	inc/Core/KDT/Index.h	/^            inline VectorValueType GetVectorValueType() const { return GetEnumValueType<T>(); }$/;"	f	class:SPTAG::KDT::Index
GetVectorValueType	inc/Core/SPANN/Index.h	/^            inline VectorValueType GetVectorValueType() const { return GetEnumValueType<T>(); }$/;"	f	class:SPTAG::SPANN::Index
GetWorkSpace	src/Core/ResultIterator.cpp	/^    void* ResultIterator::GetWorkSpace()$/;"	f	class:ResultIterator
GraphAccuracyEstimation	inc/Core/Common/NeighborhoodGraph.h	/^            virtual float GraphAccuracyEstimation(VectorIndex* index, const SizeType samples, const std::unordered_map<SizeType, SizeType>* idmap = nullptr)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
HW_AVX	inc/Core/Common/InstructionUtils.h	/^                bool HW_AVX;$/;"	m	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
HW_AVX2	inc/Core/Common/InstructionUtils.h	/^                bool HW_AVX2;$/;"	m	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
HW_AVX512	inc/Core/Common/InstructionUtils.h	/^                bool HW_AVX512;$/;"	m	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
HW_SSE	inc/Core/Common/InstructionUtils.h	/^                bool HW_SSE;$/;"	m	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
HW_SSE2	inc/Core/Common/InstructionUtils.h	/^                bool HW_SSE2;$/;"	m	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
HandleDeadConnection	src/Client/ClientWrapper.cpp	/^ClientWrapper::HandleDeadConnection(Socket::ConnectionID p_cid)$/;"	f	class:ClientWrapper
HandleDeleter	inc/Helper/AsyncFileReader.h	/^            struct HandleDeleter$/;"	s	class:SPTAG::Helper::HandleWrapper
HandleHeartbeatRequest	src/Socket/Connection.cpp	/^Connection::HandleHeartbeatRequest()$/;"	f	class:Connection
HandleNoHandlerResponse	src/Socket/Connection.cpp	/^Connection::HandleNoHandlerResponse()$/;"	f	class:Connection
HandleReadBody	src/Socket/Connection.cpp	/^Connection::HandleReadBody(boost::system::error_code p_ec, std::size_t p_bytesTransferred)$/;"	f	class:Connection
HandleReadHeader	src/Socket/Connection.cpp	/^Connection::HandleReadHeader(boost::system::error_code p_ec, std::size_t p_bytesTransferred)$/;"	f	class:Connection
HandleRegisterRequest	src/Socket/Connection.cpp	/^Connection::HandleRegisterRequest()$/;"	f	class:Connection
HandleRegisterResponse	src/Socket/Connection.cpp	/^Connection::HandleRegisterResponse()$/;"	f	class:Connection
HandleWrapper	inc/Helper/AsyncFileReader.h	/^            HandleWrapper() : m_handle(INVALID_HANDLE_VALUE) {}$/;"	f	class:SPTAG::Helper::HandleWrapper
HandleWrapper	inc/Helper/AsyncFileReader.h	/^            HandleWrapper(HANDLE p_handle) : m_handle(p_handle) {}$/;"	f	class:SPTAG::Helper::HandleWrapper
HandleWrapper	inc/Helper/AsyncFileReader.h	/^            HandleWrapper(HandleWrapper&& p_right) : m_handle(std::move(p_right.m_handle)) {}$/;"	f	class:SPTAG::Helper::HandleWrapper
HandleWrapper	inc/Helper/AsyncFileReader.h	/^        class HandleWrapper$/;"	c	namespace:SPTAG::Helper
HardMultipleClustersAssign	src/BalancedDataPartition/main.cpp	/^inline float HardMultipleClustersAssign(const COMMON::Dataset<T>& data,$/;"	f
HasMetaMapping	inc/Core/VectorIndex.h	/^    inline bool HasMetaMapping() const { return nullptr != m_pMetaToVec; }$/;"	f	class:SPTAG::VectorIndex
HasQuantizedTarget	inc/Core/SearchQuery.h	/^    inline bool HasQuantizedTarget()$/;"	f	class:SPTAG::QueryResult
HashTableExponent	inc/Core/Common/WorkSpace.h	/^            inline int HashTableExponent() const $/;"	f	struct:SPTAG::COMMON::WorkSpace
HashTableExponent	inc/Core/Common/WorkSpace.h	/^            inline int HashTableExponent() const { return m_exp; }$/;"	f	class:SPTAG::COMMON::OptHashPosVector
HeadCandidate	inc/SSDServing/SelectHead.h	/^                HeadCandidate(int n, int c, int d) : nodeID(n), childrenSize(c), depth(d)$/;"	f	struct:SPTAG::SSDServing::SelectHead::HeadCandidate
HeadCandidate	inc/SSDServing/SelectHead.h	/^            struct HeadCandidate$/;"	s	namespace:SPTAG::SSDServing::SelectHead
Header	src/Socket/Packet.cpp	/^Packet::Header()$/;"	f	class:Packet
HeaderBuffer	src/Socket/Packet.cpp	/^Packet::HeaderBuffer() const$/;"	f	class:Packet
Heap	inc/Core/Common/Heap.h	/^            Heap() : heap(nullptr), length(0), count(0) {}$/;"	f	class:SPTAG::COMMON::Heap
Heap	inc/Core/Common/Heap.h	/^            Heap(int size) { Resize(size); }$/;"	f	class:SPTAG::COMMON::Heap
Heap	inc/Core/Common/Heap.h	/^        class Heap {$/;"	c	namespace:SPTAG::COMMON
Heapify	inc/Core/Common/QueryResultSet.h	/^    void Heapify(int count)$/;"	f	class:SPTAG::COMMON::QueryResultSet
HeartbeatRequest	inc/Socket/Packet.h	/^    HeartbeatRequest = 0x01,$/;"	m	class:SPTAG::Socket::PacketType
HeartbeatResponse	inc/Socket/Packet.h	/^    HeartbeatResponse = ResponseMask | HeartbeatRequest,$/;"	m	class:SPTAG::Socket::PacketType
Helper	inc/Core/BKT/Index.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Core/KDT/Index.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Core/SPANN/Index.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/ArgumentsParser.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/AsyncFileReader.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/Base64Encode.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/CommonHelper.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/Concurrent.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/ConcurrentSet.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/DiskIO.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/DynamicNeighbors.h	/^namespace Helper {$/;"	n	namespace:SPTAG
Helper	inc/Helper/LockFree.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/Logging.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/SimpleIniReader.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/StringConvert.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/ThreadPool.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/VectorSetReader.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/VectorSetReaders/DefaultReader.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/VectorSetReaders/MemoryReader.h	/^    namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/VectorSetReaders/TxtReader.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	inc/Helper/VectorSetReaders/XvecReader.h	/^namespace Helper$/;"	n	namespace:SPTAG
Helper	src/Helper/AsyncFileReader.cpp	/^    namespace Helper {$/;"	n	namespace:SPTAG	file:
IAbortOperation	inc/Core/VectorIndex.h	/^class IAbortOperation$/;"	c	namespace:SPTAG
IArgument	inc/Helper/ArgumentsParser.h	/^    class IArgument$/;"	c	class:SPTAG::Helper::ArgumentsParser
IArgument	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::IArgument::IArgument()$/;"	f	class:ArgumentsParser::IArgument
IExtraSearcher	inc/Core/SPANN/IExtraSearcher.h	/^            IExtraSearcher()$/;"	f	class:SPTAG::SPANN::IExtraSearcher
IExtraSearcher	inc/Core/SPANN/IExtraSearcher.h	/^        class IExtraSearcher$/;"	c	namespace:SPTAG::SPANN
IF_DEBUG	inc/Core/Common.h	11;"	d
IF_DEBUG	inc/Core/Common.h	8;"	d
IF_NDEBUG	inc/Core/Common.h	12;"	d
IF_NDEBUG	inc/Core/Common.h	9;"	d
ILP	inc/Core/Common/cuda/params.h	40;"	d
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ float INFTY<float>() {return FLT_MAX;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ int INFTY<int>() {return INT_MAX;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ int8_t INFTY<int8_t>() {return 127;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ long long int INFTY<long long int>() {return LLONG_MAX;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ uint32_t INFTY<uint32_t>() {return UINT_MAX;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<> __forceinline__ __host__ __device__ uint8_t INFTY<uint8_t>() {return 255;}$/;"	f
INFTY	inc/Core/Common/cuda/Distance.hxx	/^template<typename T> __host__ __device__ T INFTY() {}$/;"	f
IOBINARY	inc/Core/Common.h	131;"	d
IOSTRING	inc/Core/Common.h	132;"	d
IQuantizer	inc/Core/Common/IQuantizer.h	/^        class IQuantizer$/;"	c	namespace:SPTAG::COMMON
ISNOTSAME	inc/Core/Common/OPQQuantizer.h	11;"	d
ISNOTSAME	inc/Core/Common/OPQQuantizer.h	9;"	d
IWorkSpace	inc/Core/Common/WorkSpace.h	/^        class IWorkSpace {};$/;"	c	namespace:SPTAG::COMMON
IWorkSpaceFactory	inc/Core/Common/WorkSpace.h	/^        class IWorkSpaceFactory$/;"	c	namespace:SPTAG::COMMON
Index	inc/Core/BKT/Index.h	/^            Index()$/;"	f	class:SPTAG::BKT::Index
Index	inc/Core/BKT/Index.h	/^        class Index : public VectorIndex$/;"	c	namespace:SPTAG::BKT
Index	inc/Core/KDT/Index.h	/^            Index()$/;"	f	class:SPTAG::KDT::Index
Index	inc/Core/KDT/Index.h	/^        class Index : public VectorIndex$/;"	c	namespace:SPTAG::KDT
Index	inc/Core/SPANN/Index.h	/^            Index()$/;"	f	class:SPTAG::SPANN::Index
Index	inc/Core/SPANN/Index.h	/^        class Index : public VectorIndex$/;"	c	namespace:SPTAG::SPANN
IndexAlgoType	inc/Core/Common.h	/^enum class IndexAlgoType : std::uint8_t$/;"	c	namespace:SPTAG
IndexSearchResult	inc/Socket/RemoteSearchQuery.h	/^struct IndexSearchResult$/;"	s	struct:SPTAG::Socket::RemoteQuery
IniReader	inc/Helper/SimpleIniReader.h	/^class IniReader$/;"	c	namespace:SPTAG::Helper
IniReader	src/Helper/SimpleIniReader.cpp	/^IniReader::IniReader()$/;"	f	class:IniReader
Init	inc/Core/Common/WorkSpace.h	/^            void Init(SizeType size, int exp)$/;"	f	class:SPTAG::COMMON::OptHashPosVector
Init	inc/Core/Common/WorkSpacePool.h	/^            void Init(int size, ...)$/;"	f	class:SPTAG::COMMON::WorkSpacePool
Init	inc/Core/SearchQuery.h	/^    inline void Init(const void* p_target, int p_resultNum, bool p_withMeta)$/;"	f	class:SPTAG::QueryResult
Init	src/Core/MetadataSet.cpp	/^MemMetadataSet::Init(std::shared_ptr<Helper::DiskIO> p_metain, std::shared_ptr<Helper::DiskIO> p_metaindexin,$/;"	f	class:MemMetadataSet
Init	src/Core/MultiIndexScan.cpp	/^    void MultiIndexScan::Init(std::vector<std::shared_ptr<VectorIndex>> vectorIndices,$/;"	f	class:SPTAG::MultiIndexScan
InitCenters	inc/Core/Common/BKTree.h	/^        inline float InitCenters(const Dataset<T>& data, $/;"	f	namespace:SPTAG::COMMON
InitSearchTrees	inc/Core/Common/BKTree.h	/^            void InitSearchTrees(const Dataset<T>& data, std::function<float(const T*, const T*, DimensionType)> fComputeDistance, COMMON::QueryResultSet<T> &p_query, COMMON::WorkSpace &p_space) const$/;"	f	class:SPTAG::COMMON::BKTree
InitSearchTrees	inc/Core/Common/KDTree.h	/^            void InitSearchTrees(const Dataset<T>& p_data, std::function<float(const T*, const T*, DimensionType)> fComputeDistance, COMMON::QueryResultSet<T> &p_query, COMMON::WorkSpace &p_space) const$/;"	f	class:SPTAG::COMMON::KDTree
Initialize	inc/Core/Common/Dataset.h	/^            void Initialize(SizeType rows_, DimensionType cols_, SizeType rowsInBlock_, SizeType capacity_, T* data_ = nullptr, bool shareOwnership_ = true)$/;"	f	class:SPTAG::COMMON::Dataset
Initialize	inc/Core/Common/Labelset.h	/^            void Initialize(SizeType size, SizeType blockSize, SizeType capacity, InvalidIDBehavior invalidIDBehaviorSetting = InvalidIDBehavior::Passthrough)$/;"	f	class:SPTAG::COMMON::Labelset
Initialize	inc/Core/Common/WorkSpace.h	/^            void Initialize(int maxCheck, int hashExp)$/;"	f	struct:SPTAG::COMMON::WorkSpace
Initialize	inc/Core/Common/WorkSpace.h	/^            void Initialize(va_list& arg)$/;"	f	struct:SPTAG::COMMON::WorkSpace
Initialize	inc/Core/SPANN/IExtraSearcher.h	/^            void Initialize(int p_maxCheck, int p_hashExp, int p_internalResultNum, int p_maxPages, bool enableDataCompression) {$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
Initialize	inc/Core/SPANN/IExtraSearcher.h	/^            void Initialize(va_list& arg) {$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
Initialize	inc/Helper/AsyncFileReader.h	/^            virtual bool Initialize(const char* filePath, int openMode,$/;"	f	class:SPTAG::Helper::AsyncFileIO
Initialize	inc/Helper/DiskIO.h	/^            virtual bool Initialize(const char* filePath, int openMode,$/;"	f	class:SPTAG::Helper::SimpleBufferIO
Initialize	inc/Helper/DiskIO.h	/^            virtual bool Initialize(const char* filePath, int openMode,$/;"	f	class:SPTAG::Helper::SimpleFileIO
Initialize	src/Aggregator/AggregatorService.cpp	/^AggregatorService::Initialize()$/;"	f	class:AggregatorService
Initialize	src/Server/SearchService.cpp	/^SearchService::Initialize(int p_argNum, char* p_args[])$/;"	f	class:SearchService
InitializeDistanceTables	inc/Core/Common/PQQuantizer.h	/^        void PQQuantizer<T>::InitializeDistanceTables()$/;"	f	class:SPTAG::COMMON::PQQuantizer
Insert	inc/Core/Common/Labelset.h	/^            inline bool Insert(const SizeType& key)$/;"	f	class:SPTAG::COMMON::Labelset
InsertNeighbors	inc/Core/Common/KNearestNeighborhoodGraph.h	/^            void InsertNeighbors(VectorIndex* index, const SizeType node, SizeType insertNode, float insertDist)$/;"	f	class:SPTAG::COMMON::KNearestNeighborhoodGraph
InsertNeighbors	inc/Core/Common/RelativeNeighborhoodGraph.h	/^            void InsertNeighbors(VectorIndex* index, const SizeType node, SizeType insertNode, float insertDist)$/;"	f	class:SPTAG::COMMON::RelativeNeighborhoodGraph
InstructionSet	inc/Core/Common/InstructionUtils.h	/^        class InstructionSet$/;"	c	namespace:SPTAG::COMMON
InstructionSet_Internal	inc/Core/Common/InstructionUtils.h	/^            class InstructionSet_Internal$/;"	c	class:SPTAG::COMMON::InstructionSet
InstructionSet_Internal	src/Core/Common/InstructionUtils.cpp	/^        InstructionSet::InstructionSet_Internal::InstructionSet_Internal() :$/;"	f	class:SPTAG::COMMON::InstructionSet::InstructionSet_Internal
Int16	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum RType {Int8, UInt8, Float, Int16};$/;"	e	enum:RType
Int8	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum RType {Int8, UInt8, Float, Int16};$/;"	e	enum:RType
Interactive	inc/Server/SearchService.h	/^        Interactive,$/;"	m	class:SPTAG::Service::SearchService::ServeMode
InterlockedCompareExchange	inc/Core/Common.h	66;"	d
InterlockedExchange8	inc/Core/Common.h	67;"	d
InvalidIDBehavior	inc/Core/Common/Labelset.h	/^            enum class InvalidIDBehavior$/;"	c	class:SPTAG::COMMON::Labelset
IsAvailable	src/Client/ClientWrapper.cpp	/^ClientWrapper::IsAvailable() const$/;"	f	class:ClientWrapper
IsCompletedAfterFinsh	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::IsCompletedAfterFinsh(std::uint32_t p_finishedCount)$/;"	f	class:AggregatorExecutionContext
IsInitialized	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::IsInitialized() const$/;"	f	class:AggregatorContext
IsInitialized	src/Server/ServiceContext.cpp	/^ServiceContext::IsInitialized() const$/;"	f	class:ServiceContext
IsNormalized	inc/Helper/VectorSetReader.h	/^    virtual bool IsNormalized() const { return m_options->m_normalized; }$/;"	f	class:SPTAG::Helper::VectorSetReader
IsReady	inc/Core/VectorIndex.h	/^    virtual bool IsReady() const { return m_bReady; }$/;"	f	class:SPTAG::VectorIndex
IsRequestPacket	src/Socket/Packet.cpp	/^PacketTypeHelper::IsRequestPacket(PacketType p_type)$/;"	f	class:PacketTypeHelper
IsRequiredButNotSet	inc/Helper/ArgumentsParser.h	/^        virtual bool IsRequiredButNotSet() const$/;"	f	class:SPTAG::Helper::ArgumentsParser::ArgumentT
IsResponsePacket	src/Socket/Packet.cpp	/^PacketTypeHelper::IsResponsePacket(PacketType p_type)$/;"	f	class:PacketTypeHelper
IsValid	inc/Helper/AsyncFileReader.h	/^            bool IsValid() const { return m_handle.get() != INVALID_HANDLE_VALUE; };$/;"	f	class:SPTAG::Helper::HandleWrapper
Job	inc/Helper/ThreadPool.h	/^            class Job$/;"	c	class:SPTAG::Helper::ThreadPool
KDT	inc/Core/KDT/Index.h	/^    namespace KDT$/;"	n	namespace:SPTAG
KDT	src/Core/KDT/KDTIndex.cpp	/^    namespace KDT$/;"	n	namespace:SPTAG	file:
KDTNode	inc/Core/Common/KDTree.h	/^        struct KDTNode$/;"	s	namespace:SPTAG::COMMON
KDTSearch	inc/Core/Common/KDTree.h	/^            void KDTSearch(const Dataset<T>& p_data, std::function<float(const T*, const T*, DimensionType)> fComputeDistance, COMMON::QueryResultSet<T> &p_query,$/;"	f	class:SPTAG::COMMON::KDTree
KDTree	inc/Core/Common/KDTree.h	/^            KDTree() : m_iTreeNumber(2), m_numTopDimensionKDTSplit(5), m_iSamples(1000), m_lock(new std::shared_timed_mutex), m_pQuantizer(nullptr) {}$/;"	f	class:SPTAG::COMMON::KDTree
KDTree	inc/Core/Common/KDTree.h	/^            KDTree(const KDTree& other) : m_iTreeNumber(other.m_iTreeNumber),$/;"	f	class:SPTAG::COMMON::KDTree
KDTree	inc/Core/Common/KDTree.h	/^        class KDTree$/;"	c	namespace:SPTAG::COMMON
KEYTYPE	inc/Core/Common/cuda/params.h	39;"	d
KNN_THREADS	inc/Core/Common/cuda/params.h	36;"	d
KNearestNeighborhoodGraph	inc/Core/Common/KNearestNeighborhoodGraph.h	/^            KNearestNeighborhoodGraph() { m_pNeighborhoodGraph.SetName("NNG"); }$/;"	f	class:SPTAG::COMMON::KNearestNeighborhoodGraph
KNearestNeighborhoodGraph	inc/Core/Common/KNearestNeighborhoodGraph.h	/^        class KNearestNeighborhoodGraph : public NeighborhoodGraph$/;"	c	namespace:SPTAG::COMMON
KVAL	inc/Core/Common/cuda/ThreadHeap.hxx	/^    int KVAL;$/;"	m	class:ThreadHeap
KeepIoContext	src/Socket/Client.cpp	/^Client::KeepIoContext()$/;"	f	class:Client
KmeansArgs	inc/Core/Common/BKTree.h	/^            KmeansArgs(int k, DimensionType dim, SizeType datasize, int threadnum, DistCalcMethod distMethod, const std::shared_ptr<IQuantizer>& quantizer = nullptr) : _K(k), _DK(k), _D(dim), _RD(dim), _T(threadnum), _M(distMethod), m_pQuantizer(quantizer){$/;"	f	struct:SPTAG::COMMON::KmeansArgs
KmeansArgs	inc/Core/Common/BKTree.h	/^        struct KmeansArgs {$/;"	s	namespace:SPTAG::COMMON
KmeansAssign	inc/Core/Common/BKTree.h	/^        inline float KmeansAssign(const Dataset<T>& data,$/;"	f	namespace:SPTAG::COMMON
KmeansClustering	inc/Core/Common/BKTree.h	/^        int KmeansClustering(const Dataset<T>& data,$/;"	f	namespace:SPTAG::COMMON
KmeansKernel	inc/Core/Common/cuda/Kmeans.hxx	/^__global__ void KmeansKernel(Point<T,SUMTYPE,MAX_DIM>* points, T* centers, size_t workSize, int* label, SizeType* counts, float lambda, float* clusterDist, SizeType* clusterIdx, SizeType* newCounts, float* weightedCounts, float* newCenters, int* clusterLocks, float* currDist, int _D, int _DK, int metric, const bool updateCenters)$/;"	f
L2	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum DistMetric { L2, Cosine };$/;"	e	enum:DistMetric
L2Distance	inc/Core/Common/PQQuantizer.h	/^        float PQQuantizer<T>::L2Distance(const std::uint8_t* pX, const std::uint8_t* pY) const$/;"	f	class:SPTAG::COMMON::PQQuantizer
LISTCAP	inc/Core/Common/cuda/Refine.hxx	16;"	d
LISTSIZE	inc/Core/Common/cuda/Refine.hxx	17;"	d
LL_Assert	inc/Helper/Logging.h	/^            LL_Assert,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Count	inc/Helper/Logging.h	/^            LL_Count,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Debug	inc/Helper/Logging.h	/^            LL_Debug = 0,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Error	inc/Helper/Logging.h	/^            LL_Error,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Info	inc/Helper/Logging.h	/^            LL_Info,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Status	inc/Helper/Logging.h	/^            LL_Status,$/;"	m	class:SPTAG::Helper::LogLevel
LL_Warning	inc/Helper/Logging.h	/^            LL_Warning,$/;"	m	class:SPTAG::Helper::LogLevel
LOG_ALL	inc/Core/Common/cuda/log.hxx	44;"	d
LOG_CRIT	inc/Core/Common/cuda/log.hxx	48;"	d
LOG_CRIT	inc/Core/Common/cuda/log.hxx	51;"	d
LOG_CRITICAL	inc/Core/Common/cuda/log.hxx	/^    LOG_CRITICAL,$/;"	e	enum:log_level_t
LOG_DEBUG	inc/Core/Common/cuda/log.hxx	/^    LOG_DEBUG$/;"	e	enum:log_level_t
LOG_DEBUG	inc/Core/Common/cuda/log.hxx	80;"	d
LOG_DEBUG	inc/Core/Common/cuda/log.hxx	83;"	d
LOG_ERR	inc/Core/Common/cuda/log.hxx	56;"	d
LOG_ERR	inc/Core/Common/cuda/log.hxx	59;"	d
LOG_ERROR	inc/Core/Common/cuda/log.hxx	/^    LOG_ERROR,$/;"	e	enum:log_level_t
LOG_INFO	inc/Core/Common/cuda/log.hxx	/^    LOG_INFO,$/;"	e	enum:log_level_t
LOG_INFO	inc/Core/Common/cuda/log.hxx	72;"	d
LOG_INFO	inc/Core/Common/cuda/log.hxx	75;"	d
LOG_NOTHING	inc/Core/Common/cuda/log.hxx	/^    LOG_NOTHING,$/;"	e	enum:log_level_t
LOG_WARN	inc/Core/Common/cuda/log.hxx	64;"	d
LOG_WARN	inc/Core/Common/cuda/log.hxx	67;"	d
LOG_WARNING	inc/Core/Common/cuda/log.hxx	/^    LOG_WARNING,$/;"	e	enum:log_level_t
LabelType	src/BalancedDataPartition/main.cpp	/^typedef short LabelType;$/;"	t	file:
Labelset	inc/Core/Common/Labelset.h	/^            Labelset()$/;"	f	class:SPTAG::COMMON::Labelset
Labelset	inc/Core/Common/Labelset.h	/^        class Labelset$/;"	c	namespace:SPTAG::COMMON
LeafNode	inc/Core/Common/cuda/TPtree.hxx	/^class LeafNode {$/;"	c
Length	inc/Core/CommonDataStructure.h	/^Array<T>::Length() const$/;"	f	class:SPTAG::Array
ListInfo	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            struct ListInfo$/;"	s	class:SPTAG::SPANN::ExtraFullGraphSearcher
ListInfo	src/Extension/CacheFifoMt.cpp	/^struct ListInfo$/;"	s	file:
ListInfo	src/Extension/CacheLfuMt.cpp	/^struct ListInfo$/;"	s	file:
ListInfo	src/Extension/CacheLruMt.cpp	/^struct ListInfo$/;"	s	file:
ListInfo	src/Extension/CacheLruWeak.cpp	/^struct ListInfo$/;"	s	file:
ListionIOCP	inc/Helper/AsyncFileReader.h	/^            void ListionIOCP(int i) {$/;"	f	class:SPTAG::Helper::AsyncFileIO
ListionIOCP	inc/Helper/AsyncFileReader.h	/^            void ListionIOCP(int i)$/;"	f	class:SPTAG::Helper::AsyncFileIO
Load	inc/Core/Common/Dataset.h	/^            ErrorCode Load(char* pDataPointsMemFile, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::Dataset
Load	inc/Core/Common/Dataset.h	/^            ErrorCode Load(std::shared_ptr<Helper::DiskIO> pInput, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::Dataset
Load	inc/Core/Common/Dataset.h	/^            ErrorCode Load(std::string sDataPointsFileName, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::Dataset
Load	inc/Core/Common/Labelset.h	/^            inline ErrorCode Load(char* pmemoryFile, SizeType blockSize, SizeType capacity, InvalidIDBehavior invalidIDBehaviorSetting = InvalidIDBehavior::Passthrough)$/;"	f	class:SPTAG::COMMON::Labelset
Load	inc/Core/Common/Labelset.h	/^            inline ErrorCode Load(std::shared_ptr<Helper::DiskIO> input, SizeType blockSize, SizeType capacity, InvalidIDBehavior invalidIDBehaviorSetting = InvalidIDBehavior::Passthrough)$/;"	f	class:SPTAG::COMMON::Labelset
Load	inc/Core/Common/Labelset.h	/^            inline ErrorCode Load(std::string filename, SizeType blockSize, SizeType capacity, InvalidIDBehavior invalidIDBehaviorSetting = InvalidIDBehavior::Passthrough)$/;"	f	class:SPTAG::COMMON::Labelset
LoadBatch	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            ErrorCode LoadBatch(size_t start, size_t end)$/;"	f	struct:SPTAG::SPANN::Selection
LoadCenters	src/BalancedDataPartition/main.cpp	/^bool LoadCenters(T* centers, SizeType row, DimensionType col, const std::string& centerpath, float* lambda = nullptr, float* diff = nullptr, float* mindist = nullptr, int* noimprovement = nullptr) {$/;"	f
LoadConfig	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::LoadConfig(Helper::IniReader& p_reader)$/;"	f	class:SPTAG::BKT::Index
LoadConfig	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::LoadConfig(Helper::IniReader& p_reader)$/;"	f	class:SPTAG::KDT::Index
LoadConfig	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::LoadConfig(Helper::IniReader& p_reader)$/;"	f	class:SPTAG::SPANN::Index
LoadFile	inc/Helper/VectorSetReaders/MemoryReader.h	/^            virtual ErrorCode LoadFile(const std::string& p_filePaths) { return ErrorCode::Success; }$/;"	f	class:SPTAG::Helper::MemoryVectorReader
LoadFile	src/Helper/VectorSetReaders/DefaultReader.cpp	/^DefaultVectorReader::LoadFile(const std::string& p_filePaths)$/;"	f	class:DefaultVectorReader
LoadFile	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::LoadFile(const std::string& p_filePaths)$/;"	f	class:TxtVectorReader
LoadFile	src/Helper/VectorSetReaders/XvecReader.cpp	/^XvecVectorReader::LoadFile(const std::string& p_filePaths)$/;"	f	class:XvecVectorReader
LoadFileInternal	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::LoadFileInternal(const std::string& p_filePath,$/;"	f	class:TxtVectorReader
LoadGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode LoadGraph(char* pGraphMemFile, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
LoadGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode LoadGraph(std::shared_ptr<Helper::DiskIO> input, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
LoadGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode LoadGraph(std::string sGraphFilename, SizeType blockSize, SizeType capacity)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
LoadIQuantizer	src/Core/Common/IQuantizer.cpp	/^        std::shared_ptr<IQuantizer> IQuantizer::LoadIQuantizer(SPTAG::ByteArray bytes)$/;"	f	class:SPTAG::COMMON::IQuantizer
LoadIQuantizer	src/Core/Common/IQuantizer.cpp	/^        std::shared_ptr<IQuantizer> IQuantizer::LoadIQuantizer(std::shared_ptr<Helper::DiskIO> p_in) {$/;"	f	class:SPTAG::COMMON::IQuantizer
LoadIndex	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual bool LoadIndex(Options& p_opt) {$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
LoadIndex	src/Core/VectorIndex.cpp	/^VectorIndex::LoadIndex(const std::string& p_config, const std::vector<ByteArray>& p_indexBlobs, std::shared_ptr<VectorIndex>& p_vectorIndex)$/;"	f	class:VectorIndex
LoadIndex	src/Core/VectorIndex.cpp	/^VectorIndex::LoadIndex(const std::string& p_loaderFilePath, std::shared_ptr<VectorIndex>& p_vectorIndex)$/;"	f	class:VectorIndex
LoadIndexConfig	src/Core/VectorIndex.cpp	/^VectorIndex::LoadIndexConfig(Helper::IniReader& p_reader)$/;"	f	class:VectorIndex
LoadIndexData	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::LoadIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::BKT::Index
LoadIndexData	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::LoadIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::KDT::Index
LoadIndexData	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::LoadIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::SPANN::Index
LoadIndexDataFromMemory	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::LoadIndexDataFromMemory(const std::vector<ByteArray>& p_indexBlobs)$/;"	f	class:SPTAG::BKT::Index
LoadIndexDataFromMemory	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::LoadIndexDataFromMemory(const std::vector<ByteArray>& p_indexBlobs)$/;"	f	class:SPTAG::KDT::Index
LoadIndexDataFromMemory	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::LoadIndexDataFromMemory(const std::vector<ByteArray>& p_indexBlobs)$/;"	f	class:SPTAG::SPANN::Index
LoadIndexFromFile	src/Core/VectorIndex.cpp	/^VectorIndex::LoadIndexFromFile(const std::string& p_file, std::shared_ptr<VectorIndex>& p_vectorIndex)$/;"	f	class:VectorIndex
LoadIni	src/Helper/SimpleIniReader.cpp	/^ErrorCode IniReader::LoadIni(std::shared_ptr<Helper::DiskIO> p_input)$/;"	f	class:IniReader
LoadIniFile	src/Helper/SimpleIniReader.cpp	/^IniReader::LoadIniFile(const std::string& p_iniFilePath)$/;"	f	class:IniReader
LoadQuantizer	inc/Core/Common/OPQQuantizer.h	/^        ErrorCode OPQQuantizer<T>::LoadQuantizer(std::shared_ptr<Helper::DiskIO> p_in)$/;"	f	class:SPTAG::COMMON::OPQQuantizer
LoadQuantizer	inc/Core/Common/OPQQuantizer.h	/^        ErrorCode OPQQuantizer<T>::LoadQuantizer(std::uint8_t* raw_bytes)$/;"	f	class:SPTAG::COMMON::OPQQuantizer
LoadQuantizer	inc/Core/Common/PQQuantizer.h	/^        ErrorCode PQQuantizer<T>::LoadQuantizer(std::shared_ptr<Helper::DiskIO> p_in)$/;"	f	class:SPTAG::COMMON::PQQuantizer
LoadQuantizer	inc/Core/Common/PQQuantizer.h	/^        ErrorCode PQQuantizer<T>::LoadQuantizer(std::uint8_t* raw_bytes)$/;"	f	class:SPTAG::COMMON::PQQuantizer
LoadQuantizer	src/Core/VectorIndex.cpp	/^VectorIndex::LoadQuantizer(std::string p_quantizerFile)$/;"	f	class:VectorIndex
LoadTrees	inc/Core/Common/BKTree.h	/^            ErrorCode LoadTrees(char* pBKTMemFile)$/;"	f	class:SPTAG::COMMON::BKTree
LoadTrees	inc/Core/Common/BKTree.h	/^            ErrorCode LoadTrees(std::shared_ptr<Helper::DiskIO> p_input)$/;"	f	class:SPTAG::COMMON::BKTree
LoadTrees	inc/Core/Common/BKTree.h	/^            ErrorCode LoadTrees(std::string sTreeFileName)$/;"	f	class:SPTAG::COMMON::BKTree
LoadTrees	inc/Core/Common/KDTree.h	/^            ErrorCode LoadTrees(char*  pKDTMemFile)$/;"	f	class:SPTAG::COMMON::KDTree
LoadTrees	inc/Core/Common/KDTree.h	/^            ErrorCode LoadTrees(std::shared_ptr<Helper::DiskIO> p_input)$/;"	f	class:SPTAG::COMMON::KDTree
LoadTrees	inc/Core/Common/KDTree.h	/^            ErrorCode LoadTrees(std::string sTreeFileName)$/;"	f	class:SPTAG::COMMON::KDTree
LoadTruth	inc/Core/Common/TruthSet.h	/^            static void LoadTruth(std::shared_ptr<SPTAG::Helper::DiskIO>& ptr, std::vector<std::set<SizeType>>& truth, SizeType& NumQuerys, int& originalK, int K, TruthFileType type)$/;"	f	class:SPTAG::COMMON::TruthSet
LoadTruthDefault	inc/Core/Common/TruthSet.h	/^            static void LoadTruthDefault(std::shared_ptr<SPTAG::Helper::DiskIO>& ptr, std::vector<std::set<SizeType>>& truth, int K, int& originalK, SizeType& p_iTruthNumber) {$/;"	f	class:SPTAG::COMMON::TruthSet
LoadTruthTXT	inc/Core/Common/TruthSet.h	/^            static void LoadTruthTXT(std::shared_ptr<SPTAG::Helper::DiskIO>& ptr, std::vector<std::set<SizeType>>& truth, int K, int& originalK, SizeType& p_iTruthNumber)$/;"	f	class:SPTAG::COMMON::TruthSet
LoadTruthXVEC	inc/Core/Common/TruthSet.h	/^            static void LoadTruthXVEC(std::shared_ptr<SPTAG::Helper::DiskIO>& ptr, std::vector<std::set<SizeType>>& truth, int K, int& originalK, SizeType& p_iTruthNumber)$/;"	f	class:SPTAG::COMMON::TruthSet
LoadingHeadInfo	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            int LoadingHeadInfo(const std::string& p_file, int p_postingPageLimit, std::vector<ListInfo>& p_listInfos)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
Local	src/Helper/Base64Encode.cpp	/^namespace Local$/;"	n	namespace:__anon2	file:
Local	src/Server/SearchService.cpp	/^namespace Local$/;"	n	namespace:__anon3	file:
LockFree	inc/Helper/LockFree.h	/^        namespace LockFree$/;"	n	namespace:SPTAG::Helper
LockFreeVector	inc/Helper/LockFree.h	/^                LockFreeVector() {}$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
LockFreeVector	inc/Helper/LockFree.h	/^            class LockFreeVector $/;"	c	namespace:SPTAG::Helper::LockFree
LockGuard	inc/Helper/Concurrent.h	/^class LockGuard {$/;"	c	namespace:SPTAG::Helper::Concurrent
LockStat	inc/Extension/Locks.hh	/^        struct LockStat$/;"	s	namespace:SPTAG::EXT
LogLevel	inc/Helper/Logging.h	/^        enum class LogLevel$/;"	c	namespace:SPTAG::Helper
Logger	inc/Helper/Logging.h	/^        class Logger $/;"	c	namespace:SPTAG::Helper
LoggerHolder	inc/Helper/Logging.h	/^            LoggerHolder(std::shared_ptr<Logger> logger) : m_logger(logger) {}$/;"	f	class:SPTAG::Helper::LoggerHolder
LoggerHolder	inc/Helper/Logging.h	/^        class LoggerHolder$/;"	c	namespace:SPTAG::Helper
Logging	inc/Helper/Logging.h	/^            virtual void Logging(const char* title, LogLevel level, const char* file, int line, const char* func, const char* format, ...)$/;"	f	class:SPTAG::Helper::FileLogger
Logging	inc/Helper/Logging.h	/^            virtual void Logging(const char* title, LogLevel level, const char* file, int line, const char* func, const char* format, ...)$/;"	f	class:SPTAG::Helper::SimpleLogger
MAX_CHECK_COUNT	inc/Core/Common/cuda/Refine.hxx	14;"	d
MAX_NTHREADS	inc/Extension/CacheLruMt.hh	31;"	d
MAX_PQ_SHAPE	inc/Core/Common/cuda/KNN.hxx	270;"	d
MAX_PQ_SHAPE	inc/Core/Common/cuda/TailNeighbors.hxx	354;"	d
MAX_SHAPE	inc/Core/Common/cuda/KNN.hxx	269;"	d
MAX_SHAPE	inc/Core/Common/cuda/TailNeighbors.hxx	339;"	d
MajorVersion	inc/Socket/RemoteSearchQuery.h	/^    static constexpr std::uint16_t MajorVersion() { return 1; }$/;"	f	struct:SPTAG::Socket::RemoteQuery
MajorVersion	inc/Socket/RemoteSearchQuery.h	/^    static constexpr std::uint16_t MajorVersion() { return 1; }$/;"	f	struct:SPTAG::Socket::RemoteQuery::RemoteSearchResult
MaxCheck	inc/Core/Common/WorkSpace.h	/^            inline int MaxCheck() const { return (1 << (int)(log2(m_poolSize + 1) - m_exp)); }$/;"	f	class:SPTAG::COMMON::OptHashPosVector
MaxDist	inc/Core/Common.h	/^const float MaxDist = (std::numeric_limits<float>::max)() \/ 10;$/;"	m	namespace:SPTAG
MaxSize	inc/Core/Common.h	/^const SizeType MaxSize = (std::numeric_limits<SizeType>::max)();$/;"	m	namespace:SPTAG
MemMetadataSet	inc/Core/MetadataSet.h	/^class MemMetadataSet : public MetadataSet$/;"	c	namespace:SPTAG
MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::MemMetadataSet(ByteArray p_metadata, ByteArray p_offsets, SizeType p_count)$/;"	f	class:MemMetadataSet
MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::MemMetadataSet(ByteArray p_metadata, ByteArray p_offsets, SizeType p_count,$/;"	f	class:MemMetadataSet
MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::MemMetadataSet(const std::string& p_metafile, const std::string& p_metaindexfile,$/;"	f	class:MemMetadataSet
MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::MemMetadataSet(std::shared_ptr<Helper::DiskIO> p_metain, std::shared_ptr<Helper::DiskIO> p_metaindexin,$/;"	f	class:MemMetadataSet
MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::MemMetadataSet(std::uint64_t p_blockSize, std::uint64_t p_capacity, std::uint64_t p_metaSize): m_count(0), m_metadataHolder(ByteArray::c_empty)$/;"	f	class:MemMetadataSet
MemoryVectorReader	inc/Helper/VectorSetReaders/MemoryReader.h	/^            MemoryVectorReader(std::shared_ptr<ReaderOptions> p_options, std::shared_ptr<VectorSet> p_vectors) :$/;"	f	class:SPTAG::Helper::MemoryVectorReader
MemoryVectorReader	inc/Helper/VectorSetReaders/MemoryReader.h	/^        class MemoryVectorReader : public VectorSetReader$/;"	c	namespace:SPTAG::Helper
MergeData	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::MergeData()$/;"	f	class:TxtVectorReader
MergeIndex	src/Core/VectorIndex.cpp	/^VectorIndex::MergeIndex(VectorIndex* p_addindex, int p_threadnum, IAbortOperation* p_abort)$/;"	f	class:VectorIndex
Meta	inc/Core/SearchResult.h	/^        ByteArray Meta;$/;"	m	struct:SPTAG::BasicResult
MetadataMap	src/Core/VectorIndex.cpp	/^typedef typename SPTAG::Helper::Concurrent::ConcurrentMap<std::string, SPTAG::SizeType> MetadataMap;$/;"	t	file:
MetadataOffsets	src/Core/MetadataSet.cpp	/^typedef typename SPTAG::Helper::LockFree::LockFreeVector<std::uint64_t> MetadataOffsets;$/;"	t	file:
MetadataSet	inc/Core/MetadataSet.h	/^class MetadataSet$/;"	c	namespace:SPTAG
MetadataSet	src/Core/MetadataSet.cpp	/^MetadataSet::MetadataSet()$/;"	f	class:MetadataSet
MinDist	inc/Core/Common.h	/^const float MinDist = (std::numeric_limits<float>::min)();$/;"	m	namespace:SPTAG
MirrorVersion	inc/Socket/RemoteSearchQuery.h	/^    static constexpr std::uint16_t MirrorVersion() { return 0; }$/;"	f	struct:SPTAG::Socket::RemoteQuery
MirrorVersion	inc/Socket/RemoteSearchQuery.h	/^    static constexpr std::uint16_t MirrorVersion() { return 0; }$/;"	f	struct:SPTAG::Socket::RemoteQuery::RemoteSearchResult
MultiIndexScan	inc/Core/MultiIndexScan.h	/^    class MultiIndexScan$/;"	c	namespace:SPTAG
MultiIndexScan	src/Core/MultiIndexScan.cpp	/^    MultiIndexScan::MultiIndexScan() {}$/;"	f	class:SPTAG::MultiIndexScan
MultiIndexScan	src/Core/MultiIndexScan.cpp	/^    MultiIndexScan::MultiIndexScan(std::vector<std::shared_ptr<VectorIndex>> vectorIndices,$/;"	f	class:SPTAG::MultiIndexScan
MultipleClustersAssign	src/BalancedDataPartition/main.cpp	/^inline float MultipleClustersAssign(const COMMON::Dataset<T>& data,$/;"	f
MyException	inc/Core/Common.h	/^    MyException(std::string e) { Exp = e; }$/;"	f	class:SPTAG::MyException
MyException	inc/Core/Common.h	/^class MyException : public std::exception$/;"	c	namespace:SPTAG
N	inc/Core/Common/cuda/TPtree.hxx	/^    int N;$/;"	m	class:TPtree
Name	inc/Core/Common/Dataset.h	/^            const std::string& Name() const { return name; }$/;"	f	class:SPTAG::COMMON::Dataset
NeedRefine	inc/Core/BKT/Index.h	/^            inline bool NeedRefine() const { return m_deletedID.Count() > (size_t)(GetNumSamples() * m_fDeletePercentageForRefine); }$/;"	f	class:SPTAG::BKT::Index
NeedRefine	inc/Core/KDT/Index.h	/^            inline bool NeedRefine() const { return m_deletedID.Count() > (size_t)(GetNumSamples() * m_fDeletePercentageForRefine); }$/;"	f	class:SPTAG::KDT::Index
NeedRefine	inc/Core/SPANN/Index.h	/^            inline bool NeedRefine() const { return false; }$/;"	f	class:SPTAG::SPANN::Index
NeighborhoodGraph	inc/Core/Common/NeighborhoodGraph.h	/^            NeighborhoodGraph() : m_iTPTNumber(32),$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
NeighborhoodGraph	inc/Core/Common/NeighborhoodGraph.h	/^        class NeighborhoodGraph$/;"	c	namespace:SPTAG::COMMON
NeverDup	src/Core/BKT/BKTIndex.cpp	/^            bool NeverDup(COMMON::QueryResultSet<T>& query, SizeType node, float score)$/;"	f	namespace:SPTAG::BKT::StaticDispatch
Next	inc/Core/SPANN/SPANNResultIterator.h	/^			virtual std::shared_ptr<QueryResult> Next(int batch)$/;"	f	class:SPTAG::SPANN::SPANNResultIterator
Next	src/Core/MultiIndexScan.cpp	/^	bool MultiIndexScan::Next(BasicResult& result)$/;"	f	class:SPTAG::MultiIndexScan
Next	src/Core/ResultIterator.cpp	/^	std::shared_ptr<QueryResult> ResultIterator::Next(int batch)$/;"	f	class:ResultIterator
NodeDistPair	inc/Core/SearchResult.h	/^        NodeDistPair(SizeType _node = -1, float _distance = MaxDist) : node(_node), distance(_distance) {}$/;"	f	struct:SPTAG::NodeDistPair
NodeDistPair	inc/Core/SearchResult.h	/^    struct NodeDistPair$/;"	s	namespace:SPTAG
Normalize	inc/Core/Common/CommonUtils.h	/^            static void Normalize(T* arr, DimensionType col, int base) {$/;"	f	class:SPTAG::COMMON::Utils
Normalize	src/Core/VectorSet.cpp	/^BasicVectorSet::Normalize(int p_threads) $/;"	f	class:BasicVectorSet
NumaStrategy	inc/Core/Common.h	/^enum class NumaStrategy : std::uint8_t$/;"	c	namespace:SPTAG
OPQQuantizer	inc/Core/Common/OPQQuantizer.h	/^        OPQQuantizer<T>::OPQQuantizer() : PQQuantizer<OPQMatrixType>::PQQuantizer()$/;"	f	class:SPTAG::COMMON::OPQQuantizer
OPQQuantizer	inc/Core/Common/OPQQuantizer.h	/^        OPQQuantizer<T>::OPQQuantizer(DimensionType NumSubvectors, SizeType KsPerSubvector, DimensionType DimPerSubvector, bool EnableADC, std::unique_ptr<T[]>&& Codebooks, std::unique_ptr<OPQMatrixType[]>&& OPQMatrix) : m_OPQMatrix(std::move(OPQMatrix)), PQQuantizer<T>::PQQuantizer(NumSubvectors, KsPerSubvector, DimPerSubvector, EnableADC, std::move(Codebooks)), m_matrixDim(NumSubvectors * DimPerSubvector)$/;"	f	class:SPTAG::COMMON::OPQQuantizer
OPQQuantizer	inc/Core/Common/OPQQuantizer.h	/^        class OPQQuantizer : public PQQuantizer<OPQMatrixType>$/;"	c	namespace:SPTAG::COMMON
Ok	inc/Socket/Packet.h	/^    Ok = 0x00,$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus
OnConnectionFail	src/Socket/Connection.cpp	/^Connection::OnConnectionFail(const boost::system::error_code& p_ec)$/;"	f	class:Connection
OptHashPosVector	inc/Core/Common/WorkSpace.h	/^            OptHashPosVector(): m_secondHash(false), m_exp(2), m_poolSize(8191) {}$/;"	f	class:SPTAG::COMMON::OptHashPosVector
OptHashPosVector	inc/Core/Common/WorkSpace.h	/^        class OptHashPosVector$/;"	c	namespace:SPTAG::COMMON
OptionPair	inc/Server/QueryParser.h	/^    typedef std::pair<const char*, const char*> OptionPair;$/;"	t	class:SPTAG::Service::QueryParser
Options	inc/Core/SPANN/Options.h	/^            Options() {$/;"	f	class:SPTAG::SPANN::Options
Options	inc/Core/SPANN/Options.h	/^        class Options$/;"	c	namespace:SPTAG::SPANN
OrderStrategy	inc/Core/Common.h	/^enum class OrderStrategy : std::uint8_t$/;"	c	namespace:SPTAG
OutputResult	inc/SSDServing/SSDIndex.h	/^            ErrorCode OutputResult(const std::string& p_output, std::vector<QueryResult>& p_results, int p_resultNum)$/;"	f	namespace:SPTAG::SSDServing::SSDIndex
OutputSSDIndexFile	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            void OutputSSDIndexFile(const std::string& p_outputFile,$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
PAGE_ALLOC	inc/Core/Common.h	108;"	d
PAGE_FREE	inc/Core/Common.h	109;"	d
PQQuantizer	inc/Core/Common/PQQuantizer.h	/^        PQQuantizer<T>::PQQuantizer() : m_NumSubvectors(0), m_KsPerSubvector(0), m_DimPerSubvector(0), m_BlockSize(0), m_EnableADC(false)$/;"	f	class:SPTAG::COMMON::PQQuantizer
PQQuantizer	inc/Core/Common/PQQuantizer.h	/^        PQQuantizer<T>::PQQuantizer(DimensionType NumSubvectors, SizeType KsPerSubvector, DimensionType DimPerSubvector, bool EnableADC, std::unique_ptr<T[]>&& Codebooks) : m_NumSubvectors(NumSubvectors), m_KsPerSubvector(KsPerSubvector), m_DimPerSubvector(DimPerSubvector), m_BlockSize(KsPerSubvector* KsPerSubvector), m_codebooks(std::move(Codebooks)), m_EnableADC(EnableADC)$/;"	f	class:SPTAG::COMMON::PQQuantizer
PQQuantizer	inc/Core/Common/PQQuantizer.h	/^        class PQQuantizer : public IQuantizer$/;"	c	namespace:SPTAG::COMMON
PREFETCH	inc/Core/Common/CommonUtils.h	20;"	d
Packet	inc/Socket/Packet.h	/^class Packet$/;"	c	class:SPTAG::Socket::PacketType::PacketProcessStatus
Packet	src/Socket/Packet.cpp	/^Packet::Packet()$/;"	f	class:Packet
Packet	src/Socket/Packet.cpp	/^Packet::Packet(Packet&& p_right)$/;"	f	class:Packet
Packet	src/Socket/Packet.cpp	/^Packet::Packet(const Packet& p_right)$/;"	f	class:Packet
PacketHandler	inc/Socket/Packet.h	/^typedef std::function<void(ConnectionID, Packet)> PacketHandler;$/;"	t	class:SPTAG::Socket::PacketType::PacketProcessStatus
PacketHandlerMap	inc/Socket/Packet.h	/^typedef std::unordered_map<PacketType, PacketHandler, PacketTypeHash> PacketHandlerMap;$/;"	t	class:SPTAG::Socket::PacketType::PacketProcessStatus
PacketHandlerMapPtr	inc/Socket/Packet.h	/^typedef std::shared_ptr<PacketHandlerMap> PacketHandlerMapPtr;$/;"	t	class:SPTAG::Socket::PacketType::PacketProcessStatus
PacketHeader	inc/Socket/Packet.h	/^struct PacketHeader$/;"	s	class:SPTAG::Socket::PacketType::PacketProcessStatus
PacketHeader	src/Socket/Packet.cpp	/^PacketHeader::PacketHeader()$/;"	f	class:PacketHeader
PacketHeader	src/Socket/Packet.cpp	/^PacketHeader::PacketHeader(PacketHeader&& p_right)$/;"	f	class:PacketHeader
PacketHeader	src/Socket/Packet.cpp	/^PacketHeader::PacketHeader(const PacketHeader& p_right)$/;"	f	class:PacketHeader
PacketProcessStatus	inc/Socket/Packet.h	/^enum class PacketProcessStatus : std::uint8_t$/;"	c	class:SPTAG::Socket::PacketType
PacketType	inc/Socket/Packet.h	/^enum class PacketType : std::uint8_t$/;"	c	namespace:SPTAG::Socket
PacketTypeHash	inc/Socket/Packet.h	/^struct PacketTypeHash$/;"	s	class:SPTAG::Socket::PacketType::PacketProcessStatus
PacketTypeHelper	inc/Socket/Packet.h	/^namespace PacketTypeHelper$/;"	n	class:SPTAG::Socket::PacketType::PacketProcessStatus
PageBuffer	inc/Core/SPANN/IExtraSearcher.h	/^            PageBuffer()$/;"	f	class:SPTAG::SPANN::PageBuffer
PageBuffer	inc/Core/SPANN/IExtraSearcher.h	/^        class PageBuffer$/;"	c	namespace:SPTAG::SPANN
PageSize	inc/Core/Common.h	/^const std::uint16_t PageSize = 4096;$/;"	m	namespace:SPTAG
PageSizeEx	inc/Core/Common.h	/^const int PageSizeEx = 12;$/;"	m	namespace:SPTAG
ParameterValueMap	inc/Helper/SimpleIniReader.h	/^    typedef std::map<std::string, std::string> ParameterValueMap;$/;"	t	class:SPTAG::Helper::IniReader
Parse	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::Parse(int p_argc, char** p_args)$/;"	f	class:ArgumentsParser
Parse	src/Server/QueryParser.cpp	/^QueryParser::Parse(const std::string& p_query, const char* p_vectorSeparator)$/;"	f	class:QueryParser
ParseDeltaEncoding	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            inline void ParseDeltaEncoding(std::shared_ptr<VectorIndex>& p_index, ListInfo* p_info, ValueType* vector)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ParseEncoding	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            inline void ParseEncoding(std::shared_ptr<VectorIndex>& p_index, ListInfo* p_info, ValueType* vector) { }$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ParsePostingList	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            inline void ParsePostingList(uint64_t& offsetVectorID, uint64_t& offsetVector, int i, int eleCount)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ParsePostingListRearrange	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            inline void ParsePostingListRearrange(uint64_t& offsetVectorID, uint64_t& offsetVector, int i, int eleCount)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
ParseQuery	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::ParseQuery(const std::string& p_query)$/;"	f	class:SearchExecutionContext
ParseValue	inc/Helper/ArgumentsParser.h	/^        virtual bool ParseValue(int& p_restArgc, char** (&p_args))$/;"	f	class:SPTAG::Helper::ArgumentsParser::ArgumentT
Partition	src/BalancedDataPartition/main.cpp	/^void Partition() {$/;"	f
PartitionByTptree	inc/Core/Common/NeighborhoodGraph.h	/^            void PartitionByTptree(VectorIndex* index, std::vector<SizeType>& indices, const SizeType first, const SizeType last,$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
PartitionByTptreeCore	inc/Core/Common/NeighborhoodGraph.h	/^            void PartitionByTptreeCore(VectorIndex* index, std::vector<SizeType>& indices, const SizeType first, const SizeType last,$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
PartitionOptions	src/BalancedDataPartition/main.cpp	/^    PartitionOptions():Helper::ReaderOptions(VectorValueType::Float, 0, VectorFileType::TXT, "|", 32)$/;"	f	class:PartitionOptions
PartitionOptions	src/BalancedDataPartition/main.cpp	/^class PartitionOptions : public Helper::ReaderOptions$/;"	c	file:
Passthrough	inc/Core/Common/Labelset.h	/^                Passthrough,$/;"	m	class:SPTAG::COMMON::Labelset::InvalidIDBehavior
PendingInfo	inc/Extension/CacheFifoMt.hh	/^                PendingInfo()$/;"	f	struct:SPTAG::EXT::CacheFifoSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheFifoMt.hh	/^                PendingInfo(size_t p_delayedNumToCache, std::vector<bool> p_delayedToCache, void* p_requests)$/;"	f	struct:SPTAG::EXT::CacheFifoSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheFifoMt.hh	/^            struct PendingInfo$/;"	s	class:SPTAG::EXT::CacheFifoSpannMt
PendingInfo	inc/Extension/CacheLfuMt.hh	/^                PendingInfo()$/;"	f	struct:SPTAG::EXT::CacheLfuSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheLfuMt.hh	/^                PendingInfo(size_t p_delayedNumToCache, std::vector<bool> p_delayedToCache, void* p_requests)$/;"	f	struct:SPTAG::EXT::CacheLfuSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheLfuMt.hh	/^            struct PendingInfo$/;"	s	class:SPTAG::EXT::CacheLfuSpannMt
PendingInfo	inc/Extension/CacheLruMt.hh	/^                PendingInfo()$/;"	f	struct:SPTAG::EXT::CacheLruSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheLruMt.hh	/^                PendingInfo(size_t p_delayedNumToCache, std::vector<bool> p_delayedToCache, void* p_requests)$/;"	f	struct:SPTAG::EXT::CacheLruSpannMt::PendingInfo
PendingInfo	inc/Extension/CacheLruMt.hh	/^            struct PendingInfo$/;"	s	class:SPTAG::EXT::CacheLruSpannMt
PerVectorDataSize	src/Core/VectorSet.cpp	/^SizeType BasicVectorSet::PerVectorDataSize() const $/;"	f	class:BasicVectorSet
Point	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class Point {$/;"	c
Point	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class Point<int8_t, SUMTYPE, Dim> {$/;"	c
Point	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class Point<uint8_t, SUMTYPE, Dim> {$/;"	c
PointSet	inc/Core/Common/cuda/Distance.hxx	/^class PointSet {$/;"	c
PoolSize	inc/Core/Common/FineGrainedLock.h	/^            static const int PoolSize = 32767;$/;"	m	class:SPTAG::COMMON::FineGrainedLock
PreAllocQueryContext	inc/Helper/AsyncFileReader.h	/^            void PreAllocQueryContext()$/;"	f	class:SPTAG::Helper::AsyncFileIO
PrintDescription	inc/Helper/ArgumentsParser.h	/^        virtual void PrintDescription()$/;"	f	class:SPTAG::Helper::ArgumentsParser::ArgumentT
PrintHelp	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::PrintHelp()$/;"	f	class:ArgumentsParser
PrintInstructionSet	src/Core/Common/InstructionUtils.cpp	/^        void InstructionSet::PrintInstructionSet(void) $/;"	f	class:SPTAG::COMMON::InstructionSet
PrintPercentiles	inc/SSDServing/SSDIndex.h	/^            void PrintPercentiles(const std::vector<V>& p_values, std::function<T(const V&)> p_get, const char* p_format)$/;"	f	namespace:SPTAG::SSDServing::SSDIndex
PrioritizedDiskFileReaderResource	inc/Helper/AsyncFileReader.h	/^                PrioritizedDiskFileReaderResource()$/;"	f	struct:SPTAG::Helper::DiskUtils::PrioritizedDiskFileReaderResource
PrioritizedDiskFileReaderResource	inc/Helper/AsyncFileReader.h	/^            struct PrioritizedDiskFileReaderResource$/;"	s	namespace:SPTAG::Helper::DiskUtils
Process	src/BalancedDataPartition/main.cpp	/^void Process(MPI_Datatype type) {$/;"	f
Process	src/IndexSearcher/main.cpp	/^int Process(std::shared_ptr<SearcherOptions> options, VectorIndex& index)$/;"	f
ProcessPosting	inc/Core/SPANN/ExtraFullGraphSearcher.h	147;"	d
ProcessPostingOffset	inc/Core/SPANN/ExtraFullGraphSearcher.h	158;"	d
ProcessWithoutMPI	src/BalancedDataPartition/main.cpp	/^void ProcessWithoutMPI() {$/;"	f
Ptr	inc/Socket/Connection.h	/^    typedef std::shared_ptr<Connection> Ptr;$/;"	t	class:SPTAG::Socket::Connection
QuantizeAndSave	src/Quantizer/main.cpp	/^void QuantizeAndSave(std::shared_ptr<SPTAG::Helper::VectorSetReader>& vectorReader, std::shared_ptr<QuantizerOptions>& options, std::shared_ptr<SPTAG::COMMON::IQuantizer>& quantizer)$/;"	f
QuantizeSize	inc/Core/Common/PQQuantizer.h	/^        SizeType PQQuantizer<T>::QuantizeSize() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
QuantizeVector	inc/Core/Common/OPQQuantizer.h	/^        void OPQQuantizer<T>::QuantizeVector(const void* vec, std::uint8_t* vecout, bool ADC) const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
QuantizeVector	inc/Core/Common/PQQuantizer.h	/^        void PQQuantizer<T>::QuantizeVector(const void* vec, std::uint8_t* vecout, bool ADC) const$/;"	f	class:SPTAG::COMMON::PQQuantizer
QuantizeVector	inc/Core/VectorIndex.h	/^    virtual ErrorCode QuantizeVector(const void* p_data, SizeType p_num, ByteArray p_out) {$/;"	f	class:SPTAG::VectorIndex
QuantizerOptions	inc/Quantizer/Training.h	/^    QuantizerOptions(SizeType trainingSamples, bool debug, float lambda, SPTAG::QuantizerType qtype, std::string qfile, DimensionType qdim, std::string fullvecs, std::string recvecs) : Helper::ReaderOptions(VectorValueType::Float, 0, VectorFileType::TXT, "|", 32), m_trainingSamples(trainingSamples), m_debug(debug), m_KmeansLambda(lambda), m_quantizerType(qtype), m_outputQuantizerFile(qfile), m_quantizedDim(qdim), m_outputFullVecFile(fullvecs), m_outputReconstructVecFile(recvecs)$/;"	f	class:QuantizerOptions
QuantizerOptions	inc/Quantizer/Training.h	/^class QuantizerOptions : public Helper::ReaderOptions$/;"	c
QuantizerType	inc/Core/Common.h	/^enum class QuantizerType : std::uint8_t$/;"	c	namespace:SPTAG
QueryGroup	inc/Core/Common/cuda/TailNeighbors.hxx	/^class QueryGroup {$/;"	c
QueryParser	inc/Server/QueryParser.h	/^class QueryParser$/;"	c	namespace:SPTAG::Service
QueryParser	src/Server/QueryParser.cpp	/^QueryParser::QueryParser()$/;"	f	class:QueryParser
QueryResult	inc/Core/ResultIterator.h	/^typedef SPTAG::QueryResult QueryResult;$/;"	t
QueryResult	inc/Core/SearchQuery.h	/^    QueryResult()$/;"	f	class:SPTAG::QueryResult
QueryResult	inc/Core/SearchQuery.h	/^    QueryResult(const QueryResult& p_other)$/;"	f	class:SPTAG::QueryResult
QueryResult	inc/Core/SearchQuery.h	/^    QueryResult(const void* p_target, int p_resultNum, bool p_withMeta)$/;"	f	class:SPTAG::QueryResult
QueryResult	inc/Core/SearchQuery.h	/^    QueryResult(const void* p_target, int p_resultNum, bool p_withMeta, BasicResult* p_results)$/;"	f	class:SPTAG::QueryResult
QueryResult	inc/Core/SearchQuery.h	/^    QueryResult(int p_resultNum)$/;"	f	class:SPTAG::QueryResult
QueryResult	inc/Core/SearchQuery.h	/^class QueryResult$/;"	c	namespace:SPTAG
QueryResultSet	inc/Core/Common/QueryResultSet.h	/^    QueryResultSet(const QueryResultSet& other) : QueryResult(other)$/;"	f	class:SPTAG::COMMON::QueryResultSet
QueryResultSet	inc/Core/Common/QueryResultSet.h	/^    QueryResultSet(const T* _target, int _K) : QueryResult(_target, _K, false)$/;"	f	class:SPTAG::COMMON::QueryResultSet
QueryResultSet	inc/Core/Common/QueryResultSet.h	/^class QueryResultSet : public QueryResult$/;"	c	namespace:SPTAG::COMMON
QueryType	inc/Socket/RemoteSearchQuery.h	/^    enum class QueryType : std::uint8_t$/;"	c	struct:SPTAG::Socket::RemoteQuery
R	inc/Core/Common/Dataset.h	/^            inline SizeType R() const { return rows + incRows; }$/;"	f	class:SPTAG::COMMON::Dataset
R	inc/Core/Common/Labelset.h	/^            inline SizeType R() const$/;"	f	class:SPTAG::COMMON::Labelset
R	inc/Core/Common/NeighborhoodGraph.h	/^            inline SizeType R() const { return m_iGraphSize; }$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
REFINE_BLOCKS	inc/Core/Common/cuda/Refine.hxx	20;"	d
REFINE_DEPTH	inc/Core/Common/cuda/params.h	43;"	d
REFINE_THREADS	inc/Core/Common/cuda/Refine.hxx	19;"	d
REORDER	inc/Core/Common/cuda/params.h	45;"	d
REPEAT	src/Core/Common/DistanceUtils.cpp	297;"	d	file:
RType	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum RType {Int8, UInt8, Float, Int16};$/;"	g
RUN_KERNEL	inc/Core/Common/cuda/KNN.hxx	253;"	d
RUN_KERNEL_QUANTIZED	inc/Core/Common/cuda/KNN.hxx	262;"	d
RUN_TAIL_KERNEL	inc/Core/Common/cuda/TailNeighbors.hxx	320;"	d
RUN_TAIL_KERNEL_PQ	inc/Core/Common/cuda/TailNeighbors.hxx	330;"	d
Read	src/Socket/RemoteSearchQuery.cpp	/^RemoteQuery::Read(const std::uint8_t* p_buffer)$/;"	f	class:RemoteQuery
Read	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::Read(const std::uint8_t* p_buffer)$/;"	f	class:RemoteSearchResult
ReadBinary	inc/Helper/AsyncFileReader.h	/^            virtual std::uint64_t ReadBinary(std::uint64_t readSize, char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::AsyncFileIO
ReadBinary	inc/Helper/DiskIO.h	/^            virtual std::uint64_t ReadBinary(std::uint64_t readSize, char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleBufferIO
ReadBinary	inc/Helper/DiskIO.h	/^            virtual std::uint64_t ReadBinary(std::uint64_t readSize, char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleFileIO
ReadBuffer	src/Socket/Packet.cpp	/^PacketHeader::ReadBuffer(const std::uint8_t* p_buffer)$/;"	f	class:PacketHeader
ReadFileAsync	inc/Helper/AsyncFileReader.h	/^            virtual bool ReadFileAsync(AsyncReadRequest& readRequest)$/;"	f	class:SPTAG::Helper::AsyncFileIO
ReadFileAsync	inc/Helper/DiskIO.h	/^            virtual bool ReadFileAsync(AsyncReadRequest& readRequest) { return false; }$/;"	f	class:SPTAG::Helper::DiskIO
ReadString	inc/Helper/AsyncFileReader.h	/^            virtual std::uint64_t ReadString(std::uint64_t& readSize, std::unique_ptr<char[]>& buffer, char delim = '\\n', std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::AsyncFileIO
ReadString	inc/Helper/DiskIO.h	/^            virtual std::uint64_t ReadString(std::uint64_t& readSize, std::unique_ptr<char[]>& buffer, char delim = '\\n', std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleBufferIO
ReadString	inc/Helper/DiskIO.h	/^            virtual std::uint64_t ReadString(std::uint64_t& readSize, std::unique_ptr<char[]>& buffer, char delim = '\\n', std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleFileIO
ReaderOptions	inc/Helper/VectorSetReader.h	/^class ReaderOptions : public ArgumentsParser$/;"	c	namespace:SPTAG::Helper
ReaderOptions	src/Helper/VectorSetReader.cpp	/^ReaderOptions::ReaderOptions(VectorValueType p_valueType, DimensionType p_dimension, VectorFileType p_fileType, std::string p_vectorDelimiter, std::uint32_t p_threadNum, bool p_normalized)$/;"	f	class:ReaderOptions
Rebuild	inc/Core/Common/BKTree.h	/^            void Rebuild(const Dataset<T>& data, DistCalcMethod distMethod, IAbortOperation* abort)$/;"	f	class:SPTAG::COMMON::BKTree
Rebuild	inc/Core/Common/KDTree.h	/^            void Rebuild(const Dataset<T>& data, IAbortOperation* abort)$/;"	f	class:SPTAG::COMMON::KDTree
RebuildGraph	inc/Core/Common/NeighborhoodGraph.h	/^            void RebuildGraph(VectorIndex* index, const std::unordered_map<SizeType, SizeType>* idmap = nullptr)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
RebuildJob	inc/Core/BKT/Index.h	/^                RebuildJob(COMMON::Dataset<T>* p_data, COMMON::BKTree* p_tree, COMMON::RelativeNeighborhoodGraph* p_graph, $/;"	f	class:SPTAG::BKT::Index::RebuildJob
RebuildJob	inc/Core/BKT/Index.h	/^            class RebuildJob : public Helper::ThreadPool::Job {$/;"	c	class:SPTAG::BKT::Index
RebuildJob	inc/Core/KDT/Index.h	/^                RebuildJob(COMMON::Dataset<T>* p_data, COMMON::KDTree* p_tree, COMMON::RelativeNeighborhoodGraph* p_graph) : m_data(p_data), m_tree(p_tree), m_graph(p_graph) {}$/;"	f	class:SPTAG::KDT::Index::RebuildJob
RebuildJob	inc/Core/KDT/Index.h	/^            class RebuildJob : public Helper::ThreadPool::Job {$/;"	c	class:SPTAG::KDT::Index
RebuildNeighbors	inc/Core/Common/KNearestNeighborhoodGraph.h	/^            void RebuildNeighbors(VectorIndex* index, const SizeType node, SizeType* nodes, const BasicResult* queryResults, const int numResults) {$/;"	f	class:SPTAG::COMMON::KNearestNeighborhoodGraph
RebuildNeighbors	inc/Core/Common/RelativeNeighborhoodGraph.h	/^            void RebuildNeighbors(VectorIndex* index, const SizeType node, SizeType* nodes, const BasicResult* queryResults, const int numResults) {$/;"	f	class:SPTAG::COMMON::RelativeNeighborhoodGraph
ReconstructDim	inc/Core/Common/PQQuantizer.h	/^        DimensionType PQQuantizer<T>::ReconstructDim() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
ReconstructSize	inc/Core/Common/OPQQuantizer.h	/^        SizeType OPQQuantizer<T>::ReconstructSize() const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
ReconstructSize	inc/Core/Common/PQQuantizer.h	/^        SizeType PQQuantizer<T>::ReconstructSize() const$/;"	f	class:SPTAG::COMMON::PQQuantizer
ReconstructVector	inc/Core/Common/OPQQuantizer.h	/^        void OPQQuantizer<T>::ReconstructVector(const std::uint8_t* qvec, void* vecout) const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
ReconstructVector	inc/Core/Common/PQQuantizer.h	/^        void PQQuantizer<T>::ReconstructVector(const std::uint8_t* qvec, void* vecout) const$/;"	f	class:SPTAG::COMMON::PQQuantizer
ReconstructVector	inc/Core/VectorIndex.h	/^    virtual ErrorCode ReconstructVector(const void* p_data, SizeType p_num, ByteArray p_out) {$/;"	f	class:SPTAG::VectorIndex
Refine	inc/Core/Common/Dataset.h	/^            ErrorCode Refine(const std::vector<SizeType>& indices, Dataset<T>& p_data) const$/;"	f	class:SPTAG::COMMON::Dataset
Refine	inc/Core/Common/Dataset.h	/^            ErrorCode Refine(const std::vector<SizeType>& indices, std::shared_ptr<Helper::DiskIO> output) const$/;"	f	class:SPTAG::COMMON::Dataset
Refine	inc/Core/Common/Dataset.h	/^            ErrorCode Refine(const std::vector<SizeType>& indices, std::string sDataPointsFileName) const$/;"	f	class:SPTAG::COMMON::Dataset
RefineCenters	inc/Core/Common/BKTree.h	/^        float RefineCenters(const Dataset<T>& data, KmeansArgs<T>& args)$/;"	f	namespace:SPTAG::COMMON
RefineGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode RefineGraph(VectorIndex* index, std::vector<SizeType>& indices, std::vector<SizeType>& reverseIndices,$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
RefineGraph	inc/Core/Common/NeighborhoodGraph.h	/^            void RefineGraph(VectorIndex* index, const std::unordered_map<SizeType, SizeType>* idmap = nullptr)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
RefineIndex	inc/Core/SPANN/Index.h	/^            ErrorCode RefineIndex(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams, IAbortOperation* p_abort) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
RefineIndex	inc/Core/SPANN/Index.h	/^            ErrorCode RefineIndex(std::shared_ptr<VectorIndex>& p_newIndex) { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
RefineIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::RefineIndex(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams, IAbortOperation* p_abort)$/;"	f	class:SPTAG::BKT::Index
RefineIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::RefineIndex(std::shared_ptr<VectorIndex>& p_newIndex)$/;"	f	class:SPTAG::BKT::Index
RefineIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::RefineIndex(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams, IAbortOperation* p_abort)$/;"	f	class:SPTAG::KDT::Index
RefineIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::RefineIndex(std::shared_ptr<VectorIndex>& p_newIndex)$/;"	f	class:SPTAG::KDT::Index
RefineLambda	inc/Core/Common/BKTree.h	/^        void RefineLambda(KmeansArgs<T>& args, float& lambda, int size)$/;"	f	namespace:SPTAG::COMMON
RefineMetadata	src/Core/MetadataSet.cpp	/^MetadataSet::RefineMetadata(std::vector<SizeType>& indices, const std::string& p_metaFile, const std::string& p_metaindexFile) const$/;"	f	class:MetadataSet
RefineMetadata	src/Core/MetadataSet.cpp	/^MetadataSet::RefineMetadata(std::vector<SizeType>& indices, std::shared_ptr<Helper::DiskIO> p_metaOut, std::shared_ptr<Helper::DiskIO> p_metaIndexOut) const$/;"	f	class:MetadataSet
RefineMetadata	src/Core/MetadataSet.cpp	/^MetadataSet::RefineMetadata(std::vector<SizeType>& indices, std::shared_ptr<MetadataSet>& p_newMetadata,$/;"	f	class:MetadataSet
RefineNode	inc/Core/Common/NeighborhoodGraph.h	/^            void RefineNode(VectorIndex* index, const SizeType node, bool updateNeighbors, bool searchDeleted, int CEF)$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
RefineSearchIndex	inc/Core/SPANN/Index.h	/^            ErrorCode RefineSearchIndex(QueryResult &p_query, bool p_searchDeleted = false) const { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
RefineSearchIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::RefineSearchIndex(QueryResult &p_query, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
RefineSearchIndex	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::RefineSearchIndex(QueryResult &p_query, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
RegisterRequest	inc/Socket/Packet.h	/^    RegisterRequest = 0x02,$/;"	m	class:SPTAG::Socket::PacketType
RegisterResponse	inc/Socket/Packet.h	/^    RegisterResponse = ResponseMask | RegisterRequest,$/;"	m	class:SPTAG::Socket::PacketType
RelativeNeighborhoodGraph	inc/Core/Common/RelativeNeighborhoodGraph.h	/^            RelativeNeighborhoodGraph() { m_pNeighborhoodGraph.SetName("RNG"); }$/;"	f	class:SPTAG::COMMON::RelativeNeighborhoodGraph
RelativeNeighborhoodGraph	inc/Core/Common/RelativeNeighborhoodGraph.h	/^        class RelativeNeighborhoodGraph: public NeighborhoodGraph$/;"	c	namespace:SPTAG::COMMON
RelaxedMono	inc/Core/SearchResult.h	/^        bool RelaxedMono;$/;"	m	struct:SPTAG::BasicResult
RemoteMachine	inc/Aggregator/AggregatorContext.h	/^struct RemoteMachine$/;"	s	namespace:SPTAG::Aggregator
RemoteMachine	src/Aggregator/AggregatorContext.cpp	/^RemoteMachine::RemoteMachine()$/;"	f	class:RemoteMachine
RemoteQuery	inc/Socket/RemoteSearchQuery.h	/^struct RemoteQuery$/;"	s	namespace:SPTAG::Socket
RemoteQuery	src/Socket/RemoteSearchQuery.cpp	/^RemoteQuery::RemoteQuery()$/;"	f	class:RemoteQuery
RemoteSearchResult	inc/Socket/RemoteSearchQuery.h	/^struct RemoteSearchResult$/;"	s	struct:SPTAG::Socket::RemoteQuery
RemoteSearchResult	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::RemoteSearchResult()$/;"	f	class:RemoteSearchResult
RemoteSearchResult	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::RemoteSearchResult(RemoteSearchResult&& p_right)$/;"	f	class:RemoteSearchResult
RemoteSearchResult	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::RemoteSearchResult(const RemoteSearchResult& p_right)$/;"	f	class:RemoteSearchResult
Remove	inc/Socket/ResourceManager.h	/^    void Remove(ResourceID p_resourceID)$/;"	f	class:SPTAG::Socket::ResourceManager
RemoveConnection	src/Socket/ConnectionManager.cpp	/^ConnectionManager::RemoveConnection(ConnectionID p_connectionID)$/;"	f	class:ConnectionManager
Rent	inc/Core/Common/WorkSpacePool.h	/^            std::shared_ptr<T> Rent()$/;"	f	class:SPTAG::COMMON::WorkSpacePool
RentWorkSpace	src/Core/BKT/BKTIndex.cpp	/^        std::unique_ptr<COMMON::WorkSpace> Index<T>::RentWorkSpace(int batch) const$/;"	f	class:SPTAG::BKT::Index
RentWorkSpace	src/Core/KDT/KDTIndex.cpp	/^        std::unique_ptr<COMMON::WorkSpace> Index<T>::RentWorkSpace(int batch) const$/;"	f	class:SPTAG::KDT::Index
RentWorkSpace	src/Core/SPANN/SPANNIndex.cpp	/^        std::unique_ptr<COMMON::WorkSpace> Index<T>::RentWorkSpace(int batch) const$/;"	f	class:SPTAG::SPANN::Index
ReplaceAll	src/Helper/CommonHelper.cpp	/^StrUtils::ReplaceAll(const std::string& orig, const std::string& from, const std::string& to)$/;"	f	class:StrUtils
RequestQueue	inc/Helper/AsyncFileReader.h	/^            RequestQueue() :m_front(0), m_end(0), m_capacity(0) {}$/;"	f	class:SPTAG::Helper::RequestQueue
RequestQueue	inc/Helper/AsyncFileReader.h	/^            RequestQueue() {$/;"	f	class:SPTAG::Helper::RequestQueue
RequestQueue	inc/Helper/AsyncFileReader.h	/^        class RequestQueue$/;"	c	namespace:SPTAG::Helper
ReservePageBuffer	inc/Core/SPANN/IExtraSearcher.h	/^            void ReservePageBuffer(std::size_t p_size)$/;"	f	class:SPTAG::SPANN::PageBuffer
Reset	inc/Core/Common/WorkSpace.h	/^            static void Reset() {}$/;"	f	struct:SPTAG::COMMON::WorkSpace
Reset	inc/Core/Common/WorkSpace.h	/^            void Reset(int maxCheck, int resultNum)$/;"	f	struct:SPTAG::COMMON::WorkSpace
Reset	inc/Core/SPANN/IExtraSearcher.h	/^            static void Reset() { g_spaceCount = 0; }$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
Reset	inc/Core/SearchQuery.h	/^    inline void Reset()$/;"	f	class:SPTAG::QueryResult
Reset	inc/Helper/AsyncFileReader.h	/^            void Reset(HANDLE p_handle) { m_handle.reset(p_handle); }$/;"	f	class:SPTAG::Helper::HandleWrapper
Reset	src/Helper/Concurrent.cpp	/^WaitSignal::Reset(std::uint32_t p_unfinished)$/;"	f	class:WaitSignal
ResetResult	inc/Core/Common/WorkSpace.h	/^            void ResetResult(int maxCheck, int resultNum)$/;"	f	struct:SPTAG::COMMON::WorkSpace
Resize	inc/Core/Common/Heap.h	/^            void Resize(int size)$/;"	f	class:SPTAG::COMMON::Heap
Resize	inc/Core/Common/WorkSpace.h	/^            void Resize(int size_) {$/;"	f	class:SPTAG::COMMON::DistPriorityQueue
ResourceID	inc/Socket/Common.h	/^typedef std::uint32_t ResourceID;$/;"	t	namespace:SPTAG::Socket
ResourceItem	inc/Socket/ResourceManager.h	/^        ResourceItem()$/;"	f	struct:SPTAG::Socket::ResourceManager::ResourceItem
ResourceItem	inc/Socket/ResourceManager.h	/^    struct ResourceItem$/;"	s	class:SPTAG::Socket::ResourceManager
ResourceManager	inc/Socket/ResourceManager.h	/^    ResourceManager()$/;"	f	class:SPTAG::Socket::ResourceManager
ResourceManager	inc/Socket/ResourceManager.h	/^class ResourceManager : public std::enable_shared_from_this<ResourceManager<ResourceType>>$/;"	c	namespace:SPTAG::Socket
ResourceType	inc/Helper/AsyncFileReader.h	/^            typedef DiskUtils::PrioritizedDiskFileReaderResource ResourceType;$/;"	t	class:SPTAG::Helper::AsyncFileIO
ResponseMask	inc/Socket/Packet.h	/^    ResponseMask = 0x80,$/;"	m	class:SPTAG::Socket::PacketType
ResultIterator	inc/Core/ResultIterator.h	/^class ResultIterator$/;"	c
ResultIterator	src/Core/ResultIterator.cpp	/^	ResultIterator::ResultIterator(const void* p_index, const void* p_target, bool p_searchDeleted, int p_workspaceBatch)$/;"	f	class:ResultIterator
ResultStatus	inc/Socket/RemoteSearchQuery.h	/^    enum class ResultStatus : std::uint8_t$/;"	c	struct:SPTAG::Socket::RemoteQuery::RemoteSearchResult
Return	inc/Core/Common/WorkSpacePool.h	/^            void Return(const std::shared_ptr<T>& p_workSpace)$/;"	f	class:SPTAG::COMMON::WorkSpacePool
ReturnResource	inc/Helper/AsyncFileReader.h	/^            void ReturnResource(ResourceType* p_res)$/;"	f	class:SPTAG::Helper::AsyncFileIO
Reverse	inc/Core/Common/QueryResultSet.h	/^    void Reverse()$/;"	f	class:SPTAG::COMMON::QueryResultSet
Run	src/Aggregator/AggregatorService.cpp	/^AggregatorService::Run()$/;"	f	class:AggregatorService
Run	src/Server/SearchService.cpp	/^SearchService::Run()$/;"	f	class:SearchService
RunInteractiveMode	src/Server/SearchService.cpp	/^SearchService::RunInteractiveMode()$/;"	f	class:SearchService
RunSocketMode	src/Server/SearchService.cpp	/^SearchService::RunSocketMode()$/;"	f	class:SearchService
SAMPLES	inc/Core/Common/cuda/params.h	38;"	d
SEC_BASE	inc/SSDServing/main.h	/^		const std::string SEC_BASE = "Base";$/;"	m	namespace:SPTAG::SSDServing
SEC_BUILD_HEAD	inc/SSDServing/main.h	/^		const std::string SEC_BUILD_HEAD = "BuildHead";$/;"	m	namespace:SPTAG::SSDServing
SEC_BUILD_SSD_INDEX	inc/SSDServing/main.h	/^		const std::string SEC_BUILD_SSD_INDEX = "BuildSSDIndex";$/;"	m	namespace:SPTAG::SSDServing
SEC_SEARCH_SSD_INDEX	inc/SSDServing/main.h	/^		const std::string SEC_SEARCH_SSD_INDEX = "SearchSSDIndex";$/;"	m	namespace:SPTAG::SSDServing
SEC_SELECT_HEAD	inc/SSDServing/main.h	/^		const std::string SEC_SELECT_HEAD = "SelectHead";$/;"	m	namespace:SPTAG::SSDServing
SIMDUtils	inc/Core/Common/SIMDUtils.h	/^        class SIMDUtils$/;"	c	namespace:SPTAG::COMMON
SPANN	inc/Core/SPANN/Compressor.h	/^    namespace SPANN$/;"	n	namespace:SPTAG
SPANN	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^    namespace SPANN$/;"	n	namespace:SPTAG
SPANN	inc/Core/SPANN/IExtraSearcher.h	/^    namespace SPANN {$/;"	n	namespace:SPTAG
SPANN	inc/Core/SPANN/Index.h	/^    namespace SPANN$/;"	n	namespace:SPTAG
SPANN	inc/Core/SPANN/Options.h	/^    namespace SPANN {$/;"	n	namespace:SPTAG
SPANN	inc/Core/SPANN/SPANNResultIterator.h	/^	namespace SPANN$/;"	n	namespace:SPTAG
SPANN	src/Core/SPANN/SPANNIndex.cpp	/^    namespace SPANN$/;"	n	namespace:SPTAG	file:
SPANNResultIterator	inc/Core/SPANN/SPANNResultIterator.h	/^			SPANNResultIterator(const Index<T>* p_spannIndex, const VectorIndex* p_index, const void* p_target,$/;"	f	class:SPTAG::SPANN::SPANNResultIterator
SPANNResultIterator	inc/Core/SPANN/SPANNResultIterator.h	/^		class SPANNResultIterator : public ResultIterator$/;"	c	namespace:SPTAG::SPANN
SPTAG	inc/Aggregator/AggregatorContext.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Aggregator/AggregatorExecutionContext.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Aggregator/AggregatorService.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Aggregator/AggregatorSettings.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Client/ClientWrapper.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Client/Options.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/BKT/Index.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/BKTree.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/CommonUtils.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/Dataset.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/DistanceUtils.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/FineGrainedLock.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/Heap.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/IQuantizer.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/InstructionUtils.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/Core/Common/KDTree.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/KNearestNeighborhoodGraph.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/Labelset.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/NeighborhoodGraph.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/OPQQuantizer.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/PQQuantizer.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/QueryResultSet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/RelativeNeighborhoodGraph.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/SIMDUtils.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/TruthSet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/WorkSpace.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/Common/WorkSpacePool.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/CommonDataStructure.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/KDT/Index.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/MetadataSet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/MultiIndexScan.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SPANN/Compressor.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SPANN/IExtraSearcher.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/Core/SPANN/Index.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SPANN/Options.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/Core/SPANN/SPANNResultIterator.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SearchQuery.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/SearchResult.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/VectorIndex.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Core/VectorSet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Extension/CacheFifoMt.hh	/^namespace SPTAG {$/;"	n
SPTAG	inc/Extension/CacheLfuMt.hh	/^namespace SPTAG {$/;"	n
SPTAG	inc/Extension/CacheLruMt.hh	/^namespace SPTAG {$/;"	n
SPTAG	inc/Extension/CacheLruWeak.hh	/^namespace SPTAG {$/;"	n
SPTAG	inc/Extension/Locks.hh	/^namespace SPTAG {$/;"	n
SPTAG	inc/Helper/ArgumentsParser.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/AsyncFileReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/Base64Encode.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/CommonHelper.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/Concurrent.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/ConcurrentSet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/DiskIO.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/DynamicNeighbors.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/Helper/LockFree.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/Logging.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/SimpleIniReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/StringConvert.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/ThreadPool.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/VectorSetReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/VectorSetReaders/DefaultReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/VectorSetReaders/MemoryReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/VectorSetReaders/TxtReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Helper/VectorSetReaders/XvecReader.h	/^namespace SPTAG$/;"	n
SPTAG	inc/SSDServing/SSDIndex.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/SSDServing/SelectHead.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/SSDServing/Utils.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/SSDServing/main.h	/^namespace SPTAG {$/;"	n
SPTAG	inc/Server/QueryParser.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Server/SearchExecutionContext.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Server/SearchExecutor.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Server/SearchService.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Server/ServiceContext.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Server/ServiceSettings.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/Client.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/Common.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/Connection.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/ConnectionManager.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/Packet.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/RemoteSearchQuery.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/ResourceManager.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/Server.h	/^namespace SPTAG$/;"	n
SPTAG	inc/Socket/SimpleSerialization.h	/^namespace SPTAG$/;"	n
SPTAG	src/Core/BKT/BKTIndex.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/Common/IQuantizer.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/Common/InstructionUtils.cpp	/^namespace SPTAG {$/;"	n	file:
SPTAG	src/Core/Common/TruthSet.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/KDT/KDTIndex.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/MultiIndexScan.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/SPANN/SPANNIndex.cpp	/^namespace SPTAG$/;"	n	file:
SPTAG	src/Core/VectorIndex.cpp	/^namespace SPTAG {$/;"	n	file:
SPTAG	src/Helper/AsyncFileReader.cpp	/^namespace SPTAG {$/;"	n	file:
SPTAG	src/SSDServing/main.cpp	/^namespace SPTAG {$/;"	n	file:
SPTAGLIB_LOG	inc/Core/Common.h	138;"	d
SSDIndex	inc/SSDServing/SSDIndex.h	/^		namespace SSDIndex {$/;"	n	namespace:SPTAG::SSDServing
SSDServing	inc/SSDServing/SSDIndex.h	/^	namespace SSDServing {$/;"	n	namespace:SPTAG
SSDServing	inc/SSDServing/SelectHead.h	/^	namespace SSDServing {$/;"	n	namespace:SPTAG
SSDServing	inc/SSDServing/Utils.h	/^    namespace SSDServing {$/;"	n	namespace:SPTAG
SSDServing	inc/SSDServing/main.h	/^	namespace SSDServing {$/;"	n	namespace:SPTAG
SSDServing	src/SSDServing/main.cpp	/^	namespace SSDServing {$/;"	n	namespace:SPTAG	file:
SSE	src/Core/Common/InstructionUtils.cpp	/^        bool InstructionSet::SSE(void) { return CPU_Rep.HW_SSE; }$/;"	f	class:SPTAG::COMMON::InstructionSet
SSE2	src/Core/Common/InstructionUtils.cpp	/^        bool InstructionSet::SSE2(void) { return CPU_Rep.HW_SSE2; }$/;"	f	class:SPTAG::COMMON::InstructionSet
STR	inc/Core/Common/cuda/log.hxx	88;"	d
STR_EXPAND	inc/Core/Common/cuda/log.hxx	87;"	d
Save	inc/Core/Common/Dataset.h	/^            ErrorCode Save(std::shared_ptr<Helper::DiskIO> p_out) const$/;"	f	class:SPTAG::COMMON::Dataset
Save	inc/Core/Common/Dataset.h	/^            ErrorCode Save(std::string sDataPointsFileName) const$/;"	f	class:SPTAG::COMMON::Dataset
Save	inc/Core/Common/Labelset.h	/^            inline ErrorCode Save(std::shared_ptr<Helper::DiskIO> output)$/;"	f	class:SPTAG::COMMON::Labelset
Save	inc/Core/Common/Labelset.h	/^            inline ErrorCode Save(std::string filename)$/;"	f	class:SPTAG::COMMON::Labelset
Save	src/Core/VectorSet.cpp	/^BasicVectorSet::Save(const std::string& p_vectorFile) const$/;"	f	class:BasicVectorSet
SaveBatch	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            ErrorCode SaveBatch()$/;"	f	struct:SPTAG::SPANN::Selection
SaveCenters	src/BalancedDataPartition/main.cpp	/^void SaveCenters(T* centers, SizeType row, DimensionType col, const std::string& centerpath, float lambda = 0.0, float diff = 0.0, float mindist = 0.0, int noimprovement = 0) {$/;"	f
SaveConfig	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SaveConfig(std::shared_ptr<Helper::DiskIO> p_configOut)$/;"	f	class:SPTAG::BKT::Index
SaveConfig	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SaveConfig(std::shared_ptr<Helper::DiskIO> p_configOut)$/;"	f	class:SPTAG::KDT::Index
SaveConfig	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SaveConfig(std::shared_ptr<Helper::DiskIO> p_configOut)$/;"	f	class:SPTAG::SPANN::Index
SaveGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode SaveGraph(std::shared_ptr<Helper::DiskIO> output) const$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
SaveGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ErrorCode SaveGraph(std::string sGraphFilename) const$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
SaveIndex	src/Core/VectorIndex.cpp	/^VectorIndex::SaveIndex(const std::string& p_folderPath)$/;"	f	class:VectorIndex
SaveIndex	src/Core/VectorIndex.cpp	/^VectorIndex::SaveIndex(std::string& p_config, const std::vector<ByteArray>& p_indexBlobs)$/;"	f	class:VectorIndex
SaveIndexConfig	src/Core/VectorIndex.cpp	/^VectorIndex::SaveIndexConfig(std::shared_ptr<Helper::DiskIO> p_configOut)$/;"	f	class:VectorIndex
SaveIndexData	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SaveIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::BKT::Index
SaveIndexData	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SaveIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::KDT::Index
SaveIndexData	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SaveIndexData(const std::vector<std::shared_ptr<Helper::DiskIO>>& p_indexStreams)$/;"	f	class:SPTAG::SPANN::Index
SaveIndexToFile	src/Core/VectorIndex.cpp	/^VectorIndex::SaveIndexToFile(const std::string& p_file, IAbortOperation* p_abort)$/;"	f	class:VectorIndex
SaveMetadata	src/Core/MetadataSet.cpp	/^FileMetadataSet::SaveMetadata(const std::string& p_metaFile, const std::string& p_metaindexFile)$/;"	f	class:FileMetadataSet
SaveMetadata	src/Core/MetadataSet.cpp	/^FileMetadataSet::SaveMetadata(std::shared_ptr<Helper::DiskIO> p_metaOut, std::shared_ptr<Helper::DiskIO> p_metaIndexOut)$/;"	f	class:FileMetadataSet
SaveMetadata	src/Core/MetadataSet.cpp	/^MemMetadataSet::SaveMetadata(const std::string& p_metaFile, const std::string& p_metaindexFile)$/;"	f	class:MemMetadataSet
SaveMetadata	src/Core/MetadataSet.cpp	/^MemMetadataSet::SaveMetadata(std::shared_ptr<Helper::DiskIO> p_metaOut, std::shared_ptr<Helper::DiskIO> p_metaIndexOut)$/;"	f	class:MemMetadataSet
SaveQuantizer	inc/Core/Common/OPQQuantizer.h	/^        ErrorCode OPQQuantizer<T>::SaveQuantizer(std::shared_ptr<Helper::DiskIO> p_out) const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
SaveQuantizer	inc/Core/Common/PQQuantizer.h	/^        ErrorCode PQQuantizer<T>::SaveQuantizer(std::shared_ptr<Helper::DiskIO> p_out) const$/;"	f	class:SPTAG::COMMON::PQQuantizer
SaveTrees	inc/Core/Common/BKTree.h	/^            ErrorCode SaveTrees(std::shared_ptr<Helper::DiskIO> p_out) const$/;"	f	class:SPTAG::COMMON::BKTree
SaveTrees	inc/Core/Common/BKTree.h	/^            ErrorCode SaveTrees(std::string sTreeFileName) const$/;"	f	class:SPTAG::COMMON::BKTree
SaveTrees	inc/Core/Common/KDTree.h	/^            ErrorCode SaveTrees(std::shared_ptr<Helper::DiskIO> p_out) const$/;"	f	class:SPTAG::COMMON::KDTree
SaveTrees	inc/Core/Common/KDTree.h	/^            ErrorCode SaveTrees(std::string sTreeFileName) const$/;"	f	class:SPTAG::COMMON::KDTree
Search	inc/SSDServing/SSDIndex.h	/^            void Search(SPANN::Index<ValueType>* p_index)$/;"	f	namespace:SPTAG::SSDServing::SSDIndex
Search	src/Core/BKT/BKTIndex.cpp	/^        void Index<T>::Search(COMMON::QueryResultSet<T>& p_query, COMMON::WorkSpace& p_space, std::function<bool(const ByteArray&)> filterFunc) const$/;"	f	class:SPTAG::BKT::Index
Search	src/Core/KDT/KDTIndex.cpp	/^        void Index<T>::Search(COMMON::QueryResultSet<T>& p_query, COMMON::WorkSpace& p_space) const$/;"	f	class:SPTAG::KDT::Index
SearchDiskIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchDiskIndex(QueryResult& p_query, SearchStats* p_stats, int p_tid) const$/;"	f	class:SPTAG::SPANN::Index
SearchDiskIndexIterative	src/Core/SPANN/SPANNIndex.cpp	/^        bool Index<T>::SearchDiskIndexIterative(QueryResult& p_headQuery, QueryResult& p_query,$/;"	f	class:SPTAG::SPANN::Index
SearchExecutionContext	inc/Server/SearchExecutionContext.h	/^class SearchExecutionContext$/;"	c	namespace:SPTAG::Service
SearchExecutionContext	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::SearchExecutionContext(const std::shared_ptr<const ServiceSettings>& p_serviceSettings)$/;"	f	class:SearchExecutionContext
SearchExecutor	inc/Server/SearchExecutor.h	/^class SearchExecutor$/;"	c	namespace:SPTAG::Service
SearchExecutor	src/Server/SearchExecutor.cpp	/^SearchExecutor::SearchExecutor(std::string p_queryString,$/;"	f	class:SearchExecutor
SearchHanlder	src/Server/SearchService.cpp	/^SearchService::SearchHanlder(Socket::ConnectionID p_localConnectionID, Socket::Packet p_packet)$/;"	f	class:SearchService
SearchHanlderCallback	src/Server/SearchService.cpp	/^SearchService::SearchHanlderCallback(std::shared_ptr<SearchExecutionContext> p_exeContext,$/;"	f	class:SearchService
SearchIndex	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual void SearchIndex(ExtraWorkSpace* p_exWorkSpace,$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
SearchIndex	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SearchIndex(QueryResult &p_query, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
SearchIndex	src/Core/BKT/BKTIndex.cpp	/^        void Index<T>::SearchIndex(COMMON::QueryResultSet<T> &p_query, COMMON::WorkSpace &p_space, bool p_searchDeleted, bool p_searchDuplicated, std::function<bool(const ByteArray&)> filterFunc) const$/;"	f	class:SPTAG::BKT::Index
SearchIndex	src/Core/KDT/KDTIndex.cpp	/^            Index<T>::SearchIndex(QueryResult &p_query, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
SearchIndex	src/Core/KDT/KDTIndex.cpp	/^        void Index<T>::SearchIndex(COMMON::QueryResultSet<T> &p_query, COMMON::WorkSpace &p_space, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
SearchIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndex(QueryResult &p_query, bool p_searchDeleted) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndex	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndex(QueryResult &p_query, bool p_searchDeleted, int p_tid) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndex	src/Core/VectorIndex.cpp	/^VectorIndex::SearchIndex(const void* p_vector, int p_vectorCount, int p_neighborCount, bool p_withMeta, BasicResult* p_results) const {$/;"	f	class:VectorIndex
SearchIndexIterative	src/Core/BKT/BKTIndex.cpp	/^        int Index<T>::SearchIndexIterative(COMMON::QueryResultSet<T>& p_query, COMMON::WorkSpace& p_space, bool p_isFirst, $/;"	f	class:SPTAG::BKT::Index
SearchIndexIterative	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterative(QueryResult& p_headQuery, QueryResult& p_query,$/;"	f	class:SPTAG::SPANN::Index
SearchIndexIterativeEnd	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeEnd(std::unique_ptr<COMMON::WorkSpace> space) const$/;"	f	class:SPTAG::BKT::Index
SearchIndexIterativeEnd	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeEnd(std::unique_ptr<COMMON::WorkSpace> space) const$/;"	f	class:SPTAG::KDT::Index
SearchIndexIterativeEnd	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeEnd(std::unique_ptr<COMMON::WorkSpace> space) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndexIterativeEnd	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeEnd(std::unique_ptr<SPANN::ExtraWorkSpace> extraWorkspace) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndexIterativeFromNeareast	src/Core/BKT/BKTIndex.cpp	/^        bool Index<T>::SearchIndexIterativeFromNeareast(QueryResult& p_query, COMMON::WorkSpace* p_space, bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
SearchIndexIterativeFromNeareast	src/Core/KDT/KDTIndex.cpp	/^        bool Index<T>::SearchIndexIterativeFromNeareast(QueryResult& p_query, COMMON::WorkSpace* p_space, bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
SearchIndexIterativeFromNeareast	src/Core/SPANN/SPANNIndex.cpp	/^        bool Index<T>::SearchIndexIterativeFromNeareast(QueryResult& p_query, COMMON::WorkSpace* p_space, bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndexIterativeNext	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeNext(QueryResult& p_query, COMMON::WorkSpace* workSpace, int p_batch, int& resultCount,  bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
SearchIndexIterativeNext	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeNext(QueryResult& p_query, COMMON::WorkSpace* workSpace, int p_batch, int& resultCount, bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
SearchIndexIterativeNext	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndexIterativeNext(QueryResult& p_query, COMMON::WorkSpace* workSpace, int p_batch, int& resultCount, bool p_isFirst, bool p_searchDeleted) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndexThreadAware	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual void SearchIndexThreadAware(ExtraWorkSpace* p_exWorkSpace,$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
SearchIndexWithFilter	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexWithFilter(QueryResult& p_query, std::function<bool(const ByteArray&)> filterFunc, int maxCheck, bool p_searchDeleted) const$/;"	f	class:SPTAG::BKT::Index
SearchIndexWithFilter	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SearchIndexWithFilter(QueryResult& p_query, std::function<bool(const ByteArray&)> filterFunc, int maxCheck, bool p_searchDeleted) const$/;"	f	class:SPTAG::KDT::Index
SearchIndexWithFilter	src/Core/SPANN/SPANNIndex.cpp	/^        ErrorCode Index<T>::SearchIndexWithFilter(QueryResult& p_query, std::function<bool(const ByteArray&)> filterFunc, int maxCheck, bool p_searchDeleted) const$/;"	f	class:SPTAG::SPANN::Index
SearchIndexWithoutParsing	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual void SearchIndexWithoutParsing(ExtraWorkSpace* p_exWorkSpace)$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
SearchIterative	src/Core/BKT/BKTIndex.cpp	/^            int Index<T>::SearchIterative(COMMON::QueryResultSet<T>& p_query, $/;"	f	class:SPTAG::BKT::Index
SearchIterativeNext	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual bool SearchIterativeNext(ExtraWorkSpace* p_exWorkSpace,$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
SearchNextInPosting	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual bool SearchNextInPosting(ExtraWorkSpace* p_exWorkSpace,$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
SearchRequest	inc/Socket/Packet.h	/^    SearchRequest = 0x03,$/;"	m	class:SPTAG::Socket::PacketType
SearchRequestHanlder	src/Aggregator/AggregatorService.cpp	/^AggregatorService::SearchRequestHanlder(Socket::ConnectionID p_localConnectionID, Socket::Packet p_packet)$/;"	f	class:AggregatorService
SearchResponse	inc/Socket/Packet.h	/^    SearchResponse = ResponseMask | SearchRequest$/;"	m	class:SPTAG::Socket::PacketType
SearchResponseHanlder	src/Aggregator/AggregatorService.cpp	/^AggregatorService::SearchResponseHanlder(Socket::ConnectionID p_localConnectionID, Socket::Packet p_packet)$/;"	f	class:AggregatorService
SearchResponseHanlder	src/Client/ClientWrapper.cpp	/^ClientWrapper::SearchResponseHanlder(Socket::ConnectionID p_localConnectionID, Socket::Packet p_packet)$/;"	f	class:ClientWrapper
SearchResult	inc/Server/SearchExecutionContext.h	/^typedef Socket::IndexSearchResult SearchResult;$/;"	t	namespace:SPTAG::Service
SearchSequential	inc/SSDServing/SSDIndex.h	/^            void SearchSequential(SPANN::Index<ValueType>* p_index,$/;"	f	namespace:SPTAG::SSDServing::SSDIndex
SearchService	inc/Server/SearchService.h	/^class SearchService$/;"	c	namespace:SPTAG::Service
SearchService	src/Server/SearchService.cpp	/^SearchService::SearchService()$/;"	f	class:SearchService
SearchStats	inc/Core/SPANN/IExtraSearcher.h	/^            SearchStats()$/;"	f	struct:SPTAG::SPANN::SearchStats
SearchStats	inc/Core/SPANN/IExtraSearcher.h	/^        struct SearchStats$/;"	s	namespace:SPTAG::SPANN
SearchTree	inc/Core/SPANN/Index.h	/^            ErrorCode SearchTree(QueryResult& p_query) const { return ErrorCode::Undefined; }$/;"	f	class:SPTAG::SPANN::Index
SearchTree	src/Core/BKT/BKTIndex.cpp	/^        ErrorCode Index<T>::SearchTree(QueryResult& p_query) const$/;"	f	class:SPTAG::BKT::Index
SearchTree	src/Core/KDT/KDTIndex.cpp	/^        ErrorCode Index<T>::SearchTree(QueryResult& p_query) const$/;"	f	class:SPTAG::KDT::Index
SearchTrees	inc/Core/Common/BKTree.h	/^            void SearchTrees(const Dataset<T>& data, std::function<float(const T*, const T*, DimensionType)> fComputeDistance, COMMON::QueryResultSet<T> &p_query,$/;"	f	class:SPTAG::COMMON::BKTree
SearchTrees	inc/Core/Common/KDTree.h	/^            void SearchTrees(const Dataset<T>& p_data, std::function<float(const T*, const T*, DimensionType)> fComputeDistance, COMMON::QueryResultSet<T> &p_query, COMMON::WorkSpace &p_space, const int p_limits) const$/;"	f	class:SPTAG::COMMON::KDTree
SearcherOptions	src/IndexSearcher/main.cpp	/^    SearcherOptions() : Helper::ReaderOptions(VectorValueType::Float, 0, VectorFileType::TXT, "|", 32)$/;"	f	class:SearcherOptions
SearcherOptions	src/IndexSearcher/main.cpp	/^class SearcherOptions : public Helper::ReaderOptions$/;"	c	file:
SelectDivisionDimension	inc/Core/Common/KDTree.h	/^            DimensionType SelectDivisionDimension(const std::vector<float>& varianceValues) const$/;"	f	class:SPTAG::COMMON::KDTree
SelectHead	inc/SSDServing/SelectHead.h	/^		namespace SelectHead {$/;"	n	namespace:SPTAG::SSDServing
SelectHead	inc/SSDServing/SelectHead.h	/^            ErrorCode SelectHead(std::shared_ptr<VectorSet> vectorSet, std::shared_ptr<COMMON::BKTree> bkt, SPANN::Options& opts, std::unordered_map<int, int>& counter, std::vector<int>& selected) {$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SelectHeadAdjustOptions	src/Core/SPANN/SPANNIndex.cpp	/^        void Index<T>::SelectHeadAdjustOptions(int p_vectorCount) {$/;"	f	class:SPTAG::SPANN::Index
SelectHeadDynamically	inc/SSDServing/SelectHead.h	/^            void SelectHeadDynamically(const std::shared_ptr<COMMON::BKTree> p_tree,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SelectHeadDynamically	src/Core/SPANN/SPANNIndex.cpp	/^        void Index<T>::SelectHeadDynamically(const std::shared_ptr<COMMON::BKTree> p_tree, int p_vectorCount, std::vector<int>& p_selected) {$/;"	f	class:SPTAG::SPANN::Index
SelectHeadDynamicallyInternal	inc/SSDServing/SelectHead.h	/^            int SelectHeadDynamicallyInternal(const std::shared_ptr<COMMON::BKTree> p_tree,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SelectHeadDynamicallyInternal	src/Core/SPANN/SPANNIndex.cpp	/^        int Index<T>::SelectHeadDynamicallyInternal(const std::shared_ptr<COMMON::BKTree> p_tree, int p_nodeID, $/;"	f	class:SPTAG::SPANN::Index
SelectHeadDynamically_Old	inc/SSDServing/SelectHead.h	/^            void SelectHeadDynamically_Old(const std::shared_ptr<COMMON::BKTree> p_tree,$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SelectHeadInternal	src/Core/SPANN/SPANNIndex.cpp	/^        bool Index<T>::SelectHeadInternal(std::shared_ptr<Helper::VectorSetReader>& p_reader) {$/;"	f	class:SPTAG::SPANN::Index
SelectHeadStatically	inc/SSDServing/SelectHead.h	/^            void SelectHeadStatically(const std::shared_ptr<COMMON::BKTree> p_tree, const int p_vectorCount, const SPANN::Options& p_opts, std::vector<int>& p_selected)$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SelectIndex	src/Server/SearchExecutor.cpp	/^SearchExecutor::SelectIndex()$/;"	f	class:SearchExecutor
SelectPostingOffset	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            void SelectPostingOffset($/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
Selection	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            Selection(size_t totalsize, std::string tmpdir) : m_tmpfile(tmpdir + FolderSep + "selection_tmp"), m_totalsize(totalsize), m_start(0), m_end(totalsize) { remove(m_tmpfile.c_str()); m_selections.resize(totalsize); }$/;"	f	struct:SPTAG::SPANN::Selection
Selection	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^        struct Selection {$/;"	s	namespace:SPTAG::SPANN
SendHeartbeat	src/Socket/Connection.cpp	/^Connection::SendHeartbeat(std::size_t p_intervalSeconds)$/;"	f	class:Connection
SendPacket	src/Socket/Client.cpp	/^Client::SendPacket(ConnectionID p_connection, Packet p_packet, std::function<void(bool)> p_callback)$/;"	f	class:Client
SendPacket	src/Socket/Server.cpp	/^Server::SendPacket(ConnectionID p_connection, Packet p_packet, std::function<void(bool)> p_callback)$/;"	f	class:Server
SendQueryAsync	src/Client/ClientWrapper.cpp	/^ClientWrapper::SendQueryAsync(const Socket::RemoteQuery& p_query,$/;"	f	class:ClientWrapper
SendRegister	src/Socket/Connection.cpp	/^Connection::SendRegister()$/;"	f	class:Connection
SerivceCmdOptions	src/Server/SearchService.cpp	/^    SerivceCmdOptions()$/;"	f	class:__anon3::Local::SerivceCmdOptions
SerivceCmdOptions	src/Server/SearchService.cpp	/^class SerivceCmdOptions : public Helper::ArgumentsParser$/;"	c	namespace:__anon3::Local	file:
ServeMode	inc/Server/SearchService.h	/^    enum class ServeMode : std::uint8_t$/;"	c	class:SPTAG::Service::SearchService
Server	inc/Socket/Server.h	/^class Server$/;"	c	namespace:SPTAG::Socket
Server	src/Socket/Server.cpp	/^Server::Server(const std::string& p_address,$/;"	f	class:Server
Service	inc/Server/QueryParser.h	/^namespace Service$/;"	n	namespace:SPTAG
Service	inc/Server/SearchExecutionContext.h	/^namespace Service$/;"	n	namespace:SPTAG
Service	inc/Server/SearchExecutor.h	/^namespace Service$/;"	n	namespace:SPTAG
Service	inc/Server/SearchService.h	/^namespace Service$/;"	n	namespace:SPTAG
Service	inc/Server/ServiceContext.h	/^namespace Service$/;"	n	namespace:SPTAG
Service	inc/Server/ServiceSettings.h	/^namespace Service$/;"	n	namespace:SPTAG
ServiceContext	inc/Server/ServiceContext.h	/^class ServiceContext$/;"	c	namespace:SPTAG::Service
ServiceContext	src/Server/ServiceContext.cpp	/^ServiceContext::ServiceContext(const std::string& p_configFilePath)$/;"	f	class:ServiceContext
ServiceSettings	inc/Server/ServiceSettings.h	/^struct ServiceSettings$/;"	s	namespace:SPTAG::Service
ServiceSettings	src/Server/ServiceSettings.cpp	/^ServiceSettings::ServiceSettings()$/;"	f	class:ServiceSettings
Set	inc/Core/CommonDataStructure.h	/^Array<T>::Set(T* p_array, std::size_t p_length, bool p_transferOwnership)$/;"	f	class:SPTAG::Array
SetAbort	inc/Helper/ThreadPool.h	/^                void SetAbort(bool p_status) { m_stopped = p_status; }$/;"	f	class:SPTAG::Helper::ThreadPool::Abort
SetDictBuffer	inc/Core/SPANN/Compressor.h	/^            void SetDictBuffer(const std::string &buffer)$/;"	f	class:SPTAG::SPANN::Compressor
SetEnableADC	inc/Core/Common/PQQuantizer.h	/^        void PQQuantizer<T>::SetEnableADC(bool enableADC)$/;"	f	class:SPTAG::COMMON::PQQuantizer
SetEventOnConnectionClose	src/Socket/Client.cpp	/^Client::SetEventOnConnectionClose(std::function<void(ConnectionID)> p_event)$/;"	f	class:Client
SetEventOnConnectionClose	src/Socket/Server.cpp	/^Server::SetEventOnConnectionClose(std::function<void(ConnectionID)> p_event)$/;"	f	class:Server
SetEventOnRemoving	src/Socket/ConnectionManager.cpp	/^ConnectionManager::SetEventOnRemoving(std::function<void(ConnectionID)> p_event)$/;"	f	class:ConnectionManager
SetIndexName	inc/Core/VectorIndex.h	/^    virtual void SetIndexName(std::string p_name) { m_sIndexName = p_name; }$/;"	f	class:SPTAG::VectorIndex
SetLogger	inc/Helper/Logging.h	/^            void SetLogger(std::shared_ptr<Logger> p_logger)$/;"	f	class:SPTAG::Helper::LoggerHolder
SetLogger	src/Core/VectorIndex.cpp	/^void SPTAG::SetLogger(std::shared_ptr<Helper::Logger> p_logger) {$/;"	f	class:SPTAG
SetMetadata	inc/Core/SearchQuery.h	/^    inline void SetMetadata(int p_index, ByteArray p_metadata)$/;"	f	class:SPTAG::QueryResult
SetMetadata	src/Core/VectorIndex.cpp	/^VectorIndex::SetMetadata(MetadataSet* p_new) {$/;"	f	class:VectorIndex
SetName	inc/Core/Common/Dataset.h	/^            void SetName(const std::string& name_) { name = name_; }$/;"	f	class:SPTAG::COMMON::Dataset
SetParameter	inc/Core/SPANN/Options.h	/^            ErrorCode SetParameter(const char* p_section, const char* p_param, const char* p_value)$/;"	f	class:SPTAG::SPANN::Options
SetParameter	src/Core/BKT/BKTIndex.cpp	/^            Index<T>::SetParameter(const char* p_param, const char* p_value, const char* p_section)$/;"	f	class:SPTAG::BKT::Index
SetParameter	src/Core/KDT/KDTIndex.cpp	/^            Index<T>::SetParameter(const char* p_param, const char* p_value, const char* p_section)$/;"	f	class:SPTAG::KDT::Index
SetParameter	src/Core/SPANN/SPANNIndex.cpp	/^            Index<T>::SetParameter(const char* p_param, const char* p_value, const char* p_section)$/;"	f	class:SPTAG::SPANN::Index
SetParameter	src/Core/VectorIndex.cpp	/^VectorIndex::SetParameter(const std::string& p_param, const std::string& p_value, const std::string& p_section)$/;"	f	class:VectorIndex
SetParameter	src/Helper/SimpleIniReader.cpp	/^IniReader::SetParameter(const std::string& p_section, const std::string& p_param, const std::string& p_val)$/;"	f	class:IniReader
SetQuantizer	src/Core/BKT/BKTIndex.cpp	/^        void Index<T>::SetQuantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer)$/;"	f	class:SPTAG::BKT::Index
SetQuantizer	src/Core/BKT/BKTIndex.cpp	/^        void Index<std::uint8_t>::SetQuantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer)$/;"	f	class:SPTAG::BKT::Index
SetQuantizer	src/Core/KDT/KDTIndex.cpp	/^        void Index<T>::SetQuantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer)$/;"	f	class:SPTAG::KDT::Index
SetQuantizer	src/Core/KDT/KDTIndex.cpp	/^        void Index<std::uint8_t>::SetQuantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer)$/;"	f	class:SPTAG::KDT::Index
SetQuantizer	src/Core/SPANN/SPANNIndex.cpp	/^        void Index<T>::SetQuantizer(std::shared_ptr<SPTAG::COMMON::IQuantizer> quantizer)$/;"	f	class:SPTAG::SPANN::Index
SetQuantizerADC	inc/Core/VectorIndex.h	/^    virtual void SetQuantizerADC(bool enableADC) {$/;"	f	class:SPTAG::VectorIndex
SetQuantizerFileName	inc/Core/VectorIndex.h	/^    virtual void SetQuantizerFileName(std::string p_QuantizerFileName) { m_sQuantizerFile = p_QuantizerFileName; }$/;"	f	class:SPTAG::VectorIndex
SetR	inc/Core/Common/Dataset.h	/^            void SetR(SizeType R_)$/;"	f	class:SPTAG::COMMON::Dataset
SetR	inc/Core/Common/Labelset.h	/^            inline void SetR(SizeType num)$/;"	f	class:SPTAG::COMMON::Labelset
SetR	inc/Core/Common/NeighborhoodGraph.h	/^            inline void SetR(SizeType rows) {$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
SetReady	inc/Core/VectorIndex.h	/^    virtual void SetReady(bool p_ready) { m_bReady = p_ready; }$/;"	f	class:SPTAG::VectorIndex
SetResult	inc/Core/SearchQuery.h	/^    inline void SetResult(int p_index, SizeType p_VID, float p_dist)$/;"	f	class:SPTAG::QueryResult
SetResultNum	inc/Core/SearchQuery.h	/^    inline void SetResultNum(int p_resultNum)$/;"	f	class:SPTAG::QueryResult
SetTarget	inc/Core/Common/QueryResultSet.h	/^    inline void SetTarget(const T* p_target, const std::shared_ptr<IQuantizer>& quantizer)$/;"	f	class:SPTAG::COMMON::QueryResultSet
SetTarget	inc/Core/SearchQuery.h	/^    inline void SetTarget(const void* p_target)$/;"	f	class:SPTAG::QueryResult
SetThreadAffinity	src/Helper/AsyncFileReader.cpp	/^        void SetThreadAffinity(int threadID, std::thread& thread, NumaStrategy socketStrategy, OrderStrategy idStrategy)$/;"	f	namespace:SPTAG::Helper
SetWorkSpaceFactory	inc/Core/BKT/Index.h	/^            ErrorCode SetWorkSpaceFactory(std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<SPTAG::COMMON::IWorkSpace>> up_workSpaceFactory)$/;"	f	class:SPTAG::BKT::Index
SetWorkSpaceFactory	inc/Core/KDT/Index.h	/^            ErrorCode SetWorkSpaceFactory(std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<SPTAG::COMMON::IWorkSpace>> up_workSpaceFactory)$/;"	f	class:SPTAG::KDT::Index
SetWorkSpaceFactory	inc/Core/SPANN/Index.h	/^            ErrorCode SetWorkSpaceFactory(std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<SPTAG::COMMON::IWorkSpace>> up_workSpaceFactory)$/;"	f	class:SPTAG::SPANN::Index
ShouldAbort	inc/Helper/ThreadPool.h	/^                virtual bool ShouldAbort() { return m_stopped; }$/;"	f	class:SPTAG::Helper::ThreadPool::Abort
Shuffle	inc/Core/Common/BKTree.h	/^            void Shuffle(std::vector<SizeType>& indices, SizeType first, SizeType last) {$/;"	f	struct:SPTAG::COMMON::KmeansArgs
ShutDown	inc/Helper/AsyncFileReader.h	/^            virtual void ShutDown()$/;"	f	class:SPTAG::Helper::AsyncFileIO
ShutDown	inc/Helper/DiskIO.h	/^            virtual void ShutDown() {}$/;"	f	class:SPTAG::Helper::SimpleBufferIO
ShutDown	inc/Helper/DiskIO.h	/^            virtual void ShutDown()$/;"	f	class:SPTAG::Helper::SimpleFileIO
SimpleBufferIO	inc/Helper/DiskIO.h	/^            SimpleBufferIO(DiskIOScenario scenario = DiskIOScenario::DIS_UserRead) {}$/;"	f	class:SPTAG::Helper::SimpleBufferIO
SimpleBufferIO	inc/Helper/DiskIO.h	/^        class SimpleBufferIO : public DiskIO$/;"	c	namespace:SPTAG::Helper
SimpleFileIO	inc/Helper/DiskIO.h	/^            SimpleFileIO(DiskIOScenario scenario = DiskIOScenario::DIS_UserRead) {}$/;"	f	class:SPTAG::Helper::SimpleFileIO
SimpleFileIO	inc/Helper/DiskIO.h	/^        class SimpleFileIO : public DiskIO$/;"	c	namespace:SPTAG::Helper
SimpleLogger	inc/Helper/Logging.h	/^            SimpleLogger(LogLevel level) : m_level(level) {}$/;"	f	class:SPTAG::Helper::SimpleLogger
SimpleLogger	inc/Helper/Logging.h	/^        class SimpleLogger : public Logger {$/;"	c	namespace:SPTAG::Helper
SimpleReadBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleReadBuffer(const std::uint8_t* p_buffer, T& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleReadBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleReadBuffer<ByteArray>(const std::uint8_t* p_buffer, ByteArray& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleReadBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleReadBuffer<std::string>(const std::uint8_t* p_buffer, std::string& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleReadSharedPtrBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleReadSharedPtrBuffer(const std::uint8_t* p_buffer, std::shared_ptr<T>& p_val)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleSerialization	inc/Socket/SimpleSerialization.h	/^namespace SimpleSerialization$/;"	n	namespace:SPTAG::Socket
SimpleWriteBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleWriteBuffer(const T& p_val, std::uint8_t* p_buffer)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleWriteBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleWriteBuffer<ByteArray>(const ByteArray& p_val, std::uint8_t* p_buffer)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleWriteBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleWriteBuffer<std::string>(const std::string& p_val, std::uint8_t* p_buffer)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
SimpleWriteSharedPtrBuffer	inc/Socket/SimpleSerialization.h	/^    SimpleWriteSharedPtrBuffer(const std::shared_ptr<T>& p_val, std::uint8_t* p_buffer)$/;"	f	namespace:SPTAG::Socket::SimpleSerialization
Size	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighbors::Size() const$/;"	f	class:DynamicNeighbors
SizeType	inc/Core/Common.h	/^typedef std::int32_t SizeType;$/;"	t	namespace:SPTAG
Sleep	inc/Core/Common.h	68;"	d
Socket	inc/Socket/Client.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/Common.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/Connection.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/ConnectionManager.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/Packet.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/RemoteSearchQuery.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/ResourceManager.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/Server.h	/^namespace Socket$/;"	n	namespace:SPTAG
Socket	inc/Socket/SimpleSerialization.h	/^namespace Socket$/;"	n	namespace:SPTAG
SortResult	inc/Core/Common/QueryResultSet.h	/^    inline void SortResult()$/;"	f	class:SPTAG::COMMON::QueryResultSet
SortSelections	src/Core/VectorIndex.cpp	/^void VectorIndex::SortSelections(std::vector<Edge>* selections) {$/;"	f	class:VectorIndex
SpinLock	inc/Helper/Concurrent.h	/^class SpinLock$/;"	c	namespace:SPTAG::Helper::Concurrent
Spinlock	inc/Extension/Locks.hh	/^        class Spinlock $/;"	c	namespace:SPTAG::EXT
SpinlockWithStat	inc/Extension/Locks.hh	/^        class SpinlockWithStat : public Spinlock$/;"	c	namespace:SPTAG::EXT
SplitString	src/Helper/CommonHelper.cpp	/^StrUtils::SplitString(const std::string& p_str, const std::string& p_separator)$/;"	f	class:StrUtils
Start	src/Socket/Connection.cpp	/^Connection::Start()$/;"	f	class:Connection
StartAccept	src/Socket/Server.cpp	/^Server::StartAccept()$/;"	f	class:Server
StartCheckTimeout	inc/Socket/ResourceManager.h	/^    void StartCheckTimeout()$/;"	f	class:SPTAG::Socket::ResourceManager
StartClient	src/Aggregator/AggregatorService.cpp	/^AggregatorService::StartClient()$/;"	f	class:AggregatorService
StartHeartbeat	src/Socket/Connection.cpp	/^Connection::StartHeartbeat(std::size_t p_intervalSeconds)$/;"	f	class:Connection
StartListen	src/Aggregator/AggregatorService.cpp	/^AggregatorService::StartListen()$/;"	f	class:AggregatorService
StartListen	src/Socket/Server.cpp	/^Server::StartListen()$/;"	f	class:Server
StartsWith	src/Helper/CommonHelper.cpp	/^StrUtils::StartsWith(const char* p_str, const char* p_prefix)$/;"	f	class:StrUtils
StaticDispatch	src/Core/BKT/BKTIndex.cpp	/^        namespace StaticDispatch$/;"	n	namespace:SPTAG::BKT	file:
StaticDispatch	src/Core/KDT/KDTIndex.cpp	/^        namespace StaticDispatch$/;"	n	namespace:SPTAG::KDT	file:
Std	inc/SSDServing/SelectHead.h	/^            float Std(T* nums, size_t size) {$/;"	f	namespace:SPTAG::SSDServing::SelectHead
SteadClock	inc/SSDServing/Utils.h	/^            typedef std::chrono::steady_clock SteadClock;$/;"	t	namespace:SPTAG::SSDServing::Utils
Stop	src/Socket/Connection.cpp	/^Connection::Stop()$/;"	f	class:Connection
StopAll	src/Socket/ConnectionManager.cpp	/^ConnectionManager::StopAll()$/;"	f	class:ConnectionManager
StopW	inc/SSDServing/Utils.h	/^                StopW() {$/;"	f	class:SPTAG::SSDServing::Utils::StopW
StopW	inc/SSDServing/Utils.h	/^            class StopW {$/;"	c	namespace:SPTAG::SSDServing::Utils
StrEqualIgnoreCase	src/Helper/CommonHelper.cpp	/^StrUtils::StrEqualIgnoreCase(const char* p_left, const char* p_right)$/;"	f	class:StrUtils
StrUtils	inc/Helper/CommonHelper.h	/^namespace StrUtils$/;"	n	namespace:SPTAG::Helper
String	inc/Socket/RemoteSearchQuery.h	/^        String = 0$/;"	m	class:SPTAG::Socket::RemoteQuery::QueryType
Subdivide	inc/Core/Common/KDTree.h	/^            SizeType Subdivide(const Dataset<T>& data, const KDTNode& node, std::vector<SizeType>& indices, const SizeType first, const SizeType last) const$/;"	f	class:SPTAG::COMMON::KDTree
Success	inc/Socket/RemoteSearchQuery.h	/^        Success = 0,$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
SumCalcSelector	inc/Core/Common/SIMDUtils.h	/^        inline SumCalcReturn<T> SumCalcSelector()$/;"	f	namespace:SPTAG::COMMON
SwapTree	inc/Core/Common/BKTree.h	/^            inline void SwapTree(BKTree& newTrees)$/;"	f	class:SPTAG::COMMON::BKTree
SyncLoadCenter	src/BalancedDataPartition/main.cpp	/^ErrorCode SyncLoadCenter(COMMON::KmeansArgs<T>& args, int rank, int iteration, unsigned long long &totalCount, float &currDist, float &lambda, float &diff, float &mindist, int &noimprovement, bool loadcenters)$/;"	f
SyncSaveCenter	src/BalancedDataPartition/main.cpp	/^ErrorCode SyncSaveCenter(COMMON::KmeansArgs<T> &args, int rank, int iteration, unsigned long long localCount, float localDist, float lambda, float diff, float mindist, int noimprovement, int savecenters, bool assign = false)$/;"	f
THREADS	inc/Core/Common/cuda/params.h	35;"	d
TPT_ITERS	inc/Core/Common/cuda/params.h	41;"	d
TPT_PART_DIMS	inc/Core/Common/cuda/params.h	42;"	d
TPtree	inc/Core/Common/cuda/TPtree.hxx	/^class TPtree {$/;"	c
TellP	inc/Helper/AsyncFileReader.h	/^            virtual std::uint64_t TellP() { return 0; }$/;"	f	class:SPTAG::Helper::AsyncFileIO
TellP	inc/Helper/DiskIO.h	/^            virtual std::uint64_t TellP()$/;"	f	class:SPTAG::Helper::SimpleBufferIO
TellP	inc/Helper/DiskIO.h	/^            virtual std::uint64_t TellP()$/;"	f	class:SPTAG::Helper::SimpleFileIO
ThreadHeap	inc/Core/Common/cuda/ThreadHeap.hxx	/^class ThreadHeap {$/;"	c
ThreadLocalWorkSpaceFactory	inc/Core/Common/WorkSpace.h	/^        class ThreadLocalWorkSpaceFactory : public IWorkSpaceFactory<WorkSpaceType>$/;"	c	namespace:SPTAG::COMMON
ThreadPool	inc/Helper/ThreadPool.h	/^            ThreadPool() {}$/;"	f	class:SPTAG::Helper::ThreadPool
ThreadPool	inc/Helper/ThreadPool.h	/^        class ThreadPool$/;"	c	namespace:SPTAG::Helper
Timeout	inc/Socket/Packet.h	/^    Timeout = 0x01,$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus
Timeout	inc/Socket/RemoteSearchQuery.h	/^        Timeout = 1,$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
TimeoutCallback	inc/Socket/ResourceManager.h	/^    typedef std::function<void(std::shared_ptr<ResourceType>)> TimeoutCallback;$/;"	t	class:SPTAG::Socket::ResourceManager
ToLowerInPlace	src/Helper/CommonHelper.cpp	/^StrUtils::ToLowerInPlace(std::string& p_str)$/;"	f	class:StrUtils
Top	inc/Core/Common/Heap.h	/^            inline T& Top() { if (count == 0) return heap[0]; else return heap[1]; }$/;"	f	class:SPTAG::COMMON::Heap
TrainDict	inc/Core/SPANN/Compressor.h	/^            std::size_t TrainDict(const std::string &samplesBuffer, const size_t *samplesSizes, unsigned nbSamples)$/;"	f	class:SPTAG::SPANN::Compressor
TrainPQQuantizer	inc/Quantizer/Training.h	/^std::unique_ptr<T[]> TrainPQQuantizer(std::shared_ptr<QuantizerOptions> options, std::shared_ptr<VectorSet> raw_vectors, std::shared_ptr<VectorSet> quantized_vectors)$/;"	f
TranslateVector	inc/Helper/VectorSetReaders/TxtReader.h	/^    bool TranslateVector(char* p_str, DataType* p_vector)$/;"	f	class:SPTAG::Helper::TxtVectorReader
TransposePoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class TransposePoint {$/;"	c
TransposePoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class TransposePoint<int8_t, Dim, Stride, SUMTYPE> {$/;"	c
TransposePoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^class TransposePoint<uint8_t, Dim, Stride, SUMTYPE> {$/;"	c
TruthFileType	inc/Core/Common.h	/^enum class TruthFileType : std::uint8_t$/;"	c	namespace:SPTAG
TruthSet	inc/Core/Common/TruthSet.h	/^        class TruthSet {$/;"	c	namespace:SPTAG::COMMON
TryClustering	inc/Core/Common/BKTree.h	/^        float TryClustering(const Dataset<T>& data,$/;"	f	namespace:SPTAG::COMMON
TxtVectorReader	inc/Helper/VectorSetReaders/TxtReader.h	/^class TxtVectorReader : public VectorSetReader$/;"	c	namespace:SPTAG::Helper
TxtVectorReader	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::TxtVectorReader(std::shared_ptr<ReaderOptions> p_options)$/;"	f	class:TxtVectorReader
Type	inc/Core/Common/NeighborhoodGraph.h	/^            inline std::string Type() const { return m_pNeighborhoodGraph.Name(); }$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
UInt8	inc/Core/Common/cuda/GPUQuantizer.hxx	/^enum RType {Int8, UInt8, Float, Int16};$/;"	e	enum:RType
Undefined	inc/Socket/Packet.h	/^    Undefined = 0x00,$/;"	m	class:SPTAG::Socket::PacketType
UniqueHandle	inc/Helper/AsyncFileReader.h	/^            typedef std::unique_ptr<typename std::remove_pointer<HANDLE>::type, HandleDeleter> UniqueHandle;$/;"	t	class:SPTAG::Helper::HandleWrapper
UniqueHandler	src/Core/ResultIterator.cpp	/^	struct UniqueHandler {$/;"	s	file:
Update	inc/Core/Common/NeighborhoodGraph.h	/^            void Update(SizeType row, DimensionType col, SizeType val) {$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
UpdateIndex	src/Core/BKT/BKTIndex.cpp	/^            Index<T>::UpdateIndex()$/;"	f	class:SPTAG::BKT::Index
UpdateIndex	src/Core/KDT/KDTIndex.cpp	/^            Index<T>::UpdateIndex()$/;"	f	class:SPTAG::KDT::Index
UpdateIndex	src/Core/SPANN/SPANNIndex.cpp	/^            Index<T>::UpdateIndex()$/;"	f	class:SPTAG::SPANN::Index
UpdateMetaMapping	src/Core/VectorIndex.cpp	/^VectorIndex::UpdateMetaMapping(const std::string& meta, SizeType i)$/;"	f	class:VectorIndex
Utils	inc/Core/Common/CommonUtils.h	/^        class Utils {$/;"	c	namespace:SPTAG::COMMON
Utils	inc/SSDServing/Utils.h	/^        namespace Utils {$/;"	n	namespace:SPTAG::SSDServing
VID	inc/Core/SearchResult.h	/^        SizeType VID;$/;"	m	struct:SPTAG::BasicResult
VectorCount	inc/Helper/DynamicNeighbors.h	/^        int VectorCount() const$/;"	f	class:SPTAG::Helper::DynamicNeighborsSet
VectorFileType	inc/Core/Common.h	/^enum class VectorFileType : std::uint8_t$/;"	c	namespace:SPTAG
VectorIndex	inc/Core/ResultIterator.h	/^typedef SPTAG::VectorIndex VectorIndex;$/;"	t
VectorIndex	inc/Core/VectorIndex.h	/^class VectorIndex$/;"	c	namespace:SPTAG
VectorIndex	src/Core/VectorIndex.cpp	/^VectorIndex::VectorIndex()$/;"	f	class:VectorIndex
VectorSet	inc/Core/VectorSet.h	/^class VectorSet$/;"	c	namespace:SPTAG
VectorSet	src/Core/VectorSet.cpp	/^VectorSet::VectorSet()$/;"	f	class:VectorSet
VectorSetReader	inc/Helper/VectorSetReader.h	/^class VectorSetReader$/;"	c	namespace:SPTAG::Helper
VectorSetReader	src/Helper/VectorSetReader.cpp	/^VectorSetReader::VectorSetReader(std::shared_ptr<ReaderOptions> p_options)$/;"	f	class:VectorSetReader
VectorValueType	inc/Core/Common.h	/^enum class VectorValueType : std::uint8_t$/;"	c	namespace:SPTAG
WIN32_LEAN_AND_MEAN	inc/Core/Common.h	74;"	d
Wait	inc/Helper/AsyncFileReader.h	/^            virtual void Wait(AsyncReadRequest& readRequest)$/;"	f	class:SPTAG::Helper::AsyncFileIO
Wait	inc/Helper/DiskIO.h	/^            virtual void Wait(AsyncReadRequest& readRequest) { return; }$/;"	f	class:SPTAG::Helper::DiskIO
Wait	src/Helper/Concurrent.cpp	/^WaitSignal::Wait()$/;"	f	class:WaitSignal
WaitAllFinished	src/Client/ClientWrapper.cpp	/^ClientWrapper::WaitAllFinished()$/;"	f	class:ClientWrapper
WaitForShutdown	src/Aggregator/AggregatorService.cpp	/^AggregatorService::WaitForShutdown()$/;"	f	class:AggregatorService
WaitSignal	inc/Helper/Concurrent.h	/^class WaitSignal$/;"	c	namespace:SPTAG::Helper::Concurrent
WaitSignal	src/Helper/Concurrent.cpp	/^WaitSignal::WaitSignal()$/;"	f	class:WaitSignal
WaitSignal	src/Helper/Concurrent.cpp	/^WaitSignal::WaitSignal(std::uint32_t p_unfinished)$/;"	f	class:WaitSignal
WeightedRankFunc	src/Core/MultiIndexScan.cpp	/^    float MultiIndexScan::WeightedRankFunc(std::vector<float> in) {$/;"	f	class:SPTAG::MultiIndexScan
WithMeta	inc/Core/SearchQuery.h	/^    inline bool WithMeta() const$/;"	f	class:SPTAG::QueryResult
WorkSpace	inc/Core/Common/WorkSpace.h	/^            WorkSpace() {}$/;"	f	struct:SPTAG::COMMON::WorkSpace
WorkSpace	inc/Core/Common/WorkSpace.h	/^            WorkSpace(WorkSpace& other) $/;"	f	struct:SPTAG::COMMON::WorkSpace
WorkSpace	inc/Core/Common/WorkSpace.h	/^        struct WorkSpace : public IWorkSpace$/;"	s	namespace:SPTAG::COMMON
WorkSpacePool	inc/Core/Common/WorkSpacePool.h	/^            WorkSpacePool() {}$/;"	f	class:SPTAG::COMMON::WorkSpacePool
WorkSpacePool	inc/Core/Common/WorkSpacePool.h	/^        class WorkSpacePool$/;"	c	namespace:SPTAG::COMMON
Write	src/Socket/RemoteSearchQuery.cpp	/^RemoteQuery::Write(std::uint8_t* p_buffer) const$/;"	f	class:RemoteQuery
Write	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::Write(std::uint8_t* p_buffer) const$/;"	f	class:RemoteSearchResult
WriteBinary	inc/Helper/AsyncFileReader.h	/^            virtual std::uint64_t WriteBinary(std::uint64_t writeSize, const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::AsyncFileIO
WriteBinary	inc/Helper/DiskIO.h	/^            virtual std::uint64_t WriteBinary(std::uint64_t writeSize, const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleBufferIO
WriteBinary	inc/Helper/DiskIO.h	/^            virtual std::uint64_t WriteBinary(std::uint64_t writeSize, const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleFileIO
WriteBuffer	src/Socket/Packet.cpp	/^PacketHeader::WriteBuffer(std::uint8_t* p_buffer)$/;"	f	class:PacketHeader
WriteString	inc/Helper/AsyncFileReader.h	/^            virtual std::uint64_t WriteString(const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::AsyncFileIO
WriteString	inc/Helper/DiskIO.h	/^            virtual std::uint64_t WriteString(const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleBufferIO
WriteString	inc/Helper/DiskIO.h	/^            virtual std::uint64_t WriteString(const char* buffer, std::uint64_t offset = UINT64_MAX)$/;"	f	class:SPTAG::Helper::SimpleFileIO
XvecVectorReader	inc/Helper/VectorSetReaders/XvecReader.h	/^class XvecVectorReader : public VectorSetReader$/;"	c	namespace:SPTAG::Helper
XvecVectorReader	src/Helper/VectorSetReaders/XvecReader.cpp	/^XvecVectorReader::XvecVectorReader(std::shared_ptr<ReaderOptions> p_options)$/;"	f	class:XvecVectorReader
_CACHE_ENABLED_	src/Helper/AsyncFileReader.cpp	75;"	d	file:
_CheckAndSet	inc/Core/Common/WorkSpace.h	/^            inline int _CheckAndSet(SizeType* hashTable, int poolSize, bool isFirstTable, SizeType idx)$/;"	f	class:SPTAG::COMMON::OptHashPosVector
_D	inc/Core/Common/BKTree.h	/^            DimensionType _D;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_DK	inc/Core/Common/BKTree.h	/^            int _DK;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_K	inc/Core/Common/BKTree.h	/^            int _K;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_M	inc/Core/Common/BKTree.h	/^            DistCalcMethod _M;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_RD	inc/Core/Common/BKTree.h	/^            DimensionType _RD;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_SPTAG_AGGREGATOR_AGGREGATORCONTEXT_H_	inc/Aggregator/AggregatorContext.h	5;"	d
_SPTAG_AGGREGATOR_AGGREGATOREXECUTIONCONTEXT_H_	inc/Aggregator/AggregatorExecutionContext.h	5;"	d
_SPTAG_AGGREGATOR_AGGREGATORSERVICE_H_	inc/Aggregator/AggregatorService.h	5;"	d
_SPTAG_AGGREGATOR_AGGREGATORSETTINGS_H_	inc/Aggregator/AggregatorSettings.h	5;"	d
_SPTAG_BKT_INDEX_H_	inc/Core/BKT/Index.h	5;"	d
_SPTAG_CLIENT_CLIENTWRAPPER_H_	inc/Client/ClientWrapper.h	5;"	d
_SPTAG_CLIENT_OPTIONS_H_	inc/Client/Options.h	5;"	d
_SPTAG_COMMONDATASTRUCTURE_H_	inc/Core/CommonDataStructure.h	5;"	d
_SPTAG_COMMON_BKTREE_H_	inc/Core/Common/BKTree.h	5;"	d
_SPTAG_COMMON_COMMONUTILS_H_	inc/Core/Common/CommonUtils.h	5;"	d
_SPTAG_COMMON_CUDA_DISTANCE_H_	inc/Core/Common/cuda/Distance.hxx	26;"	d
_SPTAG_COMMON_CUDA_GPUKNN_DISTANCE_H_	inc/Core/Common/cuda/GPUKNNDistance.hxx	26;"	d
_SPTAG_COMMON_CUDA_GPUQUANTIZER_H_	inc/Core/Common/cuda/GPUQuantizer.hxx	26;"	d
_SPTAG_COMMON_CUDA_KMEANS_H_	inc/Core/Common/cuda/Kmeans.hxx	26;"	d
_SPTAG_COMMON_CUDA_KNN_H_	inc/Core/Common/cuda/KNN.hxx	26;"	d
_SPTAG_COMMON_CUDA_PARAMS_H_	inc/Core/Common/cuda/params.h	26;"	d
_SPTAG_COMMON_CUDA_PERFTEST_H_	inc/Core/Common/cuda/PerfTestGPU.hxx	26;"	d
_SPTAG_COMMON_CUDA_REFINE_H	inc/Core/Common/cuda/Refine.hxx	3;"	d
_SPTAG_COMMON_CUDA_TAILNEIGHBORS_H	inc/Core/Common/cuda/TailNeighbors.hxx	3;"	d
_SPTAG_COMMON_CUDA_THREADHEAP_H_	inc/Core/Common/cuda/ThreadHeap.hxx	26;"	d
_SPTAG_COMMON_CUDA_TPTREE_H_	inc/Core/Common/cuda/TPtree.hxx	27;"	d
_SPTAG_COMMON_DATASET_H_	inc/Core/Common/Dataset.h	5;"	d
_SPTAG_COMMON_DISTANCEUTILS_H_	inc/Core/Common/DistanceUtils.h	5;"	d
_SPTAG_COMMON_FINEGRAINEDLOCK_H_	inc/Core/Common/FineGrainedLock.h	5;"	d
_SPTAG_COMMON_HEAP_H_	inc/Core/Common/Heap.h	5;"	d
_SPTAG_COMMON_INSTRUCTIONUTILS_H_	inc/Core/Common/InstructionUtils.h	2;"	d
_SPTAG_COMMON_KDTREE_H_	inc/Core/Common/KDTree.h	5;"	d
_SPTAG_COMMON_KNG_H_	inc/Core/Common/KNearestNeighborhoodGraph.h	5;"	d
_SPTAG_COMMON_LABELSET_H_	inc/Core/Common/Labelset.h	5;"	d
_SPTAG_COMMON_NG_H_	inc/Core/Common/NeighborhoodGraph.h	5;"	d
_SPTAG_COMMON_OPQQUANTIZER_H_	inc/Core/Common/OPQQuantizer.h	4;"	d
_SPTAG_COMMON_PQQUANTIZER_H_	inc/Core/Common/PQQuantizer.h	5;"	d
_SPTAG_COMMON_QUANTIZER_H_	inc/Core/Common/IQuantizer.h	5;"	d
_SPTAG_COMMON_QUERYRESULTSET_H_	inc/Core/Common/QueryResultSet.h	5;"	d
_SPTAG_COMMON_RNG_H_	inc/Core/Common/RelativeNeighborhoodGraph.h	5;"	d
_SPTAG_COMMON_SIMDUTILS_H_	inc/Core/Common/SIMDUtils.h	5;"	d
_SPTAG_COMMON_TRUTHSET_H_	inc/Core/Common/TruthSet.h	5;"	d
_SPTAG_COMMON_WORKSPACEPOOL_H_	inc/Core/Common/WorkSpacePool.h	5;"	d
_SPTAG_COMMON_WORKSPACE_H_	inc/Core/Common/WorkSpace.h	5;"	d
_SPTAG_CORE_COMMONDEFS_H_	inc/Core/Common.h	5;"	d
_SPTAG_EXTLOCKS_H	inc/Extension/Locks.hh	6;"	d
_SPTAG_EXT_CACHE_FIFOMT_H	inc/Extension/CacheFifoMt.hh	6;"	d
_SPTAG_EXT_CACHE_LFUMT_H	inc/Extension/CacheLfuMt.hh	6;"	d
_SPTAG_EXT_CACHE_LRUMT_H	inc/Extension/CacheLruMt.hh	6;"	d
_SPTAG_EXT_CACHE_LRUWEAK_H	inc/Extension/CacheLruWeak.hh	6;"	d
_SPTAG_HELPER_ARGUMENTSPARSER_H_	inc/Helper/ArgumentsParser.h	5;"	d
_SPTAG_HELPER_ASYNCFILEREADER_H_	inc/Helper/AsyncFileReader.h	5;"	d
_SPTAG_HELPER_BASE64ENCODE_H_	inc/Helper/Base64Encode.h	5;"	d
_SPTAG_HELPER_COMMONHELPER_H_	inc/Helper/CommonHelper.h	5;"	d
_SPTAG_HELPER_CONCURRENTSET_H_	inc/Helper/ConcurrentSet.h	5;"	d
_SPTAG_HELPER_CONCURRENT_H_	inc/Helper/Concurrent.h	5;"	d
_SPTAG_HELPER_DISKIO_H_	inc/Helper/DiskIO.h	5;"	d
_SPTAG_HELPER_INIREADER_H_	inc/Helper/SimpleIniReader.h	5;"	d
_SPTAG_HELPER_LOCKFREE_H_	inc/Helper/LockFree.h	5;"	d
_SPTAG_HELPER_LOGGING_H_	inc/Helper/Logging.h	5;"	d
_SPTAG_HELPER_STRINGCONVERTHELPER_H_	inc/Helper/StringConvert.h	5;"	d
_SPTAG_HELPER_THREADPOOL_H_	inc/Helper/ThreadPool.h	5;"	d
_SPTAG_HELPER_VECTORSETREADERS_DEFAULTREADER_H_	inc/Helper/VectorSetReaders/DefaultReader.h	5;"	d
_SPTAG_HELPER_VECTORSETREADERS_MEMORYREADER_H_	inc/Helper/VectorSetReaders/MemoryReader.h	5;"	d
_SPTAG_HELPER_VECTORSETREADERS_TXTREADER_H_	inc/Helper/VectorSetReaders/TxtReader.h	5;"	d
_SPTAG_HELPER_VECTORSETREADERS_XVECREADER_H_	inc/Helper/VectorSetReaders/XvecReader.h	5;"	d
_SPTAG_HELPER_VECTORSETREADER_H_	inc/Helper/VectorSetReader.h	5;"	d
_SPTAG_KDT_INDEX_H_	inc/Core/KDT/Index.h	5;"	d
_SPTAG_METADATASET_H_	inc/Core/MetadataSet.h	5;"	d
_SPTAG_MULTI_INDEX_SCAN_H	inc/Core/MultiIndexScan.h	5;"	d
_SPTAG_RESULT_ITERATOR_H	inc/Core/ResultIterator.h	5;"	d
_SPTAG_SEARCHQUERY_H_	inc/Core/SearchQuery.h	5;"	d
_SPTAG_SEARCHRESULT_H_	inc/Core/SearchResult.h	5;"	d
_SPTAG_SERVER_QUERYPARSER_H_	inc/Server/QueryParser.h	5;"	d
_SPTAG_SERVER_SEARCHEXECUTIONCONTEXT_H_	inc/Server/SearchExecutionContext.h	5;"	d
_SPTAG_SERVER_SEARCHEXECUTOR_H_	inc/Server/SearchExecutor.h	5;"	d
_SPTAG_SERVER_SERVICECONTEX_H_	inc/Server/ServiceContext.h	5;"	d
_SPTAG_SERVER_SERVICESTTINGS_H_	inc/Server/ServiceSettings.h	5;"	d
_SPTAG_SERVER_SERVICE_H_	inc/Server/SearchService.h	5;"	d
_SPTAG_SOCKET_CLIENT_H_	inc/Socket/Client.h	5;"	d
_SPTAG_SOCKET_COMMON_H_	inc/Socket/Common.h	5;"	d
_SPTAG_SOCKET_CONNECTIONMANAGER_H_	inc/Socket/ConnectionManager.h	5;"	d
_SPTAG_SOCKET_CONNECTION_H_	inc/Socket/Connection.h	5;"	d
_SPTAG_SOCKET_PACKET_H_	inc/Socket/Packet.h	5;"	d
_SPTAG_SOCKET_REMOTESEARCHQUERY_H_	inc/Socket/RemoteSearchQuery.h	5;"	d
_SPTAG_SOCKET_RESOURCEMANAGER_H_	inc/Socket/ResourceManager.h	5;"	d
_SPTAG_SOCKET_SERVER_H_	inc/Socket/Server.h	5;"	d
_SPTAG_SOCKET_SIMPLESERIALIZATION_H_	inc/Socket/SimpleSerialization.h	5;"	d
_SPTAG_SPANN_COMPRESSOR_H_	inc/Core/SPANN/Compressor.h	5;"	d
_SPTAG_SPANN_EXTRASEARCHER_H_	inc/Core/SPANN/ExtraFullGraphSearcher.h	10;"	d
_SPTAG_SPANN_IEXTRASEARCHER_H_	inc/Core/SPANN/IExtraSearcher.h	5;"	d
_SPTAG_SPANN_INDEX_H_	inc/Core/SPANN/Index.h	5;"	d
_SPTAG_SPANN_OPTIONS_H_	inc/Core/SPANN/Options.h	5;"	d
_SPTAG_SPANN_RESULT_ITERATOR_H	inc/Core/SPANN/SPANNResultIterator.h	5;"	d
_SPTAG_VECTORINDEX_H_	inc/Core/VectorIndex.h	5;"	d
_SPTAG_VECTORSET_H_	inc/Core/VectorSet.h	5;"	d
_T	inc/Core/Common/BKTree.h	/^            int _T;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
_TRACK_OFFSET_	inc/Core/SPANN/ExtraFullGraphSearcher.h	7;"	d
_mm256_mul_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_mul_epi16(__m256i X, __m256i Y)$/;"	f
_mm256_mul_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_mul_epi8(__m256i X, __m256i Y)$/;"	f
_mm256_mul_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_mul_epu8(__m256i X, __m256i Y)$/;"	f
_mm256_sqdf_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_sqdf_epi16(__m256i X, __m256i Y)$/;"	f
_mm256_sqdf_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_sqdf_epi8(__m256i X, __m256i Y)$/;"	f
_mm256_sqdf_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_sqdf_epu8(__m256i X, __m256i Y)$/;"	f
_mm256_sqdf_ps	src/Core/Common/DistanceUtils.cpp	/^inline __m256 _mm256_sqdf_ps(__m256 X, __m256 Y)$/;"	f
_mm512_mul_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_mul_epi16(__m512i X, __m512i Y)$/;"	f
_mm512_mul_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_mul_epi8(__m512i X, __m512i Y)$/;"	f
_mm512_mul_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_mul_epu8(__m512i X, __m512i Y)$/;"	f
_mm512_sqdf_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_sqdf_epi16(__m512i X, __m512i Y)$/;"	f
_mm512_sqdf_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_sqdf_epi8(__m512i X, __m512i Y)$/;"	f
_mm512_sqdf_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_sqdf_epu8(__m512i X, __m512i Y)$/;"	f
_mm512_sqdf_ps	src/Core/Common/DistanceUtils.cpp	/^inline __m512 _mm512_sqdf_ps(__m512 X, __m512 Y)$/;"	f
_mm_mul_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_mul_epi16(__m128i X, __m128i Y)$/;"	f
_mm_mul_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_mul_epi8(__m128i X, __m128i Y)$/;"	f
_mm_mul_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_mul_epu8(__m128i X, __m128i Y)$/;"	f
_mm_sqdf_epi16	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_sqdf_epi16(__m128i X, __m128i Y)$/;"	f
_mm_sqdf_epi8	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_sqdf_epi8(__m128i X, __m128i Y)$/;"	f
_mm_sqdf_epu8	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_sqdf_epu8(__m128i X, __m128i Y)$/;"	f
_mm_sqdf_ps	src/Core/Common/DistanceUtils.cpp	/^inline __m128 _mm_sqdf_ps(__m128 X, __m128 Y)$/;"	f
_rotl	inc/Core/Common.h	62;"	d
add	inc/Helper/ThreadPool.h	/^            void add(Job* j)$/;"	f	class:SPTAG::Helper::ThreadPool
assign	inc/Helper/LockFree.h	/^                bool assign(const T* begin, const T* end)$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
assign_queries_to_group	inc/Core/Common/cuda/TailNeighbors.hxx	/^__global__ void assign_queries_to_group(QueryGroup* groups, TPtree* tptree, PointSet<T>* queries, int N, int num_groups, int dim) {$/;"	f
atomic_float_add	inc/Core/Common/CommonUtils.h	/^            static inline float atomic_float_add(volatile float* ptr, const float operand)$/;"	f	class:SPTAG::COMMON::Utils
atomic_uint32_t	inc/Socket/ResourceManager.h	/^typedef atomic<uint32_t> atomic_uint32_t;$/;"	t	namespace:std
back	inc/Helper/LockFree.h	/^                inline const T& back() const { auto idx = m_size - 1; return *(m_blocks[idx >> m_blockSizeEx] + (idx & m_blockSize)); }$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
begin	inc/Core/SearchQuery.h	/^    const_iterator begin() const$/;"	f	class:SPTAG::QueryResult
begin	inc/Core/SearchQuery.h	/^    iterator begin()$/;"	f	class:SPTAG::QueryResult
benchmarkDist	inc/Core/Common/cuda/PerfTestGPU.hxx	/^void benchmarkDist(SPTAG::VectorIndex* index, int m_iGraphSize, int m_iNeighborhoodSize, int trees, int* results, int refines, int refineDepth, int graph, int leafSize, int initSize, int NUM_GPUS, int balanceFactor) {$/;"	f
blockRows	inc/Quantizer/Training.h	10;"	d
buildGraph	inc/Core/Common/cuda/KNN.hxx	/^void buildGraph(SPTAG::VectorIndex* index, int m_iGraphSize, int m_iNeighborhoodSize, int trees, int* results, int refines, int refineDepth, int graph, int leafSize, int initSize, int NUM_GPUS, int balanceFactor) {$/;"	f
buildGraphGPU	inc/Core/Common/cuda/KNN.hxx	/^void buildGraphGPU(SPTAG::VectorIndex* index, size_t dataSize, int KVAL, int trees, int* results, int graphtype, int leafSize, int NUM_GPUS, int balanceFactor, size_t* batchSize, size_t* GPUOffset, size_t* resPerGPU, int dim) {$/;"	f
c_bufferSize	inc/Socket/Packet.h	/^    static constexpr std::size_t c_bufferSize = 16;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
c_connectionID	inc/Socket/Connection.h	/^    const ConnectionID c_connectionID;$/;"	m	class:SPTAG::Socket::Connection
c_connectionManager	inc/Socket/Connection.h	/^    const std::weak_ptr<ConnectionManager> c_connectionManager;$/;"	m	class:SPTAG::Socket::Connection
c_connectionPoolMask	inc/Socket/ConnectionManager.h	/^    static constexpr std::uint32_t c_connectionPoolMask = c_connectionPoolSize - 1;$/;"	m	class:SPTAG::Socket::ConnectionManager
c_connectionPoolSize	inc/Socket/ConnectionManager.h	/^    static constexpr std::uint32_t c_connectionPoolSize = 1 << 8;$/;"	m	class:SPTAG::Socket::ConnectionManager
c_data	inc/Helper/DynamicNeighbors.h	/^        const int* const c_data;$/;"	m	class:SPTAG::Helper::DynamicNeighbors
c_decTable	src/Helper/Base64Encode.cpp	/^const std::uint8_t c_decTable[] =$/;"	m	namespace:__anon2::Local	file:
c_defaultVectorSeparator	inc/Server/QueryParser.h	/^    static const char* c_defaultVectorSeparator;$/;"	m	class:SPTAG::Service::QueryParser
c_defaultVectorSeparator	src/Server/QueryParser.cpp	/^const char* QueryParser::c_defaultVectorSeparator = "|";$/;"	m	class:QueryParser	file:
c_empty	inc/Core/CommonDataStructure.h	/^    const static Array<T> c_empty;$/;"	m	class:SPTAG::Array
c_empty	inc/Core/CommonDataStructure.h	/^const Array<T> Array<T>::c_empty;$/;"	m	class:SPTAG::Array
c_emptyParameters	inc/Helper/SimpleIniReader.h	/^    const static ParameterValueMap c_emptyParameters;$/;"	m	class:SPTAG::Helper::IniReader
c_emptyParameters	src/Helper/SimpleIniReader.cpp	/^const IniReader::ParameterValueMap IniReader::c_emptyParameters;$/;"	m	class:IniReader	file:
c_encTable	src/Helper/Base64Encode.cpp	/^const char c_encTable[] =$/;"	m	namespace:__anon2::Local	file:
c_handlerMap	inc/Socket/Connection.h	/^    const PacketHandlerMapPtr c_handlerMap;$/;"	m	class:SPTAG::Socket::Connection
c_invalidConnectionID	src/Socket/Common.cpp	/^const ConnectionID SPTAG::Socket::c_invalidConnectionID = 0;$/;"	m	class:SPTAG::Socket	file:
c_invalidResourceID	src/Socket/Common.cpp	/^const ResourceID SPTAG::Socket::c_invalidResourceID = 0;$/;"	m	class:SPTAG::Socket	file:
c_length	inc/Helper/DynamicNeighbors.h	/^        const int c_length;$/;"	m	class:SPTAG::Helper::DynamicNeighbors
c_paddingChar	src/Helper/Base64Encode.cpp	/^const char c_paddingChar = '=';$/;"	m	namespace:__anon2::Local	file:
c_registeredResource	inc/Helper/AsyncFileReader.h	/^                PrioritizedDiskFileReaderResource* const c_registeredResource;$/;"	m	struct:SPTAG::Helper::DiskUtils::CallbackOverLapped
c_requestHandlerMap	inc/Socket/Client.h	/^    const PacketHandlerMapPtr c_requestHandlerMap;$/;"	m	class:SPTAG::Socket::Client
c_serviceContext	inc/Server/SearchExecutor.h	/^    const std::shared_ptr<ServiceContext> c_serviceContext;$/;"	m	class:SPTAG::Service::SearchExecutor
c_serviceSettings	inc/Server/SearchExecutionContext.h	/^    const std::shared_ptr<const ServiceSettings> c_serviceSettings;$/;"	m	class:SPTAG::Service::SearchExecutionContext
c_switchAsValue	inc/Helper/ArgumentsParser.h	/^        const DataType c_switchAsValue;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
cdict	inc/Core/SPANN/Compressor.h	/^            ZSTD_CDict *cdict;$/;"	m	class:SPTAG::SPANN::Compressor
centerid	inc/Core/Common/BKTree.h	/^            SizeType centerid;$/;"	m	struct:SPTAG::COMMON::BKTNode
centers	inc/Core/Common/BKTree.h	/^            T* centers;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
childEnd	inc/Core/Common/BKTree.h	/^            SizeType childEnd;$/;"	m	struct:SPTAG::COMMON::BKTNode
childStart	inc/Core/Common/BKTree.h	/^            SizeType childStart;$/;"	m	struct:SPTAG::COMMON::BKTNode
childrenSize	inc/SSDServing/SelectHead.h	/^                int childrenSize;$/;"	m	struct:SPTAG::SSDServing::SelectHead::HeadCandidate
clear	inc/Core/Common/Heap.h	/^            inline void clear(int size)$/;"	f	class:SPTAG::COMMON::Heap
clear	inc/Core/Common/WorkSpace.h	/^            void clear()$/;"	f	class:SPTAG::COMMON::OptHashPosVector
clear	inc/Core/Common/WorkSpace.h	/^            void clear(int count_) {$/;"	f	class:SPTAG::COMMON::DistPriorityQueue
clear	inc/Helper/LockFree.h	/^                inline void clear() { m_size = 0; }$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
clusterDist	inc/Core/Common/BKTree.h	/^            float* clusterDist;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
clusterIdx	inc/Core/Common/BKTree.h	/^            SizeType* clusterIdx;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
cols	inc/Core/Common/Dataset.h	/^            DimensionType cols = 1;$/;"	m	class:SPTAG::COMMON::Dataset
compress_level	inc/Core/SPANN/Compressor.h	/^            int compress_level;$/;"	m	class:SPTAG::SPANN::Compressor
computeKmeansGPU	inc/Core/Common/cuda/Kmeans.hxx	/^float computeKmeansGPU(const Dataset<T>& data,$/;"	f
compute_group_sizes	inc/Core/Common/cuda/TailNeighbors.hxx	/^__global__ void compute_group_sizes(QueryGroup* groups, TPtree* tptree, PointSet<T>* queries, int N, int num_groups, int* queryMem, int dim) {$/;"	f
consecutive_drops	inc/Core/MultiIndexScan.h	/^        unsigned int consecutive_drops;$/;"	m	class:SPTAG::MultiIndexScan
const_iterator	inc/Core/SearchQuery.h	/^    typedef const BasicResult* const_iterator;$/;"	t	class:SPTAG::QueryResult
construct_trees_PQ	inc/Core/Common/cuda/TPtree.hxx	/^__host__ void construct_trees_PQ(TPtree** d_trees, PointSet<T>** ps, int N, int NUM_GPUS, cudaStream_t* streams, SPTAG::VectorIndex* index) {$/;"	f
construct_trees_multigpu	inc/Core/Common/cuda/TPtree.hxx	/^__host__ void construct_trees_multigpu(TPtree** d_trees, PointSet<T>** ps, int N, int NUM_GPUS, cudaStream_t* streams, int balanceFactor) {$/;"	f
convertMatrix	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ Point<T, SUMTYPE, Dim>* convertMatrix(SPTAG::VectorIndex* index, size_t rows, int exact_dim) {$/;"	f
convertMatrix	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ Point<T, SUMTYPE, Dim>* convertMatrix(T* data, size_t rows, int exact_dim) {$/;"	f
coords	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    T coords[Dim];$/;"	m	class:Point
coords	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    uint32_t coords[Dim \/ 4];$/;"	m	class:Point
copy	inc/Helper/LockFree.h	/^                ByteArray copy(std::uint64_t offset, size_t length) const$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
copyRawDataToMultiGPU	inc/Core/Common/cuda/Distance.hxx	/^__host__ void copyRawDataToMultiGPU(SPTAG::VectorIndex* index, T** d_data, size_t dataSize, int dim, int NUM_GPUS, cudaStream_t* streams) {$/;"	f
copyfile	src/Core/VectorIndex.cpp	/^    bool copyfile(const char* oldpath, const char* newpath) {$/;"	f	namespace:SPTAG
cosine	inc/Core/Common/cuda/Distance.hxx	/^__forceinline__ __device__ SUMTYPE cosine(T* a, T* b) {$/;"	f
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ SUMTYPE cosine(Point<T, SUMTYPE, Dim>* other) {$/;"	f	class:Point
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ SUMTYPE cosine(Point<int8_t, SUMTYPE, Dim>* other) {$/;"	f	class:Point
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ SUMTYPE cosine(Point<uint8_t, SUMTYPE, Dim>* other) {$/;"	f	class:Point
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE cosine(Point<int8_t, SUMTYPE, Dim>* other) {$/;"	f	class:TransposePoint
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ __host__ SUMTYPE cosine(Point < T, SUMTYPE, Dim >* other) {$/;"	f	class:TransposePoint
cosine	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ __host__ SUMTYPE cosine(Point<uint8_t, SUMTYPE, Dim>* other) {$/;"	f	class:TransposePoint
cosine_int8	inc/Core/Common/cuda/Distance.hxx	/^__device__ int32_t cosine_int8(int8_t* a, int8_t* b) {$/;"	f
cosine_int8_rfloat	inc/Core/Common/cuda/Distance.hxx	/^__device__ float cosine_int8_rfloat(int8_t* a, int8_t* b) {$/;"	f
count	inc/Core/Common/Heap.h	/^            int count; \/\/ Number of element in the heap$/;"	m	class:SPTAG::COMMON::Heap
count	inc/Helper/ConcurrentSet.h	/^                size_t count(const T& key) const$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentSet
counts	inc/Core/Common/BKTree.h	/^            SizeType* counts;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
cpuid	inc/Core/Common/InstructionUtils.h	20;"	d
cpuid	src/Core/Common/InstructionUtils.cpp	/^void cpuid(int info[4], int InfoType) {$/;"	f
create_tptree_multigpu	inc/Core/Common/cuda/TPtree.hxx	/^__host__ void create_tptree_multigpu(TPtree** d_trees, PointSet<T>** ps, int N, int MAX_LEVELS, int NUM_GPUS, cudaStream_t* streams, int balanceFactor, SPTAG::VectorIndex* index) {$/;"	f
data	inc/Core/Common/Dataset.h	/^            T* data = nullptr;$/;"	m	class:SPTAG::COMMON::Dataset
data	inc/Core/Common/cuda/Distance.hxx	/^    T* data;$/;"	m	class:PointSet
dataPtr	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    T* dataPtr;$/;"	m	class:TransposePoint
dataPtr	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    uint32_t* dataPtr;$/;"	m	class:TransposePoint
ddict	inc/Core/SPANN/Compressor.h	/^            ZSTD_DDict *ddict;$/;"	m	class:SPTAG::SPANN::Compressor
debug_warm_up_gpu	inc/Core/Common/cuda/TailNeighbors.hxx	/^__global__ void debug_warm_up_gpu() {$/;"	f
depth	inc/SSDServing/SelectHead.h	/^                int depth;$/;"	m	struct:SPTAG::SSDServing::SelectHead::HeadCandidate
destroy	inc/Core/Common/cuda/TPtree.hxx	/^    __host__ void destroy() {$/;"	f	class:TPtree
dictBuffer	inc/Core/SPANN/Compressor.h	/^            std::string dictBuffer;$/;"	m	class:SPTAG::SPANN::Compressor
dictBufferCapacity	inc/Core/SPANN/Compressor.h	/^            size_t dictBufferCapacity;$/;"	m	class:SPTAG::SPANN::Compressor
dim	inc/Core/Common/cuda/Distance.hxx	/^    int dim;$/;"	m	class:PointSet
direxists	inc/Core/Common.h	/^inline bool direxists(const TCHAR* path) {$/;"	f
direxists	inc/Core/Common.h	/^inline bool direxists(const char* path) {$/;"	f
dist	inc/Core/Common/cuda/Distance.hxx	/^__device__ SUMTYPE dist(T* a, T* b) {$/;"	f
dist	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ SUMTYPE dist(Point<T, SUMTYPE, Dim>* other, int metric) {$/;"	f	class:Point
dist	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ SUMTYPE dist(Point<int8_t, SUMTYPE, Dim>* other, int metric) {$/;"	f	class:Point
dist	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ SUMTYPE dist(Point<uint8_t, SUMTYPE, Dim>* other, int metric) {$/;"	f	class:Point
dist	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __forceinline__ __device__ float dist(uint8_t* pX, uint8_t* pY) {$/;"	f	class:__anon1::GPU_Quantizer
dist	inc/Core/Common/cuda/ThreadHeap.hxx	/^    SUMTYPE dist;$/;"	m	class:DistPair
distCASMax	inc/Core/Common/cuda/Kmeans.hxx	/^__device__ __inline__ void distCASMax(float* oldDist, SizeType* oldIdx, float newDist, SizeType newIdx, int* lock) {$/;"	f
distCASMin	inc/Core/Common/cuda/Kmeans.hxx	/^__device__ __inline__ void distCASMin(float* oldDist, SizeType* oldIdx, float newDist, SizeType newIdx, int* lock) {$/;"	f
distance	inc/Core/Common/cuda/TailNeighbors.hxx	/^    float distance;$/;"	m	struct:GPUEdge
distance	inc/Core/SearchResult.h	/^        float distance;$/;"	m	struct:SPTAG::Edge
distance	inc/Core/SearchResult.h	/^        float distance;$/;"	m	struct:SPTAG::NodeDistPair
empty	inc/Core/Common/Heap.h	/^            inline bool empty() { return count == 0; }$/;"	f	class:SPTAG::COMMON::Heap
end	inc/Core/SearchQuery.h	/^    const_iterator end() const$/;"	f	class:SPTAG::QueryResult
end	inc/Core/SearchQuery.h	/^    iterator end()$/;"	f	class:SPTAG::QueryResult
exec	inc/Core/BKT/Index.h	/^                void exec(IAbortOperation* p_abort) {$/;"	f	class:SPTAG::BKT::Index::RebuildJob
exec	inc/Core/KDT/Index.h	/^                void exec(IAbortOperation* p_abort) {$/;"	f	class:SPTAG::KDT::Index::RebuildJob
extractAndCopyHeadRaw_multi	inc/Core/Common/cuda/TailNeighbors.hxx	/^void extractAndCopyHeadRaw_multi(T* dataBuffer, SPTAG::VectorIndex* headIndex, T** d_headRaw, size_t headRows, int dim, int NUM_GPUS) {$/;"	f
extractAndCopyTailRaw_multi	inc/Core/Common/cuda/TailNeighbors.hxx	/^void extractAndCopyTailRaw_multi(T* dataBuffer, T* vectors, T** d_tailRaw, size_t tailRows, int dim, int NUM_GPUS) {$/;"	f
extractFullVectorPoints	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ void extractFullVectorPoints(T* data, Point<T, SUMTYPE, Dim>* tailPoints, size_t totalRows, int exact_dim) {$/;"	f
extractHeadPoints	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ void extractHeadPoints(T* data, Point<T, SUMTYPE, Dim>* headPoints, size_t totalRows, std::unordered_set<int> headVectorIDS, int exact_dim) {$/;"	f
extractHeadPointsFromIndex	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ void extractHeadPointsFromIndex(T* data, SPTAG::VectorIndex* headIndex, Point<T, SUMTYPE, Dim>* headPoints, int exact_dim) {$/;"	f
extractTailPoints	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ void extractTailPoints(T* data, Point<T, SUMTYPE, Dim>* tailPoints, int totalRows, std::unordered_set<int> headVectorIDS, int exact_dim) {$/;"	f
fComputeDistance	inc/Core/Common/BKTree.h	/^            std::function<float(const T*, const T*, DimensionType)> fComputeDistance;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
f_createAsyncIO	src/Core/SPANN/SPANNIndex.cpp	/^        std::function<std::shared_ptr<Helper::DiskIO>(void)> f_createAsyncIO = []() -> std::shared_ptr<Helper::DiskIO> { return std::shared_ptr<Helper::DiskIO>(new Helper::AsyncFileIO()); };$/;"	m	namespace:SPTAG::SPANN	file:
f_createIO	src/Core/VectorIndex.cpp	/^std::shared_ptr<Helper::DiskIO>(*SPTAG::f_createIO)() = []() -> std::shared_ptr<Helper::DiskIO> { return std::shared_ptr<Helper::DiskIO>(new Helper::SimpleFileIO()); };$/;"	m	class:std	file:
fileexists	inc/Core/Common.h	/^inline bool fileexists(const TCHAR* path) {$/;"	f
fileexists	inc/Core/Common.h	/^inline bool fileexists(const char* path) {$/;"	f
find	inc/Helper/ConcurrentSet.h	/^                iterator find(const K& k)$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentMap
findRNG	inc/Core/Common/cuda/KNN.hxx	/^__device__ void findRNG(PointSet<T>* ps, TPtree* tptree, int KVAL, int* results, size_t min_id, size_t max_id, DistPair<SUMTYPE>* threadList, SUMTYPE (*dist_comp)(T*,T*)) {$/;"	f
findRNG_PQ	inc/Core/Common/cuda/KNN.hxx	/^__device__ void findRNG_PQ(PointSet<uint8_t>* ps, TPtree* tptree, int KVAL, int* results, size_t min_id, size_t max_id, DistPair<float>* threadList, GPU_Quantizer* quantizer) {$/;"	f
findRNG_selector	inc/Core/Common/cuda/KNN.hxx	/^__global__ void findRNG_selector(PointSet<T>* ps, TPtree* tptree, int KVAL, int* results, size_t min_id, size_t max_id, int dim, GPU_Quantizer* quantizer) {$/;"	f
findTailNeighbors	inc/Core/Common/cuda/TailNeighbors.hxx	/^__device__ void findTailNeighbors(PointSet<T>* headPS, PointSet<T>* tailPS, TPtree* tptree, int KVAL, DistPair<SUMTYPE>* results, int metric, size_t numTails, int numHeads, QueryGroup* groups, DistPair<SUMTYPE>* threadList, SUMTYPE(*dist_comp)(T*,T*)) {$/;"	f
findTailNeighbors_PQ	inc/Core/Common/cuda/TailNeighbors.hxx	/^__device__ void findTailNeighbors_PQ(PointSet<uint8_t>* headPS, PointSet<uint8_t>* tailPS, TPtree* tptree, int KVAL, DistPair<float>* results, size_t numTails, int numHeads, QueryGroup* groups, DistPair<float>* threadList, GPU_Quantizer* quantizer) {$/;"	f
findTailNeighbors_PQ_selector	inc/Core/Common/cuda/TailNeighbors.hxx	/^__global__ void findTailNeighbors_PQ_selector(PointSet<uint8_t>* headPS, PointSet<uint8_t>* tailPS, TPtree* tptree, int KVAL, DistPair<float>* results, size_t curr_batch_size, size_t numHeads, QueryGroup* groups, int dim, GPU_Quantizer* quantizer) {$/;"	f
findTailNeighbors_selector	inc/Core/Common/cuda/TailNeighbors.hxx	/^__global__ void findTailNeighbors_selector(PointSet<T>* headPS, PointSet<T>* tailPS, TPtree* tptree, int KVAL, DistPair<SUMTYPE>* results, size_t curr_batch_size, size_t numHeads, QueryGroup* groups, int dim) {$/;"	f
find_level_sum	inc/Core/Common/cuda/TPtree.hxx	/^__global__ void find_level_sum(PointSet<T>* ps, KEYTYPE* weights, int Dim, int* node_ids, KEYTYPE* split_keys, int* node_sizes, int N, int nodes_on_level, int level, int size) {$/;"	f
func	inc/Core/MultiIndexScan.h	/^        float (*func)(std::vector<float>);$/;"	m	class:SPTAG::MultiIndexScan
fwdLUTs	inc/Core/MultiIndexScan.h	/^        std::vector<std::shared_ptr<VectorIndex>> fwdLUTs;$/;"	m	class:SPTAG::MultiIndexScan
g_edgeComparer	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            static EdgeCompare g_edgeComparer;$/;"	m	struct:SPTAG::SPANN::Selection
g_edgeComparer	src/BalancedDataPartition/main.cpp	/^EdgeCompare g_edgeComparer;$/;"	v
g_edgeComparer	src/Core/SPANN/SPANNIndex.cpp	/^        EdgeCompare Selection::g_edgeComparer;$/;"	m	class:SPTAG::SPANN::Selection	file:
g_service	src/Aggregator/main.cpp	/^SPTAG::Aggregator::AggregatorService g_service;$/;"	v
g_service	src/Server/main.cpp	/^SPTAG::Service::SearchService g_service;$/;"	v
g_spaceCount	inc/Core/SPANN/IExtraSearcher.h	/^            static std::atomic_int g_spaceCount;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
get	inc/Helper/ThreadPool.h	/^            bool get(Job*& j)$/;"	f	class:SPTAG::Helper::ThreadPool
getCoord	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ T getCoord(int idx) {$/;"	f	class:TransposePoint
getCoord	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ uint32_t getCoord(int idx) {$/;"	f	class:TransposePoint
getElapsedMin	inc/SSDServing/Utils.h	/^                double getElapsedMin() {$/;"	f	class:SPTAG::SSDServing::Utils::StopW
getElapsedMs	inc/SSDServing/Utils.h	/^                double getElapsedMs() {$/;"	f	class:SPTAG::SSDServing::Utils::StopW
getElapsedMsIndependent	inc/Core/SPANN/ExtraFullGraphSearcher.h	49;"	d
getElapsedMsIndependent	inc/SSDServing/SSDIndex.h	168;"	d
getElapsedMsIndependent	src/Helper/AsyncFileReader.cpp	89;"	d	file:
getElapsedSec	inc/SSDServing/Utils.h	/^                double getElapsedSec() {$/;"	f	class:SPTAG::SSDServing::Utils::StopW
getElapsedUsExt	inc/Extension/Locks.hh	65;"	d
getMinInterval	inc/SSDServing/Utils.h	/^            double getMinInterval(std::chrono::steady_clock::time_point start, std::chrono::steady_clock::time_point end) {$/;"	f	namespace:SPTAG::SSDServing::Utils
getMsInterval	inc/SSDServing/Utils.h	/^            double getMsInterval(std::chrono::steady_clock::time_point start, std::chrono::steady_clock::time_point end) {$/;"	f	namespace:SPTAG::SSDServing::Utils
getSecInterval	inc/SSDServing/Utils.h	/^            double getSecInterval(std::chrono::steady_clock::time_point start, std::chrono::steady_clock::time_point end) {$/;"	f	namespace:SPTAG::SSDServing::Utils
getTailNeighborsTPT	inc/Core/Common/cuda/TailNeighbors.hxx	/^void getTailNeighborsTPT(T* vectors, SPTAG::SizeType N, SPTAG::VectorIndex* headIndex, std::unordered_set<int>& headVectorIDS, int dim, int RNG_SIZE, int numThreads, int NUM_TREES, int LEAF_SIZE, int metric, int NUM_GPUS, Edge* selections) {$/;"	f
getVal	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ int8_t getVal(int idx) {$/;"	f	class:Point
getVec	inc/Core/Common/cuda/Distance.hxx	/^  __forceinline__ __device__ T* getVec(size_t idx) {$/;"	f	class:PointSet
get_query_groups	inc/Core/Common/cuda/TailNeighbors.hxx	/^__host__ void get_query_groups(QueryGroup* groups, TPtree* tptree, PointSet<T>* queries, int N, int num_groups, int* queryMem, int NUM_BLOCKS, int NUM_THREADS, int dim) {$/;"	f
globalCache	src/Helper/AsyncFileReader.cpp	/^std::unique_ptr<SPTAG::EXT::CacheFifoSpannMt> globalCache;$/;"	v
globalStatQPS	inc/SSDServing/SSDIndex.h	/^double globalStatQPS;$/;"	v
globalStatQueryQPS	inc/SSDServing/SSDIndex.h	/^double globalStatQueryQPS;$/;"	v
globalStatWarmupQPS	inc/SSDServing/SSDIndex.h	/^double globalStatWarmupQPS;$/;"	v
gpu_edgeComparer	inc/Core/Common/cuda/TailNeighbors.hxx	/^} gpu_edgeComparer;$/;"	v	typeref:struct:GPU_EdgeCompare
handle	inc/Helper/AsyncFileReader.h	/^            void* handle() $/;"	f	class:SPTAG::Helper::RequestQueue
handle	inc/Helper/AsyncFileReader.h	/^            void* handle() {$/;"	f	class:SPTAG::Helper::RequestQueue
hash_func	inc/Core/Common/FineGrainedLock.h	/^            inline unsigned hash_func(unsigned idx) const$/;"	f	class:SPTAG::COMMON::FineGrainedLock
hash_func	inc/Core/Common/WorkSpace.h	/^            inline unsigned hash_func(unsigned idx, int poolSize)$/;"	f	class:SPTAG::COMMON::OptHashPosVector
hash_func2	inc/Core/Common/WorkSpace.h	/^            inline unsigned hash_func2(unsigned idx, int poolSize, int loop)$/;"	f	class:SPTAG::COMMON::OptHashPosVector
heap	inc/Core/Common/Heap.h	/^            std::unique_ptr<T[]> heap;$/;"	m	class:SPTAG::COMMON::Heap
heapify	inc/Core/Common/Heap.h	/^            void heapify()$/;"	f	class:SPTAG::COMMON::Heap
heapify	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __forceinline__ __device__ void heapify() {$/;"	f	class:ThreadHeap
heapifyAt	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __forceinline__ __device__ void heapifyAt(int idx) {$/;"	f	class:ThreadHeap
id	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    int id;$/;"	m	class:Point
idx	inc/Core/Common/cuda/ThreadHeap.hxx	/^    int idx;$/;"	m	class:DistPair
incBlocks	inc/Core/Common/Dataset.h	/^            std::vector<T*> incBlocks;$/;"	m	class:SPTAG::COMMON::Dataset
incRows	inc/Core/Common/Dataset.h	/^            SizeType incRows = 0;$/;"	m	class:SPTAG::COMMON::Dataset
indexIters	inc/Core/MultiIndexScan.h	/^        std::vector<std::shared_ptr<ResultIterator>> indexIters;$/;"	m	class:SPTAG::MultiIndexScan
init	inc/Helper/ThreadPool.h	/^            void init(int numberOfThreads = 1)$/;"	f	class:SPTAG::Helper::ThreadPool
init_mem	inc/Core/Common/cuda/TailNeighbors.hxx	/^  __device__ void init_mem(size_t N, int num_groups, int* mem) {$/;"	f	class:QueryGroup
initialize	inc/Core/Common/cuda/TPtree.hxx	/^    __host__ void initialize(int N_, int levels_, int Dim_) {$/;"	f	class:TPtree
initialize	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void initialize() {$/;"	f	class:ThreadHeap
initialize	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void initialize(DistPair<SUMTYPE>* v, int _kval) {$/;"	f	class:ThreadHeap
insert	inc/Core/Common/Heap.h	/^            void insert(const T& value)$/;"	f	class:SPTAG::COMMON::Heap
insert	inc/Core/Common/WorkSpace.h	/^            bool insert(float dist) {$/;"	f	class:SPTAG::COMMON::DistPriorityQueue
insert	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void insert(float newDist, int newIdx) {$/;"	f	class:ThreadHeap
insert	inc/Helper/ConcurrentSet.h	/^                void insert(const T& key)$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentSet
insertAt	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void insertAt(float newDist, int newIdx, int idx) {$/;"	f	class:ThreadHeap
iterator	inc/Core/SearchQuery.h	/^    typedef BasicResult* iterator;$/;"	t	class:SPTAG::QueryResult
iterator	inc/Helper/ConcurrentSet.h	/^                typedef typename std::unordered_map<K, V>::iterator iterator;$/;"	t	class:SPTAG::Helper::Concurrent::ConcurrentMap
jobsize	inc/Helper/ThreadPool.h	/^            size_t jobsize()$/;"	f	class:SPTAG::Helper::ThreadPool
k	inc/Core/MultiIndexScan.h	/^        unsigned int k;$/;"	m	class:SPTAG::MultiIndexScan
l2	inc/Core/Common/cuda/Distance.hxx	/^__forceinline__ __device__ SUMTYPE l2(T* aVec, T* bVec) {$/;"	f
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE l2(Point<T, SUMTYPE, Dim>* other) {$/;"	f	class:Point
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE l2(Point<int8_t, SUMTYPE, Dim>* other) {$/;"	f	class:Point
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE l2(Point<uint8_t, SUMTYPE, Dim>* other) {$/;"	f	class:Point
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ __host__ SUMTYPE l2(Point<T, SUMTYPE, Dim>* other) {$/;"	f	class:TransposePoint
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ __host__ SUMTYPE l2(Point<int8_t, SUMTYPE, Dim>* other) {$/;"	f	class:TransposePoint
l2	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __forceinline__ __device__ __host__ SUMTYPE l2(Point<uint8_t, SUMTYPE, Dim>* other) {$/;"	f	class:TransposePoint
l2_block	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ SUMTYPE l2_block(Point<T, SUMTYPE, Dim>* other) {$/;"	f	class:Point
l2_block	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE l2_block(Point<int8_t, SUMTYPE, Dim>* other) { return 0; }$/;"	f	class:Point
l2_block	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ __host__ SUMTYPE l2_block(Point<uint8_t, SUMTYPE, Dim>* other) { return 0; }$/;"	f	class:Point
label	inc/Core/Common/BKTree.h	/^            int* label;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
lastlevel	inc/Core/Common/Heap.h	/^            int lastlevel;$/;"	m	class:SPTAG::COMMON::Heap
leafSize	inc/SSDServing/SelectHead.h	/^                int leafSize;$/;"	m	struct:SPTAG::SSDServing::SelectHead::BKTNodeInfo
leaf_points	inc/Core/Common/cuda/TPtree.hxx	/^    int* leaf_points; \/\/ IDs of points in each leaf. Only needed if we dont permute.$/;"	m	class:TPtree
leafs	inc/Core/Common/cuda/TPtree.hxx	/^    LeafNode* leafs; \/\/ size and offset of each leaf node$/;"	m	class:TPtree
left	inc/Core/Common/KDTree.h	/^            SizeType left;$/;"	m	struct:SPTAG::COMMON::KDTNode
length	inc/Core/Common/Heap.h	/^            int length;$/;"	m	class:SPTAG::COMMON::Heap
levels	inc/Core/Common/cuda/TPtree.hxx	/^    int levels;$/;"	m	class:TPtree
listEleCount	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^                int listEleCount = 0;$/;"	m	struct:SPTAG::SPANN::ExtraFullGraphSearcher::ListInfo
listEleCount	src/Extension/CacheFifoMt.cpp	/^    int listEleCount = 0;$/;"	m	struct:ListInfo	file:
listEleCount	src/Extension/CacheLfuMt.cpp	/^    int listEleCount = 0;$/;"	m	struct:ListInfo	file:
listEleCount	src/Extension/CacheLruMt.cpp	/^    int listEleCount = 0;$/;"	m	struct:ListInfo	file:
listEleCount	src/Extension/CacheLruWeak.cpp	/^    int listEleCount = 0;$/;"	m	struct:ListInfo	file:
listOffset	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^                std::uint64_t listOffset = 0;$/;"	m	struct:SPTAG::SPANN::ExtraFullGraphSearcher::ListInfo
listOffset	src/Extension/CacheFifoMt.cpp	/^    std::uint64_t listOffset = 0;$/;"	m	struct:ListInfo	file:
listOffset	src/Extension/CacheLfuMt.cpp	/^    std::uint64_t listOffset = 0;$/;"	m	struct:ListInfo	file:
listOffset	src/Extension/CacheLruMt.cpp	/^    std::uint64_t listOffset = 0;$/;"	m	struct:ListInfo	file:
listOffset	src/Extension/CacheLruWeak.cpp	/^    std::uint64_t listOffset = 0;$/;"	m	struct:ListInfo	file:
listPageCount	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^                std::uint16_t listPageCount = 0;$/;"	m	struct:SPTAG::SPANN::ExtraFullGraphSearcher::ListInfo
listPageCount	src/Extension/CacheFifoMt.cpp	/^    std::uint16_t listPageCount = 0;$/;"	m	struct:ListInfo	file:
listPageCount	src/Extension/CacheLfuMt.cpp	/^    std::uint16_t listPageCount = 0;$/;"	m	struct:ListInfo	file:
listPageCount	src/Extension/CacheLruMt.cpp	/^    std::uint16_t listPageCount = 0;$/;"	m	struct:ListInfo	file:
listPageCount	src/Extension/CacheLruWeak.cpp	/^    std::uint16_t listPageCount = 0;$/;"	m	struct:ListInfo	file:
listTotalBytes	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^                std::size_t listTotalBytes = 0;$/;"	m	struct:SPTAG::SPANN::ExtraFullGraphSearcher::ListInfo
listTotalBytes	src/Extension/CacheFifoMt.cpp	/^    std::size_t listTotalBytes = 0;$/;"	m	struct:ListInfo	file:
listTotalBytes	src/Extension/CacheLfuMt.cpp	/^    std::size_t listTotalBytes = 0;$/;"	m	struct:ListInfo	file:
listTotalBytes	src/Extension/CacheLruMt.cpp	/^    std::size_t listTotalBytes = 0;$/;"	m	struct:ListInfo	file:
listTotalBytes	src/Extension/CacheLruWeak.cpp	/^    std::size_t listTotalBytes = 0;$/;"	m	struct:ListInfo	file:
listdir	src/Core/VectorIndex.cpp	/^    void listdir(std::string path, std::vector<std::string>& files) {$/;"	f	namespace:SPTAG
load	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ void load(vector<T> data) {$/;"	f	class:Point
load	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ void load(vector<int8_t> data) {$/;"	f	class:Point
load	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ void load(vector<uint8_t> data) {$/;"	f	class:Point
load	inc/Helper/LockFree.h	/^                bool load(std::shared_ptr<Helper::DiskIO> in, size_t length)$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
loadChunk	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ __device__ void loadChunk(T* data, int exact_dim) {$/;"	f	class:Point
loadChunk	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ __device__ void loadChunk(int8_t* data, int exact_dims) {$/;"	f	class:Point
loadChunk	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ __device__ void loadChunk(uint8_t* data, int exact_dims) {$/;"	f	class:Point
loadPoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ void loadPoint(Point<T, SUMTYPE, Dim> p) {$/;"	f	class:TransposePoint
loadPoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ void loadPoint(Point<int8_t, SUMTYPE, Dim> p) {$/;"	f	class:TransposePoint
loadPoint	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ void loadPoint(Point<uint8_t, SUMTYPE, Dim> p) {$/;"	f	class:TransposePoint
load_mem_sorted	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void load_mem_sorted(Point<T, SUMTYPE,Dim>* data, int* mem, Point<T,SUMTYPE,Dim> query, int metric) {$/;"	f	class:ThreadHeap
log_level_t	inc/Core/Common/cuda/log.hxx	/^enum log_level_t {$/;"	g
lower_bound	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            size_t lower_bound(SizeType node)$/;"	f	struct:SPTAG::SPANN::Selection
m_BlockSize	inc/Core/Common/PQQuantizer.h	/^            SizeType m_BlockSize;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_BlockSize	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    size_t m_BlockSize;$/;"	m	class:__anon1::GPU_Quantizer
m_DimPerSubvector	inc/Core/Common/PQQuantizer.h	/^            DimensionType m_DimPerSubvector;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_DimPerSubvector	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    int m_DimPerSubvector;$/;"	m	class:__anon1::GPU_Quantizer
m_DistIndexCalc	inc/Core/Common/PQQuantizer.h	/^        inline SizeType PQQuantizer<T>::m_DistIndexCalc(SizeType i, SizeType j, SizeType k) const {$/;"	f	class:SPTAG::COMMON::PQQuantizer
m_DistIndexCalc	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __device__ inline size_t m_DistIndexCalc(size_t i, size_t j, size_t k) {$/;"	f	class:__anon1::GPU_Quantizer
m_DistanceTables	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    float* m_DistanceTables; \/\/ Don't need L2 and cosine tables, just copy from correct tables on host$/;"	m	class:__anon1::GPU_Quantizer
m_EnableADC	inc/Core/Common/PQQuantizer.h	/^            bool m_EnableADC;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_InitMatrixTranspose	inc/Core/Common/OPQQuantizer.h	/^        void OPQQuantizer<T>::m_InitMatrixTranspose() {$/;"	f	class:SPTAG::COMMON::OPQQuantizer
m_K	src/IndexSearcher/main.cpp	/^    int m_K = 32;$/;"	m	class:SearcherOptions	file:
m_KmeansLambda	inc/Quantizer/Training.h	/^    float m_KmeansLambda;$/;"	m	class:QuantizerOptions
m_KsPerSubvector	inc/Core/Common/PQQuantizer.h	/^            SizeType m_KsPerSubvector;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_KsPerSubvector	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    size_t m_KsPerSubvector;$/;"	m	class:__anon1::GPU_Quantizer
m_L2DistanceTables	inc/Core/Common/PQQuantizer.h	/^            std::unique_ptr<const float[]> m_L2DistanceTables;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_NGQueue	inc/Core/Common/WorkSpace.h	/^            Heap<NodeDistPair> m_NGQueue;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_NumSubvectors	inc/Core/Common/PQQuantizer.h	/^            DimensionType m_NumSubvectors;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_NumSubvectors	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    int m_NumSubvectors;$/;"	m	class:__anon1::GPU_Quantizer
m_OPQMatrix	inc/Core/Common/OPQQuantizer.h	/^            std::unique_ptr<OPQMatrixType[]> m_OPQMatrix;$/;"	m	class:SPTAG::COMMON::OPQQuantizer
m_OPQMatrix_T	inc/Core/Common/OPQQuantizer.h	/^            std::unique_ptr<OPQMatrixType[]> m_OPQMatrix_T;$/;"	m	class:SPTAG::COMMON::OPQQuantizer
m_Results	inc/Core/Common/WorkSpace.h	/^            DistPriorityQueue m_Results;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_SPTQueue	inc/Core/Common/WorkSpace.h	/^            Heap<NodeDistPair> m_SPTQueue;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_VectorMatrixMultiply	inc/Core/Common/OPQQuantizer.h	/^        inline void OPQQuantizer<T>::m_VectorMatrixMultiply(OPQMatrixType* mat, const OPQMatrixType* vec, O* mat_vec) const$/;"	f	class:SPTAG::COMMON::OPQQuantizer
m_abort	inc/Helper/ThreadPool.h	/^            Abort m_abort;$/;"	m	class:SPTAG::Helper::ThreadPool
m_acceptor	inc/Socket/Server.h	/^    boost::asio::ip::tcp::acceptor m_acceptor;$/;"	m	class:SPTAG::Socket::Server
m_addCountForRebuild	inc/Core/BKT/Index.h	/^            int m_addCountForRebuild;$/;"	m	class:SPTAG::BKT::Index
m_addCountForRebuild	inc/Core/KDT/Index.h	/^            int m_addCountForRebuild;$/;"	m	class:SPTAG::KDT::Index
m_address	inc/Aggregator/AggregatorContext.h	/^    std::string m_address;$/;"	m	struct:SPTAG::Aggregator::RemoteMachine
m_aggregatorCallbackManager	inc/Aggregator/AggregatorService.h	/^    Socket::ResourceManager<AggregatorCallback> m_aggregatorCallbackManager;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_aggregatorContext	inc/Aggregator/AggregatorService.h	/^    std::shared_ptr<AggregatorContext> m_aggregatorContext;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_allIndexResults	inc/Socket/RemoteSearchQuery.h	/^    std::vector<IndexSearchResult> m_allIndexResults;$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
m_analyzeOnly	inc/Core/SPANN/Options.h	/^            bool m_analyzeOnly;$/;"	m	class:SPTAG::SPANN::Options
m_arguments	inc/Helper/ArgumentsParser.h	/^    std::vector<std::shared_ptr<IArgument>> m_arguments;$/;"	m	class:SPTAG::Helper::ArgumentsParser
m_asyncLatency0	inc/Core/SPANN/IExtraSearcher.h	/^            double m_asyncLatency0;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_asyncLatency1	inc/Core/SPANN/IExtraSearcher.h	/^            double m_asyncLatency1;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_asyncLatency2	inc/Core/SPANN/IExtraSearcher.h	/^            double m_asyncLatency2;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_bOldVersion	inc/Core/Common/KDTree.h	/^            bool m_bOldVersion;$/;"	m	class:SPTAG::COMMON::KDTree
m_bReady	inc/Core/VectorIndex.h	/^    bool m_bReady = false;$/;"	m	class:SPTAG::VectorIndex
m_base	inc/Core/Common/OPQQuantizer.h	/^            const int m_base = COMMON::Utils::GetBase<OPQMatrixType>() * COMMON::Utils::GetBase<OPQMatrixType>();$/;"	m	class:SPTAG::COMMON::OPQQuantizer
m_batch	inc/Core/ResultIterator.h	/^	int m_batch = 1;$/;"	m	class:ResultIterator
m_batch	src/IndexSearcher/main.cpp	/^    int m_batch = 10000;$/;"	m	class:SearcherOptions	file:
m_batches	inc/Core/SPANN/Options.h	/^            int m_batches;$/;"	m	class:SPTAG::SPANN::Options
m_bfs	inc/Core/Common/BKTree.h	/^            int m_iTreeNumber, m_iBKTKmeansK, m_iBKTLeafSize, m_iSamples, m_bfs;$/;"	m	class:SPTAG::COMMON::BKTree
m_blockSize	inc/Helper/LockFree.h	/^                std::uint64_t m_blockSize;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_blockSizeEx	inc/Helper/LockFree.h	/^                int m_blockSizeEx;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_blocks	inc/Helper/LockFree.h	/^                std::vector<T*> m_blocks;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_bodyLength	inc/Socket/Packet.h	/^    std::uint32_t m_bodyLength;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
m_buffer	inc/Extension/CacheLruWeak.hh	/^            uint8_t* m_buffer;$/;"	m	class:SPTAG::EXT::CacheItem
m_buffer	inc/Extension/CacheLruWeak.hh	/^    : m_size(p_other.m_size), m_key(p_other.m_key), m_buffer(p_other.m_buffer)$/;"	f
m_buffer	inc/Helper/DiskIO.h	/^            char* m_buffer;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_buffer	inc/Socket/Packet.h	/^    std::shared_ptr<std::uint8_t> m_buffer;$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus::Packet
m_bufferCapacity	inc/Socket/Packet.h	/^    std::uint32_t m_bufferCapacity;$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus::Packet
m_buildHead	inc/Core/SPANN/Options.h	/^            bool m_buildHead;$/;"	m	class:SPTAG::SPANN::Options
m_buildSsdIndex	inc/Core/SPANN/Options.h	/^            bool m_buildSsdIndex;$/;"	m	class:SPTAG::SPANN::Options
m_builderConfigFile	src/IndexBuilder/main.cpp	/^    std::string m_builderConfigFile;$/;"	m	class:BuilderOptions	file:
m_byte_target	inc/Core/ResultIterator.h	/^	ByteArray m_byte_target;$/;"	m	class:ResultIterator
m_cacheCapacity	inc/Extension/CacheFifoMt.hh	/^            const size_t m_cacheCapacity;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_cacheCapacity	inc/Extension/CacheLfuMt.hh	/^            const size_t m_cacheCapacity;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_cacheCapacity	inc/Extension/CacheLruMt.hh	/^            const size_t m_cacheCapacity;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_cacheCapacity	inc/Extension/CacheLruWeak.hh	/^            const size_t m_cacheCapacity;$/;"	m	class:SPTAG::EXT::CacheLru
m_cachedItems	inc/Extension/CacheFifoMt.hh	/^            std::unordered_map<uintptr_t, typename std::list<CacheItem<uintptr_t>>::iterator> m_cachedItems;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_cachedItems	inc/Extension/CacheLfuMt.hh	/^            std::unordered_map<uintptr_t, CacheItemWrapper> m_cachedItems;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_cachedItems	inc/Extension/CacheLruMt.hh	/^            std::unordered_map<uintptr_t, typename std::list<CacheItem<uintptr_t>>::iterator> m_cachedItems;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_cachedItems	inc/Extension/CacheLruWeak.hh	/^            std::unordered_map<K, typename std::list<CacheItem<K>>::iterator> m_cachedItems;$/;"	m	class:SPTAG::EXT::CacheLru
m_calcStd	inc/Core/SPANN/Options.h	/^            bool m_calcStd;$/;"	m	class:SPTAG::SPANN::Options
m_callback	inc/Helper/DiskIO.h	/^            std::function<void(bool)> m_callback;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_callback	inc/Server/SearchExecutor.h	/^    CallBack m_callback;$/;"	m	class:SPTAG::Service::SearchExecutor
m_callback	inc/Socket/ResourceManager.h	/^        TimeoutCallback m_callback;$/;"	m	struct:SPTAG::Socket::ResourceManager::ResourceItem
m_callbackManager	inc/Client/ClientWrapper.h	/^    Socket::ResourceManager<Callback> m_callbackManager;$/;"	m	class:SPTAG::Client::ClientWrapper
m_capacity	inc/Helper/AsyncFileReader.h	/^            int m_front, m_end, m_capacity;$/;"	m	class:SPTAG::Helper::RequestQueue
m_centers	inc/Aggregator/AggregatorContext.h	/^	std::shared_ptr<VectorSet> m_centers;$/;"	m	class:SPTAG::Aggregator::AggregatorContext
m_centers	inc/Aggregator/AggregatorSettings.h	/^	std::string m_centers;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_centers	src/BalancedDataPartition/main.cpp	/^    std::string m_centers = "centers.bin";$/;"	m	class:PartitionOptions	file:
m_check	inc/Core/SPANN/IExtraSearcher.h	/^            int m_check;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_client	inc/Client/ClientWrapper.h	/^    std::unique_ptr<Socket::Client> m_client;$/;"	m	class:SPTAG::Client::ClientWrapper
m_clock	inc/Socket/ResourceManager.h	/^    std::chrono::high_resolution_clock m_clock;$/;"	m	class:SPTAG::Socket::ResourceManager
m_closurefactor	src/BalancedDataPartition/main.cpp	/^    float m_closurefactor = 1.2f;$/;"	m	class:PartitionOptions	file:
m_clusterNum	src/BalancedDataPartition/main.cpp	/^    int m_clusterNum;$/;"	m	class:PartitionOptions	file:
m_clusterassign	src/BalancedDataPartition/main.cpp	/^    int m_clusterassign = 1;$/;"	m	class:PartitionOptions	file:
m_codebooks	inc/Core/Common/PQQuantizer.h	/^            std::unique_ptr<T[]> m_codebooks;$/;"	m	class:SPTAG::COMMON::PQQuantizer
m_codebooks	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    void* m_codebooks; \/\/ Codebooks to reconstruct the original vectors$/;"	m	class:__anon1::GPU_Quantizer
m_col	inc/Helper/AsyncFileReader.h	/^                CallbackOverLapped m_col;$/;"	m	struct:SPTAG::Helper::DiskUtils::PrioritizedDiskFileReaderResource
m_cond	inc/Helper/ThreadPool.h	/^            std::condition_variable m_cond;$/;"	m	class:SPTAG::Helper::ThreadPool
m_configFile	src/Server/SearchService.cpp	/^    std::string m_configFile;$/;"	m	class:__anon3::Local::SerivceCmdOptions	file:
m_connection	inc/Socket/ConnectionManager.h	/^        Connection::Ptr m_connection;$/;"	m	struct:SPTAG::Socket::ConnectionManager::ConnectionItem
m_connectionCount	inc/Socket/ConnectionManager.h	/^    std::atomic<std::uint32_t> m_connectionCount;$/;"	m	class:SPTAG::Socket::ConnectionManager
m_connectionID	inc/Aggregator/AggregatorContext.h	/^    Socket::ConnectionID m_connectionID;$/;"	m	struct:SPTAG::Aggregator::RemoteMachine
m_connectionID	inc/Socket/Packet.h	/^    ConnectionID m_connectionID;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
m_connectionManager	inc/Socket/Client.h	/^    std::shared_ptr<ConnectionManager> m_connectionManager;$/;"	m	class:SPTAG::Socket::Client
m_connectionManager	inc/Socket/Server.h	/^    std::shared_ptr<ConnectionManager> m_connectionManager;$/;"	m	class:SPTAG::Socket::Server
m_connections	inc/Client/ClientWrapper.h	/^    std::vector<ConnectionPair> m_connections;$/;"	m	class:SPTAG::Client::ClientWrapper
m_connections	inc/Socket/ConnectionManager.h	/^    std::array<ConnectionItem, c_connectionPoolSize> m_connections;$/;"	m	class:SPTAG::Socket::ConnectionManager
m_count	inc/Core/Common/WorkSpace.h	/^            int m_count;$/;"	m	class:SPTAG::COMMON::DistPriorityQueue
m_count	inc/Core/MetadataSet.h	/^    SizeType m_count;$/;"	m	class:SPTAG::FileMetadataSet
m_count	inc/Core/MetadataSet.h	/^    SizeType m_count;$/;"	m	class:SPTAG::MemMetadataSet
m_currBSPTQueue	inc/Core/Common/WorkSpace.h	/^            Heap<NodeDistPair> m_currBSPTQueue;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_currentSize	inc/Extension/CacheLruMt.hh	/^            std::atomic_ulong m_currentSize;$/;"	m	class:SPTAG::EXT::CacheStatMt
m_currentSize	inc/Extension/CacheLruWeak.hh	/^            size_t m_currentSize;$/;"	m	class:SPTAG::EXT::CacheLru
m_currentSize	inc/Extension/CacheLruWeak.hh	/^            size_t m_currentSize;$/;"	m	class:SPTAG::EXT::CacheStatWeak
m_cv	inc/Helper/Concurrent.h	/^    std::condition_variable m_cv;$/;"	m	class:SPTAG::Helper::Concurrent::WaitSignal
m_data	inc/Core/BKT/Index.h	/^                COMMON::Dataset<T>* m_data;$/;"	m	class:SPTAG::BKT::Index::RebuildJob
m_data	inc/Core/Common/Labelset.h	/^            Dataset<std::int8_t> m_data;$/;"	m	class:SPTAG::COMMON::Labelset
m_data	inc/Core/Common/WorkSpace.h	/^            std::unique_ptr<float[]> m_data;$/;"	m	class:SPTAG::COMMON::DistPriorityQueue
m_data	inc/Core/CommonDataStructure.h	/^    T* m_data;$/;"	m	class:SPTAG::Array
m_data	inc/Core/KDT/Index.h	/^                COMMON::Dataset<T>* m_data;$/;"	m	class:SPTAG::KDT::Index::RebuildJob
m_data	inc/Core/VectorSet.h	/^    ByteArray m_data;$/;"	m	class:SPTAG::BasicVectorSet
m_data	inc/Helper/AsyncFileReader.h	/^                void* m_data;$/;"	m	struct:SPTAG::Helper::DiskUtils::CallbackOverLapped
m_data	inc/Helper/ConcurrentSet.h	/^                std::unordered_map<K, V> m_data;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentMap
m_data	inc/Helper/ConcurrentSet.h	/^                std::unordered_set<T> m_data;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentSet
m_data	inc/Helper/DynamicNeighbors.h	/^        std::unique_ptr<int[]> m_data;$/;"	m	class:SPTAG::Helper::DynamicNeighborsSet
m_dataAddLock	inc/Core/BKT/Index.h	/^            std::mutex m_dataAddLock; \/\/ protect data and graph$/;"	m	class:SPTAG::BKT::Index
m_dataAddLock	inc/Core/KDT/Index.h	/^            std::mutex m_dataAddLock; \/\/ protect data and graph$/;"	m	class:SPTAG::KDT::Index
m_dataDeleteLock	inc/Core/BKT/Index.h	/^            std::shared_timed_mutex m_dataDeleteLock;$/;"	m	class:SPTAG::BKT::Index
m_dataDeleteLock	inc/Core/KDT/Index.h	/^            std::shared_timed_mutex m_dataDeleteLock;$/;"	m	class:SPTAG::KDT::Index
m_dataFile	src/IndexSearcher/main.cpp	/^    std::string m_dataFile = "";$/;"	m	class:SearcherOptions	file:
m_dataFileType	src/IndexSearcher/main.cpp	/^    VectorFileType m_dataFileType = VectorFileType::DEFAULT;$/;"	m	class:SearcherOptions	file:
m_dataHolder	inc/Core/CommonDataStructure.h	/^    std::shared_ptr<T> m_dataHolder;$/;"	m	class:SPTAG::Array
m_dataHolder	inc/Server/QueryParser.h	/^    ByteArray m_dataHolder;$/;"	m	class:SPTAG::Service::QueryParser
m_dataUpdateLock	inc/Core/Common/NeighborhoodGraph.h	/^            FineGrainedLock m_dataUpdateLock;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_datasetCapacity	inc/Core/SPANN/Options.h	/^            int m_datasetCapacity;$/;"	m	class:SPTAG::SPANN::Options
m_datasetRowsInBlock	inc/Core/SPANN/Options.h	/^            int m_datasetRowsInBlock;$/;"	m	class:SPTAG::SPANN::Options
m_deadlineTimer	inc/Socket/Client.h	/^    boost::asio::deadline_timer m_deadlineTimer;$/;"	m	class:SPTAG::Socket::Client
m_debug	inc/Quantizer/Training.h	/^    bool m_debug;$/;"	m	class:QuantizerOptions
m_debugBuildInternalResultNum	inc/Core/SPANN/Options.h	/^            int m_debugBuildInternalResultNum;$/;"	m	class:SPTAG::SPANN::Options
m_debugQuery	src/IndexSearcher/main.cpp	/^    int m_debugQuery = -1;$/;"	m	class:SearcherOptions	file:
m_decompressBuffer	inc/Core/SPANN/IExtraSearcher.h	/^            PageBuffer<std::uint8_t> m_decompressBuffer;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_deduper	inc/Core/SPANN/IExtraSearcher.h	/^            COMMON::OptHashPosVector m_deduper;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_defaultMaxResultNumber	inc/Server/ServiceSettings.h	/^    SizeType m_defaultMaxResultNumber;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_delayPending	inc/Extension/CacheLruWeak.hh	/^            bool m_delayPending;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
m_delayedNumToCache	inc/Extension/CacheFifoMt.hh	/^                size_t m_delayedNumToCache;$/;"	m	struct:SPTAG::EXT::CacheFifoSpannMt::PendingInfo
m_delayedNumToCache	inc/Extension/CacheLfuMt.hh	/^                size_t m_delayedNumToCache;$/;"	m	struct:SPTAG::EXT::CacheLfuSpannMt::PendingInfo
m_delayedNumToCache	inc/Extension/CacheLruMt.hh	/^                size_t m_delayedNumToCache;$/;"	m	struct:SPTAG::EXT::CacheLruSpannMt::PendingInfo
m_delayedNumToCache	inc/Extension/CacheLruWeak.hh	/^            size_t m_delayedNumToCache;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
m_delayedToCache	inc/Extension/CacheFifoMt.hh	/^                std::unique_ptr<std::vector<bool>> m_delayedToCache;$/;"	m	struct:SPTAG::EXT::CacheFifoSpannMt::PendingInfo
m_delayedToCache	inc/Extension/CacheLfuMt.hh	/^                std::unique_ptr<std::vector<bool>> m_delayedToCache;$/;"	m	struct:SPTAG::EXT::CacheLfuSpannMt::PendingInfo
m_delayedToCache	inc/Extension/CacheLruMt.hh	/^                std::unique_ptr<std::vector<bool>> m_delayedToCache;$/;"	m	struct:SPTAG::EXT::CacheLruSpannMt::PendingInfo
m_delayedToCache	inc/Extension/CacheLruWeak.hh	/^            std::unique_ptr<std::vector<bool>> m_delayedToCache;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
m_delayedToCacheArr	inc/Extension/CacheFifoMt.hh	/^            std::array<struct PendingInfo, MAX_NTHREADS> m_delayedToCacheArr;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_delayedToCacheArr	inc/Extension/CacheLfuMt.hh	/^            std::array<struct PendingInfo, MAX_NTHREADS> m_delayedToCacheArr;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_delayedToCacheArr	inc/Extension/CacheLruMt.hh	/^            std::array<struct PendingInfo, MAX_NTHREADS> m_delayedToCacheArr;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_deleteHeadVectors	inc/Core/SPANN/Options.h	/^            bool m_deleteHeadVectors;$/;"	m	class:SPTAG::SPANN::Options
m_deleteIDFile	inc/Core/SPANN/Options.h	/^            std::string m_deleteIDFile;$/;"	m	class:SPTAG::SPANN::Options
m_deletedID	inc/Core/BKT/Index.h	/^            COMMON::Labelset m_deletedID;$/;"	m	class:SPTAG::BKT::Index
m_deletedID	inc/Core/KDT/Index.h	/^            COMMON::Labelset m_deletedID;$/;"	m	class:SPTAG::KDT::Index
m_deltaHitRatioTrace	inc/Extension/CacheLruWeak.hh	/^            std::vector<double> m_deltaHitRatioTrace;$/;"	m	class:SPTAG::EXT::CacheLru
m_description	inc/Helper/ArgumentsParser.h	/^        std::string m_description;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_dictBufferCapacity	inc/Core/SPANN/Options.h	/^            int m_dictBufferCapacity;$/;"	m	class:SPTAG::SPANN::Options
m_dim	inc/Core/SPANN/Options.h	/^            DimensionType m_dim;$/;"	m	class:SPTAG::SPANN::Options
m_dimension	inc/Core/VectorSet.h	/^    DimensionType m_dimension;$/;"	m	class:SPTAG::BasicVectorSet
m_dimension	inc/Helper/VectorSetReader.h	/^    DimensionType m_dimension;   $/;"	m	class:SPTAG::Helper::ReaderOptions
m_diskAccessCount	inc/Core/SPANN/IExtraSearcher.h	/^            int m_diskAccessCount;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_diskIOCount	inc/Core/SPANN/IExtraSearcher.h	/^            int m_diskIOCount;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_diskRequests	inc/Core/SPANN/IExtraSearcher.h	/^            std::vector<Helper::AsyncReadRequest> m_diskRequests;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_diskSectorSize	inc/Helper/AsyncFileReader.h	/^            uint32_t m_diskSectorSize;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_distCalcMethod	inc/Core/SPANN/Options.h	/^            DistCalcMethod m_distCalcMethod;$/;"	m	class:SPTAG::SPANN::Options
m_distMethod	inc/Aggregator/AggregatorSettings.h	/^	DistCalcMethod m_distMethod;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_distMethod	inc/Core/BKT/Index.h	/^                DistCalcMethod m_distMethod;$/;"	m	class:SPTAG::BKT::Index::RebuildJob
m_distMethod	src/BalancedDataPartition/main.cpp	/^    DistCalcMethod m_distMethod = DistCalcMethod::L2;$/;"	m	class:PartitionOptions	file:
m_enableADC	inc/Core/SPANN/Options.h	/^            bool m_enableADC;$/;"	m	class:SPTAG::SPANN::Options
m_enableADC	src/IndexSearcher/main.cpp	/^    bool m_enableADC = false;$/;"	m	class:SearcherOptions	file:
m_enableDataCompression	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool m_enableDataCompression;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_enableDataCompression	inc/Core/SPANN/IExtraSearcher.h	/^            bool m_enableDataCompression;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_enableDataCompression	inc/Core/SPANN/Options.h	/^            bool m_enableDataCompression;$/;"	m	class:SPTAG::SPANN::Options
m_enableDeltaEncoding	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool m_enableDeltaEncoding;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_enableDeltaEncoding	inc/Core/SPANN/Options.h	/^            bool m_enableDeltaEncoding;$/;"	m	class:SPTAG::SPANN::Options
m_enableDictTraining	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool m_enableDictTraining;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_enableDictTraining	inc/Core/SPANN/Options.h	/^            bool m_enableDictTraining;$/;"	m	class:SPTAG::SPANN::Options
m_enableLock	inc/Extension/CacheFifoMt.hh	/^            bool m_enableLock;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_enableLock	inc/Extension/CacheLfuMt.hh	/^            bool m_enableLock;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_enableLock	inc/Extension/CacheLruMt.hh	/^            bool m_enableLock;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_enableLock	src/Extension/CacheFifoMt.cpp	/^    : m_cacheCapacity(p_capacity), m_enableLock(p_enableLock)$/;"	f
m_enableLock	src/Extension/CacheLruMt.cpp	/^    : m_cacheCapacity(p_capacity), m_enableLock(p_enableLock)$/;"	f
m_enablePostingListRearrange	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool m_enablePostingListRearrange;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_enablePostingListRearrange	inc/Core/SPANN/Options.h	/^            bool m_enablePostingListRearrange;$/;"	m	class:SPTAG::SPANN::Options
m_enableSSD	inc/Core/SPANN/Options.h	/^            bool m_enableSSD;$/;"	m	class:SPTAG::SPANN::Options
m_end	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            size_t m_end;$/;"	m	struct:SPTAG::SPANN::Selection
m_end	inc/Helper/AsyncFileReader.h	/^            int m_front, m_end, m_capacity;$/;"	m	class:SPTAG::Helper::RequestQueue
m_eventOnRemoving	inc/Socket/ConnectionManager.h	/^    std::function<void(ConnectionID)> m_eventOnRemoving;$/;"	m	class:SPTAG::Socket::ConnectionManager
m_evictCount	inc/Extension/CacheLruMt.hh	/^            std::atomic_ulong m_evictCount;$/;"	m	class:SPTAG::EXT::CacheStatMt
m_evictCount	inc/Extension/CacheLruWeak.hh	/^            uint64_t m_evictCount;$/;"	m	class:SPTAG::EXT::CacheStatWeak
m_exCheck	inc/Core/SPANN/IExtraSearcher.h	/^            int m_exCheck;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_exLatency	inc/Core/SPANN/IExtraSearcher.h	/^            double m_exLatency;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_excludehead	inc/Core/SPANN/Options.h	/^            bool m_excludehead;$/;"	m	class:SPTAG::SPANN::Options
m_executionContext	inc/Server/SearchExecutor.h	/^    std::shared_ptr<SearchExecutionContext> m_executionContext;$/;"	m	class:SPTAG::Service::SearchExecutor
m_exp	inc/Core/Common/WorkSpace.h	/^            int m_exp;$/;"	m	class:SPTAG::COMMON::OptHashPosVector
m_expireTime	inc/Socket/ResourceManager.h	/^        std::chrono::time_point<std::chrono::high_resolution_clock> m_expireTime;$/;"	m	struct:SPTAG::Socket::ResourceManager::ResourceItem
m_extension	inc/Helper/DiskIO.h	/^            void* m_extension;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_extraFullGraphFile	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::string m_extraFullGraphFile;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_extraSearcher	inc/Core/SPANN/Index.h	/^            std::shared_ptr<IExtraSearcher> m_extraSearcher;$/;"	m	class:SPTAG::SPANN::Index
m_extraWorkspace	inc/Core/SPANN/SPANNResultIterator.h	/^			std::unique_ptr<SPANN::ExtraWorkSpace> m_extraWorkspace;$/;"	m	class:SPTAG::SPANN::SPANNResultIterator
m_extractMetadata	inc/Server/SearchExecutionContext.h	/^    bool m_extractMetadata;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_fBalanceFactor	inc/Core/Common/BKTree.h	/^            float m_fBalanceFactor;$/;"	m	class:SPTAG::COMMON::BKTree
m_fBalanceFactor	inc/Core/SPANN/Options.h	/^            float m_fBalanceFactor;$/;"	m	class:SPTAG::SPANN::Options
m_fCEFScale	inc/Core/Common/NeighborhoodGraph.h	/^            float m_fNeighborhoodScale, m_fCEFScale, m_fRNGFactor;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_fComputeDistance	inc/Core/BKT/Index.h	/^            std::function<float(const T*, const T*, DimensionType)> m_fComputeDistance;$/;"	m	class:SPTAG::BKT::Index
m_fComputeDistance	inc/Core/KDT/Index.h	/^            std::function<float(const T*, const T*, DimensionType)> m_fComputeDistance;$/;"	m	class:SPTAG::KDT::Index
m_fComputeDistance	inc/Core/SPANN/Index.h	/^            std::function<float(const T*, const T*, DimensionType)> m_fComputeDistance;$/;"	m	class:SPTAG::SPANN::Index
m_fDeletePercentageForRefine	inc/Core/BKT/Index.h	/^            float m_fDeletePercentageForRefine;$/;"	m	class:SPTAG::BKT::Index
m_fDeletePercentageForRefine	inc/Core/KDT/Index.h	/^            float m_fDeletePercentageForRefine;$/;"	m	class:SPTAG::KDT::Index
m_fNeighborhoodScale	inc/Core/Common/NeighborhoodGraph.h	/^            float m_fNeighborhoodScale, m_fCEFScale, m_fRNGFactor;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_fRNGFactor	inc/Core/Common/NeighborhoodGraph.h	/^            float m_fNeighborhoodScale, m_fCEFScale, m_fRNGFactor;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_fdot	inc/Core/Common/OPQQuantizer.h	/^            const std::function<float(const OPQMatrixType*, const OPQMatrixType*, DimensionType)> m_fdot = SPTAG::COMMON::DistanceCalcSelector<OPQMatrixType>(SPTAG::DistCalcMethod::Cosine);$/;"	m	class:SPTAG::COMMON::OPQQuantizer
m_fileHandle	inc/Helper/AsyncFileReader.h	/^            HandleWrapper m_fileHandle;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_fileHandle	inc/Helper/AsyncFileReader.h	/^            int m_fileHandle;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_fileIocp	inc/Helper/AsyncFileReader.h	/^            HandleWrapper m_fileIocp;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_fileIocpThreads	inc/Helper/AsyncFileReader.h	/^            std::vector<std::thread> m_fileIocpThreads;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_followedValue	inc/Helper/ArgumentsParser.h	/^        bool m_followedValue;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_fp	inc/Core/MetadataSet.h	/^    std::shared_ptr<Helper::DiskIO> m_fp = nullptr;$/;"	m	class:SPTAG::FileMetadataSet
m_freqLruList	inc/Extension/CacheLfuMt.hh	/^            std::unordered_map<uintptr_t, std::list<uintptr_t>> m_freqLruList;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_frequency	inc/Extension/CacheLfuMt.hh	/^            size_t m_frequency;$/;"	m	struct:SPTAG::EXT::CacheItemWrapper
m_front	inc/Helper/AsyncFileReader.h	/^            int m_front, m_end, m_capacity;$/;"	m	class:SPTAG::Helper::RequestQueue
m_fullIndexList	inc/Server/ServiceContext.h	/^    std::map<std::string, std::shared_ptr<VectorIndex>> m_fullIndexList;$/;"	m	class:SPTAG::Service::ServiceContext
m_genTruth	src/IndexSearcher/main.cpp	/^    int m_genTruth = 0;$/;"	m	class:SearcherOptions	file:
m_generateTruth	inc/Core/SPANN/Options.h	/^            bool m_generateTruth;$/;"	m	class:SPTAG::SPANN::Options
m_getTp	inc/Extension/Locks.hh	/^            std::chrono::steady_clock::time_point m_getTp;$/;"	m	struct:SPTAG::EXT::LockStat
m_gpuSSDLeafSize	inc/Core/SPANN/Options.h	/^            int m_gpuSSDLeafSize;$/;"	m	class:SPTAG::SPANN::Options
m_gpuSSDNumTrees	inc/Core/SPANN/Options.h	/^            int m_gpuSSDNumTrees;$/;"	m	class:SPTAG::SPANN::Options
m_graph	inc/Core/BKT/Index.h	/^                COMMON::RelativeNeighborhoodGraph* m_graph;$/;"	m	class:SPTAG::BKT::Index::RebuildJob
m_graph	inc/Core/KDT/Index.h	/^                COMMON::RelativeNeighborhoodGraph* m_graph;$/;"	m	class:SPTAG::KDT::Index::RebuildJob
m_handle	inc/Helper/AsyncFileReader.h	/^            HandleWrapper m_handle;$/;"	m	class:SPTAG::Helper::RequestQueue
m_handle	inc/Helper/AsyncFileReader.h	/^            UniqueHandle m_handle;$/;"	m	class:SPTAG::Helper::HandleWrapper
m_handle	inc/Helper/DiskIO.h	/^            std::unique_ptr<std::fstream> m_handle;$/;"	m	class:SPTAG::Helper::SimpleFileIO
m_handle	inc/Helper/DiskIO.h	/^            std::unique_ptr<streambuf> m_handle;$/;"	m	class:SPTAG::Helper::SimpleBufferIO
m_handle	inc/Helper/Logging.h	/^            std::unique_ptr<std::fstream> m_handle;$/;"	m	class:SPTAG::Helper::FileLogger
m_handler	src/Core/ResultIterator.cpp	/^		std::unique_ptr<SPTAG::COMMON::WorkSpace> m_handler;$/;"	m	struct:UniqueHandler	file:
m_hardcut	src/BalancedDataPartition/main.cpp	/^    int m_hardcut = 0;$/;"	m	class:PartitionOptions	file:
m_hashExp	inc/Core/SPANN/Options.h	/^            int m_hashExp;$/;"	m	class:SPTAG::SPANN::Options
m_hashTable	inc/Core/Common/WorkSpace.h	/^            std::unique_ptr<SizeType[]> m_hashTable;$/;"	m	class:SPTAG::COMMON::OptHashPosVector
m_headBatch	inc/Core/SPANN/Options.h	/^            int m_headBatch;$/;"	m	class:SPTAG::SPANN::Options
m_headIDFile	inc/Core/SPANN/Options.h	/^            std::string m_headIDFile;$/;"	m	class:SPTAG::SPANN::Options
m_headIndexFolder	inc/Core/SPANN/Options.h	/^            std::string m_headIndexFolder;$/;"	m	class:SPTAG::SPANN::Options
m_headParameters	inc/Core/SPANN/Index.h	/^            std::unordered_map<std::string, std::string> m_headParameters;$/;"	m	class:SPTAG::SPANN::Index
m_headQueryResult	inc/Core/SPANN/SPANNResultIterator.h	/^			std::unique_ptr<QueryResult> m_headQueryResult;$/;"	m	class:SPTAG::SPANN::SPANNResultIterator
m_headVectorCount	inc/Core/SPANN/Options.h	/^            int m_headVectorCount;$/;"	m	class:SPTAG::SPANN::Options
m_headVectorFile	inc/Core/SPANN/Options.h	/^            std::string m_headVectorFile;$/;"	m	class:SPTAG::SPANN::Options
m_header	inc/Socket/Packet.h	/^    PacketHeader m_header;$/;"	m	class:SPTAG::Socket::PacketType::PacketProcessStatus::Packet
m_heartbeatIntervalSeconds	inc/Socket/Client.h	/^    std::uint32_t m_heartbeatIntervalSeconds;$/;"	m	class:SPTAG::Socket::Client
m_heartbeatStarted	inc/Socket/Connection.h	/^    std::atomic_bool m_heartbeatStarted;$/;"	m	class:SPTAG::Socket::Connection
m_heartbeatTimer	inc/Socket/Connection.h	/^    boost::asio::deadline_timer m_heartbeatTimer;$/;"	m	class:SPTAG::Socket::Connection
m_hitCount	inc/Extension/CacheLruMt.hh	/^            std::atomic_ulong m_hitCount;$/;"	m	class:SPTAG::EXT::CacheStatMt
m_hitCount	inc/Extension/CacheLruWeak.hh	/^            uint64_t m_hitCount;$/;"	m	class:SPTAG::EXT::CacheStatWeak
m_iAddCEF	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iBKTKmeansK	inc/Core/Common/BKTree.h	/^            int m_iTreeNumber, m_iBKTKmeansK, m_iBKTLeafSize, m_iSamples, m_bfs;$/;"	m	class:SPTAG::COMMON::BKTree
m_iBKTKmeansK	inc/Core/SPANN/Options.h	/^            int m_iBKTKmeansK;$/;"	m	class:SPTAG::SPANN::Options
m_iBKTLeafSize	inc/Core/Common/BKTree.h	/^            int m_iTreeNumber, m_iBKTKmeansK, m_iBKTLeafSize, m_iSamples, m_bfs;$/;"	m	class:SPTAG::COMMON::BKTree
m_iBKTLeafSize	inc/Core/SPANN/Options.h	/^            int m_iBKTLeafSize;$/;"	m	class:SPTAG::SPANN::Options
m_iBaseSquare	inc/Core/BKT/Index.h	/^            int m_iBaseSquare;$/;"	m	class:SPTAG::BKT::Index
m_iBaseSquare	inc/Core/KDT/Index.h	/^            int m_iBaseSquare;$/;"	m	class:SPTAG::KDT::Index
m_iBaseSquare	inc/Core/SPANN/Index.h	/^            int m_iBaseSquare;$/;"	m	class:SPTAG::SPANN::Index
m_iCEF	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iContinuousLimit	inc/Core/Common/WorkSpace.h	/^            int m_iContinuousLimit;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_iDataBlockSize	inc/Core/VectorIndex.h	/^    int m_iDataBlockSize = 1024 * 1024;$/;"	m	class:SPTAG::VectorIndex
m_iDataCapacity	inc/Core/VectorIndex.h	/^    int m_iDataCapacity = MaxSize;$/;"	m	class:SPTAG::VectorIndex
m_iDataDimension	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            int m_iDataDimension = 0;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_iDistCalcMethod	inc/Core/BKT/Index.h	/^            DistCalcMethod m_iDistCalcMethod;$/;"	m	class:SPTAG::BKT::Index
m_iDistCalcMethod	inc/Core/KDT/Index.h	/^            DistCalcMethod m_iDistCalcMethod;$/;"	m	class:SPTAG::KDT::Index
m_iGPUGraphType	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iGPULeafSize	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iGPURefineDepth	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iGPURefineSteps	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iGraphSize	inc/Core/Common/NeighborhoodGraph.h	/^            SizeType m_iGraphSize;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iHashTableExp	inc/Core/BKT/Index.h	/^            int m_iHashTableExp;$/;"	m	class:SPTAG::BKT::Index
m_iHashTableExp	inc/Core/KDT/Index.h	/^            int m_iHashTableExp;$/;"	m	class:SPTAG::KDT::Index
m_iMaxCheck	inc/Core/BKT/Index.h	/^            int m_iMaxCheck;        $/;"	m	class:SPTAG::BKT::Index
m_iMaxCheck	inc/Core/Common/WorkSpace.h	/^            int m_iMaxCheck;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_iMaxCheck	inc/Core/KDT/Index.h	/^            int m_iMaxCheck;$/;"	m	class:SPTAG::KDT::Index
m_iMaxCheckForRefineGraph	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iMetaRecordSize	inc/Core/VectorIndex.h	/^    int m_iMetaRecordSize = 10;$/;"	m	class:SPTAG::VectorIndex
m_iNeighborhoodSize	inc/Core/Common/NeighborhoodGraph.h	/^            DimensionType m_iNeighborhoodSize;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iNumOfContinuousNoBetterPropagation	inc/Core/Common/WorkSpace.h	/^            int m_iNumOfContinuousNoBetterPropagation;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_iNumberOfCheckedLeaves	inc/Core/Common/WorkSpace.h	/^            int m_iNumberOfCheckedLeaves;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_iNumberOfInitialDynamicPivots	inc/Core/BKT/Index.h	/^            int m_iNumberOfInitialDynamicPivots;$/;"	m	class:SPTAG::BKT::Index
m_iNumberOfInitialDynamicPivots	inc/Core/KDT/Index.h	/^            int m_iNumberOfInitialDynamicPivots;$/;"	m	class:SPTAG::KDT::Index
m_iNumberOfOtherDynamicPivots	inc/Core/BKT/Index.h	/^            int m_iNumberOfOtherDynamicPivots;$/;"	m	class:SPTAG::BKT::Index
m_iNumberOfOtherDynamicPivots	inc/Core/KDT/Index.h	/^            int m_iNumberOfOtherDynamicPivots;$/;"	m	class:SPTAG::KDT::Index
m_iNumberOfThreads	inc/Core/BKT/Index.h	/^            int m_iNumberOfThreads;$/;"	m	class:SPTAG::BKT::Index
m_iNumberOfThreads	inc/Core/KDT/Index.h	/^            int m_iNumberOfThreads;$/;"	m	class:SPTAG::KDT::Index
m_iNumberOfTreeCheckedLeaves	inc/Core/Common/WorkSpace.h	/^            int m_iNumberOfTreeCheckedLeaves;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_iRefineIter	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iSSDNumberOfThreads	inc/Core/SPANN/Options.h	/^            int m_iSSDNumberOfThreads;$/;"	m	class:SPTAG::SPANN::Options
m_iSamples	inc/Core/Common/BKTree.h	/^            int m_iTreeNumber, m_iBKTKmeansK, m_iBKTLeafSize, m_iSamples, m_bfs;$/;"	m	class:SPTAG::COMMON::BKTree
m_iSamples	inc/Core/Common/KDTree.h	/^            int m_iTreeNumber, m_numTopDimensionKDTSplit, m_iSamples;$/;"	m	class:SPTAG::COMMON::KDTree
m_iSamples	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iTPTNumber, m_iTPTLeafSize, m_iSamples, m_numTopDimensionTPTSplit;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iSamples	inc/Core/SPANN/Options.h	/^            int m_iSamples;$/;"	m	class:SPTAG::SPANN::Options
m_iSelectHeadNumberOfThreads	inc/Core/SPANN/Options.h	/^            int m_iSelectHeadNumberOfThreads;$/;"	m	class:SPTAG::SPANN::Options
m_iTPTBalanceFactor	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iTPTLeafSize	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iTPTNumber, m_iTPTLeafSize, m_iSamples, m_numTopDimensionTPTSplit;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iTPTNumber	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iTPTNumber, m_iTPTLeafSize, m_iSamples, m_numTopDimensionTPTSplit;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_iThresholdOfNumberOfContinuousNoBetterPropagation	inc/Core/BKT/Index.h	/^            int m_iThresholdOfNumberOfContinuousNoBetterPropagation;$/;"	m	class:SPTAG::BKT::Index
m_iThresholdOfNumberOfContinuousNoBetterPropagation	inc/Core/KDT/Index.h	/^            int m_iThresholdOfNumberOfContinuousNoBetterPropagation;$/;"	m	class:SPTAG::KDT::Index
m_iTreeNumber	inc/Core/Common/BKTree.h	/^            int m_iTreeNumber, m_iBKTKmeansK, m_iBKTLeafSize, m_iSamples, m_bfs;$/;"	m	class:SPTAG::COMMON::BKTree
m_iTreeNumber	inc/Core/Common/KDTree.h	/^            int m_iTreeNumber, m_numTopDimensionKDTSplit, m_iSamples;$/;"	m	class:SPTAG::COMMON::KDTree
m_iTreeNumber	inc/Core/SPANN/Options.h	/^            int m_iTreeNumber;$/;"	m	class:SPTAG::SPANN::Options
m_iheadNumGPUs	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_index	inc/Core/ResultIterator.h	/^	const VectorIndex* m_index;$/;"	m	class:ResultIterator
m_index	inc/Core/SPANN/Index.h	/^            std::shared_ptr<VectorIndex> m_index;$/;"	m	class:SPTAG::SPANN::Index
m_indexAlgoType	inc/Core/SPANN/Options.h	/^            IndexAlgoType m_indexAlgoType;$/;"	m	class:SPTAG::SPANN::Options
m_indexAlgoType	src/IndexBuilder/main.cpp	/^    SPTAG::IndexAlgoType m_indexAlgoType;$/;"	m	class:BuilderOptions	file:
m_indexDirectory	inc/Core/SPANN/Options.h	/^            std::string m_indexDirectory;$/;"	m	class:SPTAG::SPANN::Options
m_indexFiles	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::vector<std::shared_ptr<Helper::DiskIO>> m_indexFiles;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_indexFolder	src/IndexSearcher/main.cpp	/^    std::string m_indexFolder;$/;"	m	class:SearcherOptions	file:
m_indexName	inc/Socket/RemoteSearchQuery.h	/^    std::string m_indexName;$/;"	m	struct:SPTAG::Socket::RemoteQuery::IndexSearchResult
m_indexNames	inc/Server/SearchExecutionContext.h	/^    std::vector<std::string> m_indexNames;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_initIter	src/BalancedDataPartition/main.cpp	/^    int m_initIter = 3;$/;"	m	class:PartitionOptions	file:
m_initalized	inc/Aggregator/AggregatorService.h	/^    bool m_initalized;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_initialized	inc/Aggregator/AggregatorContext.h	/^    bool m_initialized;$/;"	m	class:SPTAG::Aggregator::AggregatorContext
m_initialized	inc/Server/SearchService.h	/^    bool m_initialized;$/;"	m	class:SPTAG::Service::SearchService
m_initialized	inc/Server/ServiceContext.h	/^    bool m_initialized;$/;"	m	class:SPTAG::Service::ServiceContext
m_inputFileType	inc/Helper/VectorSetReader.h	/^    SPTAG::VectorFileType m_inputFileType;$/;"	m	class:SPTAG::Helper::ReaderOptions
m_inputFiles	inc/Quantizer/Training.h	/^    std::string m_inputFiles;$/;"	m	class:QuantizerOptions
m_inputFiles	src/BalancedDataPartition/main.cpp	/^    std::string m_inputFiles;$/;"	m	class:PartitionOptions	file:
m_inputFiles	src/IndexBuilder/main.cpp	/^    std::string m_inputFiles;$/;"	m	class:BuilderOptions	file:
m_inputValueType	inc/Helper/VectorSetReader.h	/^    SPTAG::VectorValueType m_inputValueType;$/;"	m	class:SPTAG::Helper::ReaderOptions
m_inputValueType	inc/Server/SearchExecutionContext.h	/^    VectorValueType m_inputValueType;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_inserted	inc/Core/Common/Labelset.h	/^            std::atomic<SizeType> m_inserted;$/;"	m	class:SPTAG::COMMON::Labelset
m_internalResultNum	inc/Core/SPANN/Options.h	/^            int m_internalResultNum;$/;"	m	class:SPTAG::SPANN::Options
m_invalidIDBehaviorSetting	inc/Core/Common/Labelset.h	/^            InvalidIDBehavior m_invalidIDBehaviorSetting;$/;"	m	class:SPTAG::COMMON::Labelset
m_ioContext	inc/Aggregator/AggregatorService.h	/^    boost::asio::io_context m_ioContext;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_ioContext	inc/Server/SearchService.h	/^    boost::asio::io_context m_ioContext;$/;"	m	class:SPTAG::Service::SearchService
m_ioContext	inc/Socket/Client.h	/^    boost::asio::io_context m_ioContext;$/;"	m	class:SPTAG::Socket::Client
m_ioContext	inc/Socket/Server.h	/^    boost::asio::io_context m_ioContext;$/;"	m	class:SPTAG::Socket::Server
m_ioThreads	inc/Core/SPANN/Options.h	/^            int m_ioThreads;$/;"	m	class:SPTAG::SPANN::Options
m_iocps	inc/Helper/AsyncFileReader.h	/^            std::vector<aio_context_t> m_iocps;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_iotimeout	inc/Core/SPANN/Options.h	/^            int m_iotimeout;$/;"	m	class:SPTAG::SPANN::Options
m_isEmpty	inc/Socket/ConnectionManager.h	/^        std::atomic_bool m_isEmpty;$/;"	m	struct:SPTAG::Socket::ConnectionManager::ConnectionItem
m_isFirstResult	inc/Core/ResultIterator.h	/^	bool m_isFirstResult;$/;"	m	class:ResultIterator
m_isRequired	inc/Helper/ArgumentsParser.h	/^        bool m_isRequired;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_isSet	inc/Helper/ArgumentsParser.h	/^        bool m_isSet;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_isStopped	inc/Socket/ResourceManager.h	/^    bool m_isStopped;$/;"	m	class:SPTAG::Socket::ResourceManager
m_isWaiting	inc/Helper/Concurrent.h	/^    std::atomic_bool m_isWaiting;$/;"	m	class:SPTAG::Helper::Concurrent::WaitSignal
m_isWaitingFinish	inc/Client/ClientWrapper.h	/^    std::atomic_bool m_isWaitingFinish;$/;"	m	class:SPTAG::Client::ClientWrapper
m_item	inc/Extension/CacheLfuMt.hh	/^            CacheItem<uintptr_t> m_item;$/;"	m	struct:SPTAG::EXT::CacheItemWrapper
m_itemLock	inc/Extension/CacheFifoMt.hh	/^            SpinlockWithStat m_itemLock;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_itemLock	inc/Extension/CacheLfuMt.hh	/^            SpinlockWithStat m_itemLock;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_itemLock	inc/Extension/CacheLruMt.hh	/^            SpinlockWithStat m_itemLock;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_jobs	inc/Helper/ThreadPool.h	/^            std::queue<Job*> m_jobs;$/;"	m	class:SPTAG::Helper::ThreadPool
m_key	inc/Extension/CacheLruWeak.hh	/^            K m_key;$/;"	m	class:SPTAG::EXT::CacheItem
m_key	inc/Extension/CacheLruWeak.hh	/^    : m_size(p_size), m_key(p_key)$/;"	f
m_labels	src/BalancedDataPartition/main.cpp	/^    std::string m_labels = "labels.bin";$/;"	m	class:PartitionOptions	file:
m_lambda	src/BalancedDataPartition/main.cpp	/^    float m_lambda = 0.00000f;$/;"	m	class:PartitionOptions	file:
m_latencyGet	inc/Extension/CacheLruWeak.hh	/^            std::vector<double> m_latencyGet;$/;"	m	class:SPTAG::EXT::CacheLru
m_latencySet	inc/Extension/CacheLruWeak.hh	/^            std::vector<double> m_latencySet;$/;"	m	class:SPTAG::EXT::CacheLru
m_length	inc/Core/Common/WorkSpace.h	/^            int m_length;$/;"	m	class:SPTAG::COMMON::DistPriorityQueue
m_length	inc/Core/CommonDataStructure.h	/^    std::size_t m_length;$/;"	m	class:SPTAG::Array
m_level	inc/Helper/Logging.h	/^            LogLevel m_level;$/;"	m	class:SPTAG::Helper::FileLogger
m_level	inc/Helper/Logging.h	/^            LogLevel m_level;$/;"	m	class:SPTAG::Helper::SimpleLogger
m_listInfos	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::vector<ListInfo> m_listInfos;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_listPerFile	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            int m_listPerFile = 0;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_listenAddr	inc/Aggregator/AggregatorSettings.h	/^    std::string m_listenAddr;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_listenAddr	inc/Server/ServiceSettings.h	/^    std::string m_listenAddr;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_listenPort	inc/Aggregator/AggregatorSettings.h	/^    std::string m_listenPort;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_listenPort	inc/Server/ServiceSettings.h	/^    std::string m_listenPort;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_loadPosting	inc/Core/SPANN/IExtraSearcher.h	/^            bool m_loadPosting;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_loadedPostingNum	inc/Core/SPANN/IExtraSearcher.h	/^            int m_loadedPostingNum;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_localHitRatio	inc/Extension/CacheLruWeak.hh	/^            double m_localHitRatio;$/;"	m	class:SPTAG::EXT::CacheStatWeak
m_localHitRatio	src/Extension/CacheLruWeak.cpp	/^    : m_hitCount(p_hitCount), m_missCount(p_missCount), m_evictCount(p_evictCount), m_currentSize(p_currentSize), m_localHitRatio(p_localHitRatio)$/;"	f
m_localSamples	src/BalancedDataPartition/main.cpp	/^    int m_localSamples = 1000;$/;"	m	class:PartitionOptions	file:
m_lock	inc/Core/Common/BKTree.h	/^            std::unique_ptr<std::shared_timed_mutex> m_lock;$/;"	m	class:SPTAG::COMMON::BKTree
m_lock	inc/Core/Common/KDTree.h	/^            std::unique_ptr<std::shared_timed_mutex> m_lock;$/;"	m	class:SPTAG::COMMON::KDTree
m_lock	inc/Core/MetadataSet.h	/^    std::shared_ptr<void> m_lock;$/;"	m	class:SPTAG::FileMetadataSet
m_lock	inc/Core/MetadataSet.h	/^    std::shared_ptr<void> m_lock;$/;"	m	class:SPTAG::MemMetadataSet
m_lock	inc/Extension/Locks.hh	/^            std::atomic_flag m_lock = ATOMIC_FLAG_INIT;$/;"	m	class:SPTAG::EXT::Spinlock
m_lock	inc/Helper/Concurrent.h	/^        : m_lock(lock) {$/;"	f	class:SPTAG::Helper::Concurrent::LockGuard
m_lock	inc/Helper/Concurrent.h	/^        : m_lock(lock) {}$/;"	f	class:SPTAG::Helper::Concurrent::LockGuard
m_lock	inc/Helper/Concurrent.h	/^    Lock& m_lock;$/;"	m	class:SPTAG::Helper::Concurrent::LockGuard
m_lock	inc/Helper/Concurrent.h	/^    std::atomic_flag m_lock = ATOMIC_FLAG_INIT;$/;"	m	class:SPTAG::Helper::Concurrent::SpinLock
m_lock	inc/Helper/ConcurrentSet.h	/^                std::mutex m_lock;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentQueue
m_lock	inc/Helper/ConcurrentSet.h	/^                std::unique_ptr<std::shared_timed_mutex> m_lock;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentMap
m_lock	inc/Helper/ConcurrentSet.h	/^                std::unique_ptr<std::shared_timed_mutex> m_lock;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentSet
m_lock	inc/Helper/LockFree.h	/^                Concurrent::SpinLock m_lock;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_lock	inc/Helper/ThreadPool.h	/^            std::mutex m_lock;$/;"	m	class:SPTAG::Helper::ThreadPool
m_locks	inc/Core/Common/FineGrainedLock.h	/^            std::unique_ptr<std::mutex[]> m_locks;$/;"	m	class:SPTAG::COMMON::FineGrainedLock
m_logFile	inc/Core/SPANN/Options.h	/^            std::string m_logFile;$/;"	m	class:SPTAG::SPANN::Options
m_logFile	src/Server/SearchService.cpp	/^    std::string m_logFile;$/;"	m	class:__anon3::Local::SerivceCmdOptions	file:
m_logger	inc/Helper/Logging.h	/^            std::atomic<std::shared_ptr<Logger>> m_logger;$/;"	m	class:SPTAG::Helper::LoggerHolder
m_maxCheck	inc/Core/SPANN/Options.h	/^            int m_maxCheck;$/;"	m	class:SPTAG::SPANN::Options
m_maxCheck	src/IndexSearcher/main.cpp	/^    std::string m_maxCheck = "8192";$/;"	m	class:SearcherOptions	file:
m_maxDistRatio	inc/Core/SPANN/Options.h	/^            float m_maxDistRatio;$/;"	m	class:SPTAG::SPANN::Options
m_maxIter	src/BalancedDataPartition/main.cpp	/^    int m_maxIter = 100;$/;"	m	class:PartitionOptions	file:
m_maxLoop	inc/Core/Common/WorkSpace.h	/^            static const int m_maxLoop = 8;$/;"	m	class:SPTAG::COMMON::OptHashPosVector
m_maxRandomTryCount	inc/Core/SPANN/Options.h	/^            int m_maxRandomTryCount;$/;"	m	class:SPTAG::SPANN::Options
m_maxSize	inc/Helper/LockFree.h	/^                std::uint64_t m_maxSize;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_metaMapping	src/IndexBuilder/main.cpp	/^    bool m_metaMapping = false;$/;"	m	class:BuilderOptions	file:
m_metadataConentOutput	inc/Helper/VectorSetReaders/DefaultReader.h	/^    std::string m_metadataConentOutput;$/;"	m	class:SPTAG::Helper::DefaultVectorReader
m_metadataConentOutput	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::string m_metadataConentOutput;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_metadataHolder	inc/Core/MetadataSet.h	/^    ByteArray m_metadataHolder;$/;"	m	class:SPTAG::MemMetadataSet
m_metadataIndexOutput	inc/Helper/VectorSetReaders/DefaultReader.h	/^    std::string m_metadataIndexOutput;$/;"	m	class:SPTAG::Helper::DefaultVectorReader
m_metadataIndexOutput	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::string m_metadataIndexOutput;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_minDictTraingBufferSize	inc/Core/SPANN/Options.h	/^            int m_minDictTraingBufferSize;$/;"	m	class:SPTAG::SPANN::Options
m_minFrequency	inc/Extension/CacheLfuMt.hh	/^            size_t m_minFrequency;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_missCount	inc/Extension/CacheLruMt.hh	/^            std::atomic_ulong m_missCount;$/;"	m	class:SPTAG::EXT::CacheStatMt
m_missCount	inc/Extension/CacheLruWeak.hh	/^            uint64_t m_missCount;$/;"	m	class:SPTAG::EXT::CacheStatWeak
m_mutex	inc/Helper/Concurrent.h	/^    std::mutex m_mutex;$/;"	m	class:SPTAG::Helper::Concurrent::WaitSignal
m_neighborOffset	inc/Helper/DynamicNeighbors.h	/^        std::unique_ptr<int[]> m_neighborOffset;$/;"	m	class:SPTAG::Helper::DynamicNeighborsSet
m_newdata	inc/Core/MetadataSet.h	/^    std::vector<std::uint8_t> m_newdata;$/;"	m	class:SPTAG::FileMetadataSet
m_newdata	inc/Core/MetadataSet.h	/^    std::vector<std::uint8_t> m_newdata;$/;"	m	class:SPTAG::MemMetadataSet
m_newp	src/BalancedDataPartition/main.cpp	/^    int m_newp = 0;$/;"	m	class:PartitionOptions	file:
m_nextBSPTQueue	inc/Core/Common/WorkSpace.h	/^            Heap<NodeDistPair> m_nextBSPTQueue;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_nextConnectionID	inc/Socket/ConnectionManager.h	/^    std::atomic<ConnectionID> m_nextConnectionID;$/;"	m	class:SPTAG::Socket::ConnectionManager
m_nextResourceID	inc/Socket/ResourceManager.h	/^    std::atomic<ResourceID> m_nextResourceID;$/;"	m	class:SPTAG::Socket::ResourceManager
m_noOutput	inc/Core/SPANN/Options.h	/^            bool m_noOutput;$/;"	m	class:SPTAG::SPANN::Options
m_normalized	inc/Helper/VectorSetReader.h	/^    bool m_normalized;$/;"	m	class:SPTAG::Helper::ReaderOptions
m_numGPUs	inc/Core/SPANN/Options.h	/^            int m_numGPUs;$/;"	m	class:SPTAG::SPANN::Options
m_numTopDimensionKDTSplit	inc/Core/Common/KDTree.h	/^            int m_iTreeNumber, m_numTopDimensionKDTSplit, m_iSamples;$/;"	m	class:SPTAG::COMMON::KDTree
m_numTopDimensionTPTSplit	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iTPTNumber, m_iTPTLeafSize, m_iSamples, m_numTopDimensionTPTSplit;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_offset	inc/Core/SPANN/IExtraSearcher.h	/^            int m_offset;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_offset	inc/Helper/DiskIO.h	/^            std::uint64_t m_offset;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_offsetList	inc/Core/SPANN/IExtraSearcher.h	/^            std::vector<uint64_t> m_offsetList;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_offsets	inc/Core/MetadataSet.h	/^    std::vector<std::uint64_t> m_offsets;$/;"	m	class:SPTAG::FileMetadataSet
m_oneContext	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            bool m_oneContext;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_options	inc/Client/ClientWrapper.h	/^    ClientOptions m_options;$/;"	m	class:SPTAG::Client::ClientWrapper
m_options	inc/Core/SPANN/Index.h	/^            Options m_options;$/;"	m	class:SPTAG::SPANN::Index
m_options	inc/Helper/VectorSetReader.h	/^    std::shared_ptr<ReaderOptions> m_options;$/;"	m	class:SPTAG::Helper::VectorSetReader
m_options	inc/Server/QueryParser.h	/^    std::vector<OptionPair> m_options;$/;"	m	class:SPTAG::Service::QueryParser
m_outdir	src/BalancedDataPartition/main.cpp	/^    std::string m_outdir = "-";$/;"	m	class:PartitionOptions	file:
m_outfile	src/BalancedDataPartition/main.cpp	/^    std::string m_outfile = "vectors.bin";$/;"	m	class:PartitionOptions	file:
m_outmetafile	src/BalancedDataPartition/main.cpp	/^    std::string m_outmetafile = "meta.bin";$/;"	m	class:PartitionOptions	file:
m_outmetaindexfile	src/BalancedDataPartition/main.cpp	/^    std::string m_outmetaindexfile = "metaindex.bin";$/;"	m	class:PartitionOptions	file:
m_outputEmptyReplicaID	inc/Core/SPANN/Options.h	/^            bool m_outputEmptyReplicaID;$/;"	m	class:SPTAG::SPANN::Options
m_outputFile	inc/Quantizer/Training.h	/^    std::string m_outputFile;$/;"	m	class:QuantizerOptions
m_outputFolder	src/IndexBuilder/main.cpp	/^    std::string m_outputFolder;$/;"	m	class:BuilderOptions	file:
m_outputFullVecFile	inc/Quantizer/Training.h	/^    std::string m_outputFullVecFile;$/;"	m	class:QuantizerOptions
m_outputMetadataFile	inc/Quantizer/Training.h	/^    std::string m_outputMetadataFile;$/;"	m	class:QuantizerOptions
m_outputMetadataIndexFile	inc/Quantizer/Training.h	/^    std::string m_outputMetadataIndexFile;$/;"	m	class:QuantizerOptions
m_outputQuantizerFile	inc/Quantizer/Training.h	/^    std::string m_outputQuantizerFile;$/;"	m	class:QuantizerOptions
m_outputReconstructVecFile	inc/Quantizer/Training.h	/^    std::string m_outputReconstructVecFile;$/;"	m	class:QuantizerOptions
m_outputformat	src/IndexSearcher/main.cpp	/^    int m_outputformat = 0;$/;"	m	class:SearcherOptions	file:
m_pCompressor	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::unique_ptr<Compressor> m_pCompressor;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_pGraph	inc/Core/BKT/Index.h	/^            COMMON::RelativeNeighborhoodGraph m_pGraph;$/;"	m	class:SPTAG::BKT::Index
m_pGraph	inc/Core/KDT/Index.h	/^            COMMON::RelativeNeighborhoodGraph m_pGraph;$/;"	m	class:SPTAG::KDT::Index
m_pMetaToVec	inc/Core/VectorIndex.h	/^    std::shared_ptr<void> m_pMetaToVec;$/;"	m	class:SPTAG::VectorIndex
m_pMetadata	inc/Core/VectorIndex.h	/^    std::shared_ptr<MetadataSet> m_pMetadata;$/;"	m	class:SPTAG::VectorIndex
m_pNeighborhoodGraph	inc/Core/Common/NeighborhoodGraph.h	/^            COMMON::Dataset<SizeType> m_pNeighborhoodGraph;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_pOffsets	inc/Core/MetadataSet.h	/^    std::shared_ptr<void> m_pOffsets;$/;"	m	class:SPTAG::MemMetadataSet
m_pQuantizer	inc/Core/Common/BKTree.h	/^            const std::shared_ptr<IQuantizer>& m_pQuantizer;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
m_pQuantizer	inc/Core/Common/BKTree.h	/^            std::shared_ptr<SPTAG::COMMON::IQuantizer> m_pQuantizer;$/;"	m	class:SPTAG::COMMON::BKTree
m_pQuantizer	inc/Core/Common/KDTree.h	/^            std::shared_ptr<SPTAG::COMMON::IQuantizer> m_pQuantizer;$/;"	m	class:SPTAG::COMMON::KDTree
m_pQuantizer	inc/Core/VectorIndex.h	/^    std::shared_ptr<SPTAG::COMMON::IQuantizer> m_pQuantizer = nullptr;$/;"	m	class:SPTAG::VectorIndex
m_pSampleCenterMap	inc/Core/Common/BKTree.h	/^            std::unordered_map<SizeType, SizeType> m_pSampleCenterMap;$/;"	m	class:SPTAG::COMMON::BKTree
m_pSamples	inc/Core/BKT/Index.h	/^            COMMON::Dataset<T> m_pSamples;$/;"	m	class:SPTAG::BKT::Index
m_pSamples	inc/Core/KDT/Index.h	/^            COMMON::Dataset<T> m_pSamples;$/;"	m	class:SPTAG::KDT::Index
m_pTreeRoots	inc/Core/Common/BKTree.h	/^            std::vector<BKTNode> m_pTreeRoots;$/;"	m	class:SPTAG::COMMON::BKTree
m_pTreeRoots	inc/Core/Common/KDTree.h	/^            std::vector<KDTNode> m_pTreeRoots;$/;"	m	class:SPTAG::COMMON::KDTree
m_pTreeStart	inc/Core/Common/BKTree.h	/^            std::vector<SizeType> m_pTreeStart;$/;"	m	class:SPTAG::COMMON::BKTree
m_pTreeStart	inc/Core/Common/KDTree.h	/^            std::vector<SizeType> m_pTreeStart;$/;"	m	class:SPTAG::COMMON::KDTree
m_pTrees	inc/Core/BKT/Index.h	/^            COMMON::BKTree m_pTrees;$/;"	m	class:SPTAG::BKT::Index
m_pTrees	inc/Core/KDT/Index.h	/^            COMMON::KDTree m_pTrees;$/;"	m	class:SPTAG::KDT::Index
m_packetHeaderReadBuffer	inc/Socket/Connection.h	/^    std::uint8_t m_packetHeaderReadBuffer[PacketHeader::c_bufferSize];$/;"	m	class:SPTAG::Socket::Connection
m_packetRead	inc/Socket/Connection.h	/^    Packet m_packetRead;$/;"	m	class:SPTAG::Socket::Connection
m_packetType	inc/Socket/Packet.h	/^    PacketType m_packetType;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
m_pageBuffer	inc/Core/SPANN/IExtraSearcher.h	/^            std::shared_ptr<T> m_pageBuffer;$/;"	m	class:SPTAG::SPANN::PageBuffer
m_pageBufferSize	inc/Core/SPANN/IExtraSearcher.h	/^            std::size_t m_pageBufferSize;$/;"	m	class:SPTAG::SPANN::PageBuffer
m_pageBuffers	inc/Core/SPANN/IExtraSearcher.h	/^            std::vector<PageBuffer<std::uint8_t>> m_pageBuffers;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_parameters	inc/Helper/SimpleIniReader.h	/^    std::map<std::string, std::shared_ptr<ParameterValueMap>> m_parameters;$/;"	m	class:SPTAG::Helper::IniReader
m_parseEncoding	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            void (ExtraFullGraphSearcher<ValueType>::*m_parseEncoding)(std::shared_ptr<VectorIndex>&, ListInfo*, ValueType*);$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_parsePosting	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            void (ExtraFullGraphSearcher<ValueType>::*m_parsePosting)(uint64_t&, uint64_t&, int, int);$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_payload	inc/Helper/DiskIO.h	/^            void* m_payload;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_pendingConnectServers	inc/Aggregator/AggregatorService.h	/^    std::vector<std::shared_ptr<RemoteMachine>> m_pendingConnectServers;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_pendingConnectServersMutex	inc/Aggregator/AggregatorService.h	/^    std::mutex m_pendingConnectServersMutex;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_pendingConnectServersTimer	inc/Aggregator/AggregatorService.h	/^    boost::asio::deadline_timer m_pendingConnectServersTimer;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_perVectorDataSize	inc/Core/VectorSet.h	/^    size_t m_perVectorDataSize;$/;"	m	class:SPTAG::BasicVectorSet
m_pi	inc/Core/SPANN/IExtraSearcher.h	/^            uint32_t m_pi;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_poolSize	inc/Core/Common/WorkSpace.h	/^            int m_poolSize;$/;"	m	class:SPTAG::COMMON::OptHashPosVector
m_port	inc/Aggregator/AggregatorContext.h	/^    std::string m_port;$/;"	m	struct:SPTAG::Aggregator::RemoteMachine
m_posInFreqList	inc/Extension/CacheLfuMt.hh	/^            std::unordered_map<uintptr_t, std::list<uintptr_t>::iterator> m_posInFreqList;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_postingIDs	inc/Core/SPANN/IExtraSearcher.h	/^            std::vector<int> m_postingIDs;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_postingPageLimit	inc/Core/SPANN/Options.h	/^            int m_postingPageLimit;$/;"	m	class:SPTAG::SPANN::Options
m_postingVectorLimit	inc/Core/SPANN/Options.h	/^            int m_postingVectorLimit;$/;"	m	class:SPTAG::SPANN::Options
m_printSizeCount	inc/Core/SPANN/Options.h	/^            bool m_printSizeCount;$/;"	m	class:SPTAG::SPANN::Options
m_processIocp	inc/Core/SPANN/IExtraSearcher.h	/^            Helper::RequestQueue m_processIocp;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_processStatus	inc/Socket/Packet.h	/^    PacketProcessStatus m_processStatus;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
m_qpsLimit	inc/Core/SPANN/Options.h	/^            int m_qpsLimit;$/;"	m	class:SPTAG::SPANN::Options
m_quantizedDim	inc/Quantizer/Training.h	/^    DimensionType m_quantizedDim;$/;"	m	class:QuantizerOptions
m_quantizedSize	inc/Core/SearchQuery.h	/^    SizeType m_quantizedSize;$/;"	m	class:SPTAG::QueryResult
m_quantizedTarget	inc/Core/SearchQuery.h	/^    void* m_quantizedTarget;$/;"	m	class:SPTAG::QueryResult
m_quantizerFile	src/IndexBuilder/main.cpp	/^    std::string m_quantizerFile;$/;"	m	class:BuilderOptions	file:
m_quantizerFilePath	inc/Core/SPANN/Options.h	/^            std::string m_quantizerFilePath;$/;"	m	class:SPTAG::SPANN::Options
m_quantizerType	inc/Quantizer/Training.h	/^    SPTAG::QuantizerType m_quantizerType;$/;"	m	class:QuantizerOptions
m_queryCountLimit	inc/Core/SPANN/Options.h	/^            int m_queryCountLimit;$/;"	m	class:SPTAG::SPANN::Options
m_queryDelimiter	inc/Core/SPANN/Options.h	/^            std::string m_queryDelimiter; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_queryFile	src/IndexSearcher/main.cpp	/^    std::string m_queryFile;$/;"	m	class:SearcherOptions	file:
m_queryParser	inc/Server/SearchExecutionContext.h	/^    QueryParser m_queryParser;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_queryPath	inc/Core/SPANN/Options.h	/^            std::string m_queryPath;$/;"	m	class:SPTAG::SPANN::Options
m_queryResult	inc/Core/ResultIterator.h	/^	std::shared_ptr<QueryResult> m_queryResult;$/;"	m	class:ResultIterator
m_querySize	inc/Core/SPANN/Options.h	/^            SizeType m_querySize; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_queryString	inc/Server/SearchExecutor.h	/^    std::string m_queryString;$/;"	m	class:SPTAG::Service::SearchExecutor
m_queryString	inc/Socket/RemoteSearchQuery.h	/^    std::string m_queryString;$/;"	m	class:SPTAG::Socket::RemoteQuery::QueryType
m_queryType	inc/Core/SPANN/Options.h	/^            VectorFileType m_queryType;$/;"	m	class:SPTAG::SPANN::Options
m_queue	inc/Helper/AsyncFileReader.h	/^            std::unique_ptr<AsyncReadRequest* []> m_queue;$/;"	m	class:SPTAG::Helper::RequestQueue
m_queue	inc/Helper/ConcurrentSet.h	/^                std::queue<T> m_queue;$/;"	m	class:SPTAG::Helper::Concurrent::ConcurrentQueue
m_queueLatency	inc/Core/SPANN/IExtraSearcher.h	/^            double m_queueLatency;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_ratio	inc/Core/SPANN/Options.h	/^            double m_ratio;$/;"	m	class:SPTAG::SPANN::Options
m_readLatency0	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency0;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readLatency1	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency1;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readLatency2	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency2;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readLatency3	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency3;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readLatency4	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency4;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readLatency5	inc/Core/SPANN/IExtraSearcher.h	/^            double m_readLatency5;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_readSize	inc/Helper/DiskIO.h	/^            std::uint64_t m_readSize;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_rebuild	inc/Core/Common/NeighborhoodGraph.h	/^            int m_iRefineIter, m_iCEF, m_iAddCEF, m_iMaxCheckForRefineGraph, m_iGPUGraphType, m_iGPURefineSteps, m_iGPURefineDepth, m_iGPULeafSize, m_iheadNumGPUs, m_iTPTBalanceFactor, m_rebuild;$/;"	m	class:SPTAG::COMMON::NeighborhoodGraph
m_recall_analysis	inc/Core/SPANN/Options.h	/^            bool m_recall_analysis;$/;"	m	class:SPTAG::SPANN::Options
m_recoveriter	src/BalancedDataPartition/main.cpp	/^    int m_recoveriter = -1;$/;"	m	class:PartitionOptions	file:
m_recursiveCheckSmallCluster	inc/Core/SPANN/Options.h	/^            bool m_recursiveCheckSmallCluster;$/;"	m	class:SPTAG::SPANN::Options
m_refreshStat	inc/Extension/Locks.hh	/^            std::array<struct LockStat, EXTLOCK_STAT_MAX> m_refreshStat;$/;"	m	class:SPTAG::EXT::SpinlockWithStat
m_refreshStatIndex	inc/Extension/Locks.hh	/^            std::atomic<size_t> m_refreshStatIndex;$/;"	m	class:SPTAG::EXT::SpinlockWithStat
m_relaxedMono	inc/Core/Common/WorkSpace.h	/^            bool m_relaxedMono;$/;"	m	struct:SPTAG::COMMON::WorkSpace
m_relaxedMono	inc/Core/SPANN/IExtraSearcher.h	/^            bool m_relaxedMono;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_releaseTp	inc/Extension/Locks.hh	/^            std::chrono::steady_clock::time_point m_releaseTp;   $/;"	m	struct:SPTAG::EXT::LockStat
m_remoteConnectionID	inc/Socket/Connection.h	/^    ConnectionID m_remoteConnectionID;$/;"	m	class:SPTAG::Socket::Connection
m_remoteServers	inc/Aggregator/AggregatorContext.h	/^    std::vector<std::shared_ptr<RemoteMachine>> m_remoteServers;$/;"	m	class:SPTAG::Aggregator::AggregatorContext
m_replicaCount	inc/Core/SPANN/Options.h	/^            int m_replicaCount;$/;"	m	class:SPTAG::SPANN::Options
m_representString	inc/Helper/ArgumentsParser.h	/^        std::string m_representString;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_representStringShort	inc/Helper/ArgumentsParser.h	/^        std::string m_representStringShort;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_requestHandlerMap	inc/Socket/Server.h	/^    const PacketHandlerMapPtr m_requestHandlerMap;$/;"	m	class:SPTAG::Socket::Server
m_requestHeader	inc/Aggregator/AggregatorExecutionContext.h	/^    Socket::PacketHeader m_requestHeader;$/;"	m	class:SPTAG::Aggregator::AggregatorExecutionContext
m_requestTp	inc/Extension/Locks.hh	/^            std::chrono::steady_clock::time_point m_requestTp;$/;"	m	struct:SPTAG::EXT::LockStat
m_requests	inc/Extension/CacheFifoMt.hh	/^                void* m_requests;$/;"	m	struct:SPTAG::EXT::CacheFifoSpannMt::PendingInfo
m_requests	inc/Extension/CacheLfuMt.hh	/^                void* m_requests;$/;"	m	struct:SPTAG::EXT::CacheLfuSpannMt::PendingInfo
m_requests	inc/Extension/CacheLruMt.hh	/^                void* m_requests;$/;"	m	struct:SPTAG::EXT::CacheLruSpannMt::PendingInfo
m_requests	inc/Extension/CacheLruWeak.hh	/^            void* m_requests;          $/;"	m	class:SPTAG::EXT::CacheLruSpannSt
m_rerank	inc/Core/SPANN/Options.h	/^            int m_rerank;$/;"	m	class:SPTAG::SPANN::Options
m_resourceID	inc/Socket/Packet.h	/^    ResourceID m_resourceID;$/;"	m	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketHeader
m_resourceID	inc/Socket/ResourceManager.h	/^        ResourceID m_resourceID;$/;"	m	struct:SPTAG::Socket::ResourceManager::ResourceItem
m_resources	inc/Helper/AsyncFileReader.h	/^            Helper::Concurrent::ConcurrentQueue<ResourceType*> m_resources;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_resources	inc/Socket/ResourceManager.h	/^    std::unordered_map<ResourceID, std::shared_ptr<ResourceType>> m_resources;$/;"	m	class:SPTAG::Socket::ResourceManager
m_resourcesMutex	inc/Socket/ResourceManager.h	/^    std::mutex m_resourcesMutex;$/;"	m	class:SPTAG::Socket::ResourceManager
m_resultFile	src/IndexSearcher/main.cpp	/^    std::string m_resultFile = "";$/;"	m	class:SearcherOptions	file:
m_resultNum	inc/Core/SPANN/Options.h	/^            int m_resultNum;$/;"	m	class:SPTAG::SPANN::Options
m_resultNum	inc/Core/SearchQuery.h	/^    int m_resultNum;$/;"	m	class:SPTAG::QueryResult
m_resultNum	inc/Server/SearchExecutionContext.h	/^    SizeType m_resultNum;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_results	inc/Aggregator/AggregatorExecutionContext.h	/^    std::vector<AggregatorResult> m_results;$/;"	m	class:SPTAG::Aggregator::AggregatorExecutionContext
m_results	inc/Core/SearchQuery.h	/^    Array<BasicResult> m_results;$/;"	m	class:SPTAG::QueryResult
m_results	inc/Server/SearchExecutionContext.h	/^    std::vector<SearchResult> m_results;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_results	inc/Socket/RemoteSearchQuery.h	/^    QueryResult m_results;$/;"	m	struct:SPTAG::Socket::RemoteQuery::IndexSearchResult
m_rngFactor	inc/Core/SPANN/Options.h	/^            float m_rngFactor;$/;"	m	class:SPTAG::SPANN::Options
m_sBKTFilename	inc/Core/BKT/Index.h	/^            std::string m_sBKTFilename;$/;"	m	class:SPTAG::BKT::Index
m_sDataPointsFilename	inc/Core/BKT/Index.h	/^            std::string m_sDataPointsFilename;$/;"	m	class:SPTAG::BKT::Index
m_sDataPointsFilename	inc/Core/KDT/Index.h	/^            std::string m_sDataPointsFilename;$/;"	m	class:SPTAG::KDT::Index
m_sDeleteDataPointsFilename	inc/Core/BKT/Index.h	/^            std::string m_sDeleteDataPointsFilename;$/;"	m	class:SPTAG::BKT::Index
m_sDeleteDataPointsFilename	inc/Core/KDT/Index.h	/^            std::string m_sDeleteDataPointsFilename;$/;"	m	class:SPTAG::KDT::Index
m_sGraphFilename	inc/Core/BKT/Index.h	/^            std::string m_sGraphFilename;$/;"	m	class:SPTAG::BKT::Index
m_sGraphFilename	inc/Core/KDT/Index.h	/^            std::string m_sGraphFilename;$/;"	m	class:SPTAG::KDT::Index
m_sIndexName	inc/Core/VectorIndex.h	/^    std::string m_sIndexName = "";$/;"	m	class:SPTAG::VectorIndex
m_sKDTFilename	inc/Core/KDT/Index.h	/^            std::string m_sKDTFilename;$/;"	m	class:SPTAG::KDT::Index
m_sMetadataFile	inc/Core/VectorIndex.h	/^    std::string m_sMetadataFile = "metadata.bin";$/;"	m	class:SPTAG::VectorIndex
m_sMetadataIndexFile	inc/Core/VectorIndex.h	/^    std::string m_sMetadataIndexFile = "metadataIndex.bin";$/;"	m	class:SPTAG::VectorIndex
m_sQuantizerFile	inc/Core/VectorIndex.h	/^    std::string m_sQuantizerFile = "quantizer.bin";$/;"	m	class:SPTAG::VectorIndex
m_samples	inc/Core/SPANN/Options.h	/^            int m_samples;$/;"	m	class:SPTAG::SPANN::Options
m_saveBKT	inc/Core/SPANN/Options.h	/^            bool m_saveBKT;$/;"	m	class:SPTAG::SPANN::Options
m_searchDeleted	inc/Core/ResultIterator.h	/^	bool m_searchDeleted;$/;"	m	class:ResultIterator
m_searchInternalResultNum	inc/Core/SPANN/Options.h	/^            int m_searchInternalResultNum;$/;"	m	class:SPTAG::SPANN::Options
m_searchPostingPageLimit	inc/Core/SPANN/Options.h	/^            int m_searchPostingPageLimit;$/;"	m	class:SPTAG::SPANN::Options
m_searchRequestTime	inc/Core/SPANN/IExtraSearcher.h	/^            std::chrono::steady_clock::time_point m_searchRequestTime;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_searchResult	inc/Core/SPANN/Options.h	/^            std::string m_searchResult;$/;"	m	class:SPTAG::SPANN::Options
m_searchStat	inc/Extension/Locks.hh	/^            std::array<struct LockStat, EXTLOCK_STAT_MAX> m_searchStat;$/;"	m	class:SPTAG::EXT::SpinlockWithStat
m_searchStatIndex	inc/Extension/Locks.hh	/^            std::atomic<size_t> m_searchStatIndex;$/;"	m	class:SPTAG::EXT::SpinlockWithStat
m_searchTimeout	inc/Aggregator/AggregatorSettings.h	/^    std::uint32_t m_searchTimeout;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_searchTimeout	inc/Client/Options.h	/^    std::uint32_t m_searchTimeout;$/;"	m	class:SPTAG::Client::ClientOptions
m_secondHash	inc/Core/Common/WorkSpace.h	/^            bool m_secondHash;$/;"	m	class:SPTAG::COMMON::OptHashPosVector
m_seed	src/BalancedDataPartition/main.cpp	/^    int m_seed = -1;$/;"	m	class:PartitionOptions	file:
m_selectDynamically	inc/Core/SPANN/Options.h	/^            bool m_selectDynamically;$/;"	m	class:SPTAG::SPANN::Options
m_selectHead	inc/Core/SPANN/Options.h	/^            bool m_selectHead;$/;"	m	class:SPTAG::SPANN::Options
m_selectThreshold	inc/Core/SPANN/Options.h	/^            int m_selectThreshold;$/;"	m	class:SPTAG::SPANN::Options
m_selectType	inc/Core/SPANN/Options.h	/^            std::string m_selectType;$/;"	m	class:SPTAG::SPANN::Options
m_selectedIndex	inc/Server/SearchExecutor.h	/^    std::vector<std::shared_ptr<VectorIndex>> m_selectedIndex;$/;"	m	class:SPTAG::Service::SearchExecutor
m_selections	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::vector<Edge> m_selections;$/;"	m	struct:SPTAG::SPANN::Selection
m_serveMode	inc/Server/SearchService.h	/^    ServeMode m_serveMode;$/;"	m	class:SPTAG::Service::SearchService
m_serveMode	src/Server/SearchService.cpp	/^    std::string m_serveMode;$/;"	m	class:__anon3::Local::SerivceCmdOptions	file:
m_serverAddr	inc/Client/Options.h	/^    std::string m_serverAddr;$/;"	m	class:SPTAG::Client::ClientOptions
m_serverPort	inc/Client/Options.h	/^    std::string m_serverPort;$/;"	m	class:SPTAG::Client::ClientOptions
m_serviceContext	inc/Server/SearchService.h	/^    std::shared_ptr<ServiceContext> m_serviceContext;$/;"	m	class:SPTAG::Service::SearchService
m_settings	inc/Aggregator/AggregatorContext.h	/^    std::shared_ptr<AggregatorSettings> m_settings;$/;"	m	class:SPTAG::Aggregator::AggregatorContext
m_settings	inc/Server/ServiceContext.h	/^    std::shared_ptr<ServiceSettings> m_settings;$/;"	m	class:SPTAG::Service::ServiceContext
m_shutdown	inc/Helper/AsyncFileReader.h	/^            bool m_shutdown;$/;"	m	class:SPTAG::Helper::AsyncFileIO
m_shutdownSignals	inc/Aggregator/AggregatorService.h	/^    boost::asio::signal_set m_shutdownSignals;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_shutdownSignals	inc/Server/SearchService.h	/^    boost::asio::signal_set m_shutdownSignals;$/;"	m	class:SPTAG::Service::SearchService
m_size	inc/Core/Common/WorkSpace.h	/^            int m_size;$/;"	m	class:SPTAG::COMMON::DistPriorityQueue
m_size	inc/Extension/CacheLruWeak.hh	/^            size_t m_size;$/;"	m	class:SPTAG::EXT::CacheItem
m_size	inc/Helper/LockFree.h	/^                std::uint64_t m_size = 0;$/;"	m	class:SPTAG::Helper::LockFree::LockFreeVector
m_sleepLatency	inc/Core/SPANN/IExtraSearcher.h	/^            double m_sleepLatency;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_socket	inc/Socket/Connection.h	/^    boost::asio::ip::tcp::socket m_socket;$/;"	m	class:SPTAG::Socket::Connection
m_socketClient	inc/Aggregator/AggregatorService.h	/^    std::shared_ptr<Socket::Client> m_socketClient;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_socketServer	inc/Aggregator/AggregatorService.h	/^    std::shared_ptr<Socket::Server> m_socketServer;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_socketServer	inc/Server/SearchService.h	/^    std::shared_ptr<Socket::Server> m_socketServer;$/;"	m	class:SPTAG::Service::SearchService
m_socketThreadNum	inc/Aggregator/AggregatorSettings.h	/^    SizeType m_socketThreadNum;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_socketThreadNum	inc/Client/Options.h	/^    std::uint32_t m_socketThreadNum;$/;"	m	class:SPTAG::Client::ClientOptions
m_socketThreadNum	inc/Server/ServiceSettings.h	/^    SizeType m_socketThreadNum;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_spaceID	inc/Core/SPANN/IExtraSearcher.h	/^            int m_spaceID;$/;"	m	struct:SPTAG::SPANN::ExtraWorkSpace
m_spannIndex	inc/Core/SPANN/SPANNResultIterator.h	/^			const Index<T>* m_spannIndex;$/;"	m	class:SPTAG::SPANN::SPANNResultIterator
m_spinCountOfConnection	inc/Client/ClientWrapper.h	/^    std::atomic<std::uint32_t> m_spinCountOfConnection;$/;"	m	class:SPTAG::Client::ClientWrapper
m_spinLock	inc/Socket/ConnectionManager.h	/^    Helper::Concurrent::SpinLock m_spinLock;$/;"	m	class:SPTAG::Socket::ConnectionManager
m_splitFactor	inc/Core/SPANN/Options.h	/^            int m_splitFactor;$/;"	m	class:SPTAG::SPANN::Options
m_splitThreshold	inc/Core/SPANN/Options.h	/^            int m_splitThreshold;$/;"	m	class:SPTAG::SPANN::Options
m_ssdIndex	inc/Core/SPANN/Options.h	/^            std::string m_ssdIndex;$/;"	m	class:SPTAG::SPANN::Options
m_ssdIndexFileNum	inc/Core/SPANN/Options.h	/^            int m_ssdIndexFileNum;$/;"	m	class:SPTAG::SPANN::Options
m_stage	src/BalancedDataPartition/main.cpp	/^    std::string m_stage = "Clustering";$/;"	m	class:PartitionOptions	file:
m_start	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            size_t m_start;$/;"	m	struct:SPTAG::SPANN::Selection
m_statTrace	inc/Extension/CacheFifoMt.hh	/^            std::vector<CacheStatWeak> m_statTrace;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_statTrace	inc/Extension/CacheLfuMt.hh	/^            std::vector<CacheStatWeak> m_statTrace;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_statTrace	inc/Extension/CacheLruMt.hh	/^            std::vector<CacheStatWeak> m_statTrace;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_statTrace	inc/Extension/CacheLruWeak.hh	/^            std::vector<CacheStatWeak> m_statTrace;$/;"	m	class:SPTAG::EXT::CacheLru
m_stats	inc/Extension/CacheFifoMt.hh	/^            CacheStatMt m_stats;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_stats	inc/Extension/CacheLfuMt.hh	/^            CacheStatMt m_stats;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
m_stats	inc/Extension/CacheLruMt.hh	/^            CacheStatMt m_stats;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_stats	inc/Extension/CacheLruWeak.hh	/^            CacheStatWeak m_stats;$/;"	m	class:SPTAG::EXT::CacheLru
m_status	inc/Aggregator/AggregatorContext.h	/^    std::atomic<RemoteMachineStatus> m_status;$/;"	m	struct:SPTAG::Aggregator::RemoteMachine
m_status	inc/Helper/DiskIO.h	/^            int m_status;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_status	inc/Socket/RemoteSearchQuery.h	/^    ResultStatus m_status;$/;"	m	class:SPTAG::Socket::RemoteQuery::RemoteSearchResult::ResultStatus
m_status	src/BalancedDataPartition/main.cpp	/^    std::string m_status = ".";$/;"	m	class:PartitionOptions	file:
m_stopDifference	src/BalancedDataPartition/main.cpp	/^    float m_stopDifference = 0.000001f;$/;"	m	class:PartitionOptions	file:
m_stopped	inc/Helper/ThreadPool.h	/^                bool m_stopped;$/;"	m	class:SPTAG::Helper::ThreadPool::Abort
m_stopped	inc/Socket/Client.h	/^    std::atomic_bool m_stopped;$/;"	m	class:SPTAG::Socket::Client
m_stopped	inc/Socket/Connection.h	/^    std::atomic_bool m_stopped;$/;"	m	class:SPTAG::Socket::Connection
m_strand	inc/Socket/Connection.h	/^    boost::asio::io_context::strand m_strand;$/;"	m	class:SPTAG::Socket::Connection
m_subTaskBlocksize	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::size_t m_subTaskBlocksize;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_subTaskCount	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::uint32_t m_subTaskCount;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_subTaskRecordCount	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::vector<SizeType> m_subTaskRecordCount;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_success	inc/Helper/DiskIO.h	/^            bool m_success;$/;"	m	struct:SPTAG::Helper::AsyncReadRequest
m_syncscript	src/BalancedDataPartition/main.cpp	/^    std::string m_syncscript = "";$/;"	m	class:PartitionOptions	file:
m_target	inc/Core/ResultIterator.h	/^	const void* m_target;$/;"	m	class:ResultIterator
m_target	inc/Core/SearchQuery.h	/^    const void* m_target;$/;"	m	class:SPTAG::QueryResult
m_threadID	inc/Core/SPANN/IExtraSearcher.h	/^            int m_threadID;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_threadNum	inc/Aggregator/AggregatorSettings.h	/^    SizeType m_threadNum;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_threadNum	inc/Client/Options.h	/^    std::uint32_t m_threadNum;$/;"	m	class:SPTAG::Client::ClientOptions
m_threadNum	inc/Helper/VectorSetReader.h	/^    std::uint32_t m_threadNum;$/;"	m	class:SPTAG::Helper::ReaderOptions
m_threadNum	inc/Server/ServiceSettings.h	/^    SizeType m_threadNum;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_threadPool	inc/Aggregator/AggregatorService.h	/^    std::unique_ptr<boost::asio::thread_pool> m_threadPool;$/;"	m	class:SPTAG::Aggregator::AggregatorService
m_threadPool	inc/Core/BKT/Index.h	/^            Helper::ThreadPool m_threadPool;$/;"	m	class:SPTAG::BKT::Index
m_threadPool	inc/Core/KDT/Index.h	/^            Helper::ThreadPool m_threadPool;$/;"	m	class:SPTAG::KDT::Index
m_threadPool	inc/Server/SearchService.h	/^    std::unique_ptr<boost::asio::thread_pool> m_threadPool;$/;"	m	class:SPTAG::Service::SearchService
m_threadPool	inc/Socket/Client.h	/^    std::vector<std::thread> m_threadPool;$/;"	m	class:SPTAG::Socket::Client
m_threadPool	inc/Socket/Server.h	/^    std::vector<std::thread> m_threadPool;$/;"	m	class:SPTAG::Socket::Server
m_threads	inc/Helper/ThreadPool.h	/^            std::vector<std::thread> m_threads;$/;"	m	class:SPTAG::Helper::ThreadPool
m_timeoutChecker	inc/Socket/ResourceManager.h	/^    std::thread m_timeoutChecker;$/;"	m	class:SPTAG::Socket::ResourceManager
m_timeoutItemCount	inc/Socket/ResourceManager.h	/^    std::atomic<std::uint32_t> m_timeoutItemCount;$/;"	m	class:SPTAG::Socket::ResourceManager
m_timeoutList	inc/Socket/ResourceManager.h	/^    std::deque<std::unique_ptr<ResourceItem>> m_timeoutList;$/;"	m	class:SPTAG::Socket::ResourceManager
m_timeoutListMutex	inc/Socket/ResourceManager.h	/^    std::mutex m_timeoutListMutex;$/;"	m	class:SPTAG::Socket::ResourceManager
m_tmpdir	inc/Core/SPANN/Options.h	/^            std::string m_tmpdir;$/;"	m	class:SPTAG::SPANN::Options
m_tmpfile	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            std::string m_tmpfile;$/;"	m	struct:SPTAG::SPANN::Selection
m_topK	inc/Aggregator/AggregatorSettings.h	/^	SizeType m_topK;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_totalLatency	inc/Core/SPANN/IExtraSearcher.h	/^            double m_totalLatency;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_totalListCount	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            int m_totalListCount = 0;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_totalListElementsCount	inc/Core/SPANN/IExtraSearcher.h	/^            int m_totalListElementsCount;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_totalRecordCount	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::atomic<SizeType> m_totalRecordCount;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_totalRecordVectorBytes	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::atomic<std::size_t> m_totalRecordVectorBytes;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_totalSearchLatency	inc/Core/SPANN/IExtraSearcher.h	/^            double m_totalSearchLatency;$/;"	m	struct:SPTAG::SPANN::SearchStats
m_totalparts	src/BalancedDataPartition/main.cpp	/^    int m_totalparts = 1;$/;"	m	class:PartitionOptions	file:
m_totalsize	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            size_t m_totalsize;$/;"	m	struct:SPTAG::SPANN::Selection
m_trainingSamples	inc/Quantizer/Training.h	/^    SizeType m_trainingSamples;$/;"	m	class:QuantizerOptions
m_tree	inc/Core/BKT/Index.h	/^                COMMON::BKTree* m_tree;$/;"	m	class:SPTAG::BKT::Index::RebuildJob
m_tree	inc/Core/KDT/Index.h	/^                COMMON::KDTree* m_tree;$/;"	m	class:SPTAG::KDT::Index::RebuildJob
m_truthFile	src/IndexSearcher/main.cpp	/^    std::string m_truthFile = "";$/;"	m	class:SearcherOptions	file:
m_truthK	src/IndexSearcher/main.cpp	/^    int m_truthK = -1;$/;"	m	class:SearcherOptions	file:
m_truthPath	inc/Core/SPANN/Options.h	/^            std::string m_truthPath;$/;"	m	class:SPTAG::SPANN::Options
m_truthResultNum	inc/Core/SPANN/Options.h	/^            int m_truthResultNum;$/;"	m	class:SPTAG::SPANN::Options
m_truthType	inc/Core/SPANN/Options.h	/^            TruthFileType m_truthType;$/;"	m	class:SPTAG::SPANN::Options
m_type	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    RType m_type;$/;"	m	class:__anon1::GPU_Quantizer
m_type	inc/Socket/RemoteSearchQuery.h	/^    QueryType m_type;$/;"	m	class:SPTAG::Socket::RemoteQuery::QueryType
m_unfinished	inc/Helper/Concurrent.h	/^    std::atomic<std::uint32_t> m_unfinished;$/;"	m	class:SPTAG::Helper::Concurrent::WaitSignal
m_unfinishedCount	inc/Aggregator/AggregatorExecutionContext.h	/^    std::atomic<std::uint32_t> m_unfinishedCount;$/;"	m	class:SPTAG::Aggregator::AggregatorExecutionContext
m_unfinishedJobCount	inc/Client/ClientWrapper.h	/^    std::atomic<std::uint32_t> m_unfinishedJobCount;$/;"	m	class:SPTAG::Client::ClientWrapper
m_usageList	inc/Extension/CacheFifoMt.hh	/^            std::list<CacheItem<uintptr_t>> m_usageList;    \/\/ For tracking LRU order$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
m_usageList	inc/Extension/CacheLruMt.hh	/^            std::list<CacheItem<uintptr_t>> m_usageList;    \/\/ For tracking LRU order$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
m_usageList	inc/Extension/CacheLruWeak.hh	/^            std::list<CacheItem<K>> m_usageList;    \/\/ For tracking LRU order$/;"	m	class:SPTAG::EXT::CacheLru
m_value	inc/Helper/ArgumentsParser.h	/^        DataType & m_value;$/;"	m	class:SPTAG::Helper::ArgumentsParser::ArgumentT
m_valueType	inc/Aggregator/AggregatorSettings.h	/^	VectorValueType m_valueType;$/;"	m	struct:SPTAG::Aggregator::AggregatorSettings
m_valueType	inc/Core/SPANN/Options.h	/^            VectorValueType m_valueType;$/;"	m	class:SPTAG::SPANN::Options
m_valueType	inc/Core/VectorSet.h	/^    VectorValueType m_valueType;$/;"	m	class:SPTAG::BasicVectorSet
m_vector	inc/Server/SearchExecutionContext.h	/^    ByteArray m_vector;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_vectorBase64	inc/Server/QueryParser.h	/^    const char* m_vectorBase64;$/;"	m	class:SPTAG::Service::QueryParser
m_vectorBase64Length	inc/Server/QueryParser.h	/^    SizeType m_vectorBase64Length;$/;"	m	class:SPTAG::Service::QueryParser
m_vectorCount	inc/Core/VectorSet.h	/^    SizeType m_vectorCount;$/;"	m	class:SPTAG::BasicVectorSet
m_vectorCount	inc/Helper/DynamicNeighbors.h	/^        int m_vectorCount;$/;"	m	class:SPTAG::Helper::DynamicNeighborsSet
m_vectorDelimiter	inc/Core/SPANN/Options.h	/^            std::string m_vectorDelimiter; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_vectorDelimiter	inc/Helper/VectorSetReader.h	/^    std::string m_vectorDelimiter;    $/;"	m	class:SPTAG::Helper::ReaderOptions
m_vectorDimension	inc/Server/SearchExecutionContext.h	/^    SizeType m_vectorDimension;$/;"	m	class:SPTAG::Service::SearchExecutionContext
m_vectorElements	inc/Server/QueryParser.h	/^    std::vector<const char*> m_vectorElements;$/;"	m	class:SPTAG::Service::QueryParser
m_vectorInfoSize	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            int m_vectorInfoSize = 0;$/;"	m	class:SPTAG::SPANN::ExtraFullGraphSearcher
m_vectorOutput	inc/Helper/VectorSetReaders/DefaultReader.h	/^    std::string m_vectorOutput;$/;"	m	class:SPTAG::Helper::DefaultVectorReader
m_vectorOutput	inc/Helper/VectorSetReaders/TxtReader.h	/^    std::string m_vectorOutput;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_vectorOutput	inc/Helper/VectorSetReaders/XvecReader.h	/^    std::string m_vectorOutput;$/;"	m	class:SPTAG::Helper::XvecVectorReader
m_vectorPath	inc/Core/SPANN/Options.h	/^            std::string m_vectorPath;$/;"	m	class:SPTAG::SPANN::Options
m_vectorSeparator	inc/Server/ServiceSettings.h	/^    std::string m_vectorSeparator;$/;"	m	struct:SPTAG::Service::ServiceSettings
m_vectorSize	inc/Core/SPANN/Options.h	/^            SizeType m_vectorSize; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_vectorTranslateMap	inc/Core/SPANN/Index.h	/^            std::shared_ptr<std::uint64_t> m_vectorTranslateMap;$/;"	m	class:SPTAG::SPANN::Index
m_vectorType	inc/Core/SPANN/Options.h	/^            VectorFileType m_vectorType;$/;"	m	class:SPTAG::SPANN::Options
m_vectorfactor	src/BalancedDataPartition/main.cpp	/^    float m_vectorfactor = 2.0f;$/;"	m	class:PartitionOptions	file:
m_vectors	inc/Helper/VectorSetReaders/MemoryReader.h	/^            std::shared_ptr<VectorSet> m_vectors;$/;"	m	class:SPTAG::Helper::MemoryVectorReader
m_waitSignal	inc/Helper/VectorSetReaders/TxtReader.h	/^    Helper::Concurrent::WaitSignal m_waitSignal;$/;"	m	class:SPTAG::Helper::TxtVectorReader
m_waitingMutex	inc/Client/ClientWrapper.h	/^    std::mutex m_waitingMutex;$/;"	m	class:SPTAG::Client::ClientWrapper
m_waitingQueue	inc/Client/ClientWrapper.h	/^    std::condition_variable m_waitingQueue;$/;"	m	class:SPTAG::Client::ClientWrapper
m_warmupDelimiter	inc/Core/SPANN/Options.h	/^            std::string m_warmupDelimiter; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_warmupPath	inc/Core/SPANN/Options.h	/^            std::string m_warmupPath;$/;"	m	class:SPTAG::SPANN::Options
m_warmupSize	inc/Core/SPANN/Options.h	/^            SizeType m_warmupSize; \/\/Optional on condition$/;"	m	class:SPTAG::SPANN::Options
m_warmupType	inc/Core/SPANN/Options.h	/^            VectorFileType m_warmupType;$/;"	m	class:SPTAG::SPANN::Options
m_weightfile	src/BalancedDataPartition/main.cpp	/^    std::string m_weightfile = "-";$/;"	m	class:PartitionOptions	file:
m_withMeta	inc/Core/SearchQuery.h	/^    bool m_withMeta;$/;"	m	class:SPTAG::QueryResult
m_withMeta	src/IndexSearcher/main.cpp	/^    int m_withMeta = 0;$/;"	m	class:SearcherOptions	file:
m_wlambda	src/BalancedDataPartition/main.cpp	/^    float m_wlambda = 0.00000f;$/;"	m	class:PartitionOptions	file:
m_workSpace	inc/Core/Common/WorkSpacePool.h	/^            T m_workSpace;$/;"	m	class:SPTAG::COMMON::WorkSpacePool
m_workSpaceFactory	inc/Core/BKT/Index.h	/^            std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<SPTAG::COMMON::WorkSpace>> m_workSpaceFactory;$/;"	m	class:SPTAG::BKT::Index
m_workSpaceFactory	inc/Core/KDT/Index.h	/^            std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<SPTAG::COMMON::WorkSpace>> m_workSpaceFactory;$/;"	m	class:SPTAG::KDT::Index
m_workSpaceFactory	inc/Core/SPANN/Index.h	/^            std::unique_ptr<SPTAG::COMMON::IWorkSpaceFactory<ExtraWorkSpace>> m_workSpaceFactory;$/;"	m	class:SPTAG::SPANN::Index
m_workSpacePool	inc/Core/Common/WorkSpacePool.h	/^            Helper::Concurrent::ConcurrentQueue<std::shared_ptr<T>> m_workSpacePool;$/;"	m	class:SPTAG::COMMON::WorkSpacePool
m_workspace	inc/Core/Common/WorkSpace.h	/^            static thread_local std::unique_ptr<WorkSpaceType> m_workspace;$/;"	m	class:SPTAG::COMMON::ThreadLocalWorkSpaceFactory
m_workspace	inc/Core/ResultIterator.h	/^	void* m_workspace;$/;"	m	class:ResultIterator
m_workspace	src/Core/BKT/BKTIndex.cpp	/^    thread_local std::unique_ptr<T> COMMON::ThreadLocalWorkSpaceFactory<T>::m_workspace;$/;"	m	class:SPTAG::COMMON::ThreadLocalWorkSpaceFactory	file:
m_workspace	src/Core/KDT/KDTIndex.cpp	/^    thread_local std::unique_ptr<T> COMMON::ThreadLocalWorkSpaceFactory<T>::m_workspace;$/;"	m	class:SPTAG::COMMON::ThreadLocalWorkSpaceFactory	file:
m_workspace	src/Core/SPANN/SPANNIndex.cpp	/^    thread_local std::unique_ptr<T> COMMON::ThreadLocalWorkSpaceFactory<T>::m_workspace;$/;"	m	class:SPTAG::COMMON::ThreadLocalWorkSpaceFactory	file:
m_zstdCompressLevel	inc/Core/SPANN/Options.h	/^            int m_zstdCompressLevel;$/;"	m	class:SPTAG::SPANN::Options
main	src/Aggregator/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/BalancedDataPartition/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	src/Client/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/IndexBuilder/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/IndexSearcher/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/Quantizer/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/SSDServing/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	src/Server/main.cpp	/^int main(int argc, char* argv[])$/;"	f
max	inc/Core/Common.h	/^inline T max(T a, T b) {$/;"	f
max	inc/Core/Common.h	94;"	d
maxDepth	inc/SSDServing/SelectHead.h	/^                int maxDepth;$/;"	m	struct:SPTAG::SSDServing::SelectHead::BKTNodeInfo
maxRows	inc/Core/Common/Dataset.h	/^            SizeType maxRows;$/;"	m	class:SPTAG::COMMON::Dataset
metric	inc/Core/Common/cuda/Distance.hxx	/^    DistMetric metric;$/;"	m	class:PointSet
min	inc/Core/Common.h	/^inline T min(T a, T b) {$/;"	f
min	inc/Core/Common.h	98;"	d
minDepth	inc/SSDServing/SelectHead.h	/^                int minDepth;$/;"	m	struct:SPTAG::SSDServing::SelectHead::BKTNodeInfo
mkdir	inc/Core/Common.h	65;"	d
mkdir	inc/Core/Common.h	91;"	d
name	inc/Core/Common/Dataset.h	/^            std::string name = "Data";$/;"	m	class:SPTAG::COMMON::Dataset
newCenters	inc/Core/Common/BKTree.h	/^            float* newCenters;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
newCounts	inc/Core/Common/BKTree.h	/^            SizeType* newCounts;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
newTCenters	inc/Core/Common/BKTree.h	/^            T* newTCenters;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
newWeightedCounts	inc/Core/Common/BKTree.h	/^            float* newWeightedCounts;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
node	inc/Core/Common/cuda/TailNeighbors.hxx	/^    SizeType node;$/;"	m	struct:GPUEdge
node	inc/Core/SearchResult.h	/^        SizeType node;$/;"	m	struct:SPTAG::Edge
node	inc/Core/SearchResult.h	/^        SizeType node;$/;"	m	struct:SPTAG::NodeDistPair
nodeCheckStatus	inc/Core/Common/WorkSpace.h	/^            OptHashPosVector nodeCheckStatus;$/;"	m	struct:SPTAG::COMMON::WorkSpace
nodeID	inc/SSDServing/SelectHead.h	/^                int nodeID;$/;"	m	struct:SPTAG::SSDServing::SelectHead::HeadCandidate
node_ids	inc/Core/Common/cuda/TPtree.hxx	/^    int* node_ids; \/\/ For each point, store which node it belongs to (ends at id of leaf)$/;"	m	class:TPtree
node_sizes	inc/Core/Common/cuda/TPtree.hxx	/^    int* node_sizes; \/\/ Stores the size (number of points) in each node$/;"	m	class:TPtree
noexcept	inc/Extension/CacheFifoMt.hh	/^            CacheFifoSpannMt(const size_t, bool) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            CacheItem<uintptr_t>* getCachedItem(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            CacheStatMt* getCacheStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            SpinlockWithStat& getSpinlockWithStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            bool setItemCached(uintptr_t, uint8_t*, size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            inline const bool isItemCached(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            std::vector<CacheStatWeak>& getCacheStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            virtual ~CacheFifoSpannMt() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            void recordStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            void refreshCacheBulkSingle(int) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            void resetStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheFifoMt.hh	/^            void setDelayedToCache(size_t, std::vector<bool>, void*, int) noexcept;$/;"	m	class:SPTAG::EXT::CacheFifoSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            CacheItem<uintptr_t>* getCachedItem(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            CacheLfuSpannMt(const size_t, bool) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            CacheStatMt* getCacheStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            SpinlockWithStat& getSpinlockWithStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            bool setItemCached(uintptr_t, uint8_t*, size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            inline const bool isItemCached(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            std::vector<CacheStatWeak>& getCacheStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            virtual ~CacheLfuSpannMt() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            void recordStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            void refreshCacheBulkSingle(int) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            void resetStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLfuMt.hh	/^            void setDelayedToCache(size_t, std::vector<bool>, void*, int) noexcept;$/;"	m	class:SPTAG::EXT::CacheLfuSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            CacheItem<uintptr_t>* getCachedItem(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            CacheLruSpannMt(const size_t, bool) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            CacheStatMt() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            CacheStatMt* getCacheStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            SpinlockWithStat& getSpinlockWithStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            bool setItemCached(uintptr_t, uint8_t*, size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            inline const bool isItemCached(uintptr_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            std::vector<CacheStatWeak>& getCacheStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            uint64_t getCurrentSize() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            uint64_t getEvictCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            uint64_t getHitCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            uint64_t getMissCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            virtual ~CacheLruSpannMt() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            virtual ~CacheStatMt() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void decrCurrentSize(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void incrCurrentSize(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void incrEvictCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void incrHitCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void incrMissCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void recordStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void refreshCacheBulkSingle(int) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void resetAll() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void resetStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruMt.hh	/^            void setDelayedToCache(size_t, std::vector<bool>, void*, int) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannMt
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheItem() noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheItem(CacheItem&&) noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheItem(K, uint8_t*, size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheItem<K>* getCachedItem(K) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheLru(const size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheLruSpannSt(const size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheStatWeak getCacheStat() const noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheStatWeak() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            CacheStatWeak(uint64_t, uint64_t, uint64_t, uint64_t, double) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            K getKey() const noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            bool setItemCached(K, uint8_t*, size_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            const size_t getSize() const noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            double getLocalHitRatio() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            inline const bool isItemCached(K) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            std::vector<CacheStatWeak>& getCacheStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            std::vector<double>& getDeltaHitRatioTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            std::vector<double>& getLatencyGet() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            std::vector<double>& getLatencySet() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            uint64_t getCurrentSize() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            uint64_t getEvictCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            uint64_t getHitCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            uint64_t getMissCount() const noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            uint8_t* getItem() noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            virtual ~CacheItem() noexcept;$/;"	m	class:SPTAG::EXT::CacheItem
noexcept	inc/Extension/CacheLruWeak.hh	/^            virtual ~CacheLru() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            virtual ~CacheLruSpannSt() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
noexcept	inc/Extension/CacheLruWeak.hh	/^            virtual ~CacheStatWeak() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void incrEvictCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void incrHitCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void incrMissCount(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void recordLatencyGet(double) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void recordLatencySet(double) noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void recordStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void refreshCache() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
noexcept	inc/Extension/CacheLruWeak.hh	/^            void refreshCacheBulk() noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
noexcept	inc/Extension/CacheLruWeak.hh	/^            void resetAll() noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void resetLatencyGet() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void resetLatencySet() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void resetStat() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void resetStatTrace() noexcept;$/;"	m	class:SPTAG::EXT::CacheLru
noexcept	inc/Extension/CacheLruWeak.hh	/^            void setCurrentSize(uint64_t) noexcept;$/;"	m	class:SPTAG::EXT::CacheStatWeak
noexcept	inc/Extension/CacheLruWeak.hh	/^            void setDelayedToCache(size_t, std::vector<bool>, void*) noexcept;$/;"	m	class:SPTAG::EXT::CacheLruSpannSt
noexcept	inc/Extension/Locks.hh	/^            Spinlock() noexcept = default;$/;"	m	class:SPTAG::EXT::Spinlock
noexcept	inc/Extension/Locks.hh	/^            virtual ~Spinlock() noexcept = default;$/;"	m	class:SPTAG::EXT::Spinlock
noexcept	inc/Extension/Locks.hh	/^            virtual ~SpinlockWithStat() noexcept = default;$/;"	m	class:SPTAG::EXT::SpinlockWithStat
num_leaves	inc/Core/Common/cuda/TPtree.hxx	/^    int num_leaves;$/;"	m	class:TPtree
num_nodes	inc/Core/Common/cuda/TPtree.hxx	/^    int num_nodes; $/;"	m	class:TPtree
offset	inc/Core/Common/cuda/TPtree.hxx	/^    int offset;$/;"	m	class:LeafNode
offsets	inc/Core/Common/cuda/TailNeighbors.hxx	/^    int* offsets;$/;"	m	class:QueryGroup
operator ()	inc/Core/Common/cuda/TailNeighbors.hxx	/^    __host__ __device__ bool operator()(const GPUEdge& a, const GPUEdge& b) {$/;"	f	struct:GPU_EdgeCompare
operator ()	inc/Core/Common/cuda/TailNeighbors.hxx	/^    bool operator()(const GPUEdge& a, int b) const$/;"	f	struct:GPU_EdgeCompare
operator ()	inc/Core/Common/cuda/TailNeighbors.hxx	/^    bool operator()(int a, const GPUEdge& b) const$/;"	f	struct:GPU_EdgeCompare
operator ()	inc/Core/MultiIndexScan.h	/^            bool operator()(const pq_item& lhs, const pq_item& rhs)$/;"	f	class:SPTAG::MultiIndexScan::pq_item_compare
operator ()	inc/Core/SearchResult.h	/^        inline bool operator()(const Edge& a, const Edge& b) const$/;"	f	struct:SPTAG::EdgeCompare
operator ()	inc/Core/SearchResult.h	/^        inline bool operator()(const Edge& a, int b) const$/;"	f	struct:SPTAG::EdgeCompare
operator ()	inc/Core/SearchResult.h	/^        inline bool operator()(int a, const Edge& b) const$/;"	f	struct:SPTAG::EdgeCompare
operator ()	inc/Helper/AsyncFileReader.h	/^                void operator()(HANDLE p_handle) const$/;"	f	struct:SPTAG::Helper::HandleWrapper::HandleDeleter
operator ()	inc/Socket/Packet.h	/^    std::size_t operator()(const PacketType& p_val) const$/;"	f	struct:SPTAG::Socket::PacketType::PacketProcessStatus::PacketTypeHash
operator <	inc/Core/Common/QueryResultSet.h	/^inline bool operator < (const BasicResult& lhs, const BasicResult& rhs)$/;"	f	namespace:SPTAG::COMMON
operator <	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^__host__ __device__ bool operator<(const Point<T, SUMTYPE, Dim>& first, const Point<T, SUMTYPE, Dim>& other) {$/;"	f
operator <	inc/Core/SearchResult.h	/^        inline bool operator < (const NodeDistPair& rhs) const$/;"	f	struct:SPTAG::NodeDistPair
operator =	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ __device__ Point& operator=(const Point& other) {$/;"	f	class:Point
operator =	inc/Core/Common/cuda/ThreadHeap.hxx	/^  __device__ __host__ DistPair& operator=( const DistPair& other ) {$/;"	f	class:DistPair
operator =	inc/Core/CommonDataStructure.h	/^Array<T>::operator= (Array<T>&& p_right)$/;"	f	class:SPTAG::Array
operator =	inc/Core/CommonDataStructure.h	/^Array<T>::operator= (const Array<T>& p_right)$/;"	f	class:SPTAG::Array
operator =	inc/Core/SearchQuery.h	/^    QueryResult& operator=(const QueryResult& p_other)$/;"	f	class:SPTAG::QueryResult
operator =	src/Socket/RemoteSearchQuery.cpp	/^RemoteSearchResult::operator=(RemoteSearchResult&& p_right)$/;"	f	class:RemoteSearchResult
operator >	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __host__ __device__ Point& operator>(const Point& other) {$/;"	f	class:Point
operator >	inc/Core/SearchResult.h	/^        inline bool operator > (const NodeDistPair& rhs) const$/;"	f	struct:SPTAG::NodeDistPair
operator []	inc/Core/Common/BKTree.h	/^            inline BKTNode& operator[](SizeType index) { return m_pTreeRoots[index]; }$/;"	f	class:SPTAG::COMMON::BKTree
operator []	inc/Core/Common/BKTree.h	/^            inline const BKTNode& operator[](SizeType index) const { return m_pTreeRoots[index]; }$/;"	f	class:SPTAG::COMMON::BKTree
operator []	inc/Core/Common/Dataset.h	/^            T* operator[](SizeType index)$/;"	f	class:SPTAG::COMMON::Dataset
operator []	inc/Core/Common/Dataset.h	/^            const T* operator[](SizeType index) const$/;"	f	class:SPTAG::COMMON::Dataset
operator []	inc/Core/Common/FineGrainedLock.h	/^            const std::mutex& operator[](SizeType idx) const {$/;"	f	class:SPTAG::COMMON::FineGrainedLock
operator []	inc/Core/Common/FineGrainedLock.h	/^            std::mutex& operator[](SizeType idx) {$/;"	f	class:SPTAG::COMMON::FineGrainedLock
operator []	inc/Core/Common/KDTree.h	/^            inline KDTNode& operator[](SizeType index) { return m_pTreeRoots[index]; }$/;"	f	class:SPTAG::COMMON::KDTree
operator []	inc/Core/Common/KDTree.h	/^            inline const KDTNode& operator[](SizeType index) const { return m_pTreeRoots[index]; }$/;"	f	class:SPTAG::COMMON::KDTree
operator []	inc/Core/Common/NeighborhoodGraph.h	/^            inline SizeType* operator[](SizeType index) { return m_pNeighborhoodGraph[index]; }$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
operator []	inc/Core/Common/NeighborhoodGraph.h	/^            inline const SizeType* operator[](SizeType index) const { return m_pNeighborhoodGraph[index]; }$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
operator []	inc/Core/CommonDataStructure.h	/^Array<T>::operator[] (std::size_t p_index) const$/;"	f	class:SPTAG::Array
operator []	inc/Core/CommonDataStructure.h	/^Array<T>::operator[] (std::size_t p_index)$/;"	f	class:SPTAG::Array
operator []	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            Edge& operator[](size_t offset)$/;"	f	struct:SPTAG::SPANN::Selection
operator []	inc/Helper/ConcurrentSet.h	/^                V& operator[] (const K& k)$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentMap
operator []	inc/Helper/LockFree.h	/^                inline const T& operator[](std::uint64_t offset) const { return *(m_blocks[offset >> m_blockSizeEx] + (offset & m_blockSize)); }$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
operator []	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighbors DynamicNeighborsSet::operator[](const int p_id) const$/;"	f	class:DynamicNeighborsSet
operator []	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighbors::operator[](const int p_id) const$/;"	f	class:DynamicNeighbors
options	src/BalancedDataPartition/main.cpp	/^} options;$/;"	v	typeref:class:PartitionOptions
outputStk	inc/Core/MultiIndexScan.h	/^        std::stack<pq_item> outputStk;$/;"	m	class:SPTAG::MultiIndexScan
ownData	inc/Core/Common/Dataset.h	/^            bool ownData = false;$/;"	m	class:SPTAG::COMMON::Dataset
p_data_array	inc/Core/MultiIndexScan.h	/^        std::vector<SPTAG::ByteArray> p_data_array;$/;"	m	class:SPTAG::MultiIndexScan
pageOffset	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^                std::uint16_t pageOffset = 0;$/;"	m	struct:SPTAG::SPANN::ExtraFullGraphSearcher::ListInfo
pageOffset	src/Extension/CacheFifoMt.cpp	/^    std::uint16_t pageOffset = 0;$/;"	m	struct:ListInfo	file:
pageOffset	src/Extension/CacheLfuMt.cpp	/^    std::uint16_t pageOffset = 0;$/;"	m	struct:ListInfo	file:
pageOffset	src/Extension/CacheLruMt.cpp	/^    std::uint16_t pageOffset = 0;$/;"	m	struct:ListInfo	file:
pageOffset	src/Extension/CacheLruWeak.cpp	/^    std::uint16_t pageOffset = 0;$/;"	m	struct:ListInfo	file:
parent	inc/SSDServing/SelectHead.h	/^                int parent;$/;"	m	struct:SPTAG::SSDServing::SelectHead::BKTNodeInfo
pop	inc/Core/Common/Heap.h	/^            T& pop()$/;"	f	class:SPTAG::COMMON::Heap
pop	inc/Core/Common/Heap.h	/^            bool pop(T& value)$/;"	f	class:SPTAG::COMMON::Heap
pop	inc/Helper/AsyncFileReader.h	/^            bool pop(AsyncReadRequest*& j) {$/;"	f	class:SPTAG::Helper::RequestQueue
pop	inc/Helper/AsyncFileReader.h	/^            bool pop(AsyncReadRequest*& j)$/;"	f	class:SPTAG::Helper::RequestQueue
pq	inc/Core/MultiIndexScan.h	/^        std::priority_queue<pq_item, std::vector<pq_item>, pq_item_compare> pq;$/;"	m	class:SPTAG::MultiIndexScan
pq_item_compare	inc/Core/MultiIndexScan.h	/^        class pq_item_compare$/;"	c	class:SPTAG::MultiIndexScan
printHeap	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void printHeap() {$/;"	f	class:ThreadHeap
print_tree	inc/Core/Common/cuda/TPtree.hxx	/^    __host__ void print_tree() {$/;"	f	class:TPtree
push	inc/Helper/AsyncFileReader.h	/^            void push(AsyncReadRequest* j) {$/;"	f	class:SPTAG::Helper::RequestQueue
push	inc/Helper/AsyncFileReader.h	/^            void push(AsyncReadRequest* j)$/;"	f	class:SPTAG::Helper::RequestQueue
push	inc/Helper/ConcurrentSet.h	/^                void push(const T& j)$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentQueue
push_back	inc/Helper/LockFree.h	/^                bool push_back(const T data)$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
query_KNN	inc/Core/Common/cuda/KNN.hxx	/^__global__ void query_KNN(Point<DTYPE, SUMTYPE, Dim>* querySet, Point<DTYPE, SUMTYPE, Dim>* data, int dataSize, int idx_offset, int numQueries, DistPair<SUMTYPE>* results, int KVAL, int metric) {$/;"	f
query_ids	inc/Core/Common/cuda/TailNeighbors.hxx	/^    int* query_ids;$/;"	m	class:QueryGroup
rand	inc/Core/Common/CommonUtils.h	/^            static SizeType rand(SizeType high = MaxSize, SizeType low = 0)   \/\/ Generates a random int value.$/;"	f	class:SPTAG::COMMON::Utils
rankFunc	src/Core/MultiIndexScan.cpp	/^    float rankFunc(std::vector<float> in) {$/;"	f	namespace:SPTAG
reserve	inc/Helper/LockFree.h	/^                void reserve(std::uint64_t blocksize, std::uint64_t maxsize = MaxSize) $/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
reset	inc/Core/Common/cuda/TPtree.hxx	/^    __host__ void reset() {$/;"	f	class:TPtree
reset	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void reset() {$/;"	f	class:ThreadHeap
reset	inc/Helper/AsyncFileReader.h	/^            void reset(int capacity) {$/;"	f	class:SPTAG::Helper::RequestQueue
reset	inc/Helper/AsyncFileReader.h	/^            void reset(int capacity) {}$/;"	f	class:SPTAG::Helper::RequestQueue
reset	inc/SSDServing/Utils.h	/^                void reset() {$/;"	f	class:SPTAG::SSDServing::Utils::StopW
rg	src/Core/VectorIndex.cpp	/^std::mt19937 SPTAG::rg;$/;"	m	class:SPTAG	file:
right	inc/Core/Common/KDTree.h	/^            SizeType right;$/;"	m	struct:SPTAG::COMMON::KDTNode
rows	inc/Core/Common/Dataset.h	/^            SizeType rows = 0;$/;"	m	class:SPTAG::COMMON::Dataset
rowsInBlock	inc/Core/Common/Dataset.h	/^            SizeType rowsInBlock;$/;"	m	class:SPTAG::COMMON::Dataset
rowsInBlockEx	inc/Core/Common/Dataset.h	/^            SizeType rowsInBlockEx;$/;"	m	class:SPTAG::COMMON::Dataset
run_TPT_batch_multigpu	inc/Core/Common/cuda/KNN.hxx	/^void run_TPT_batch_multigpu(size_t dataSize, int** d_results, TPtree** tptrees, TPtree** d_tptrees, int iters, int levels, int NUM_GPUS, int KVAL, cudaStream_t* streams, std::vector<size_t> batch_min, std::vector<size_t> batch_max, int balanceFactor, PointSet<DTYPE>** d_pointset, int dim, GPU_Quantizer* quantizer, SPTAG::VectorIndex* index)$/;"	f
save	inc/Helper/LockFree.h	/^                bool save(std::shared_ptr<Helper::DiskIO> out)$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
searchForLeaf	inc/Core/Common/cuda/TPtree.hxx	/^__device__ int searchForLeaf(TPtree* tree, T* query) {$/;"	f
searchLimit	inc/Core/MultiIndexScan.h	/^        int searchLimit;$/;"	m	class:SPTAG::MultiIndexScan
seenSet	inc/Core/MultiIndexScan.h	/^        std::unordered_set<SizeType> seenSet;$/;"	m	class:SPTAG::MultiIndexScan
setMem	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ void setMem(T* ptr) {$/;"	f	class:TransposePoint
setMem	inc/Core/Common/cuda/GPUKNNDistance.hxx	/^    __device__ void setMem(void* ptr) {$/;"	f	class:TransposePoint
size	inc/Core/Common/BKTree.h	/^            inline SizeType size() const { return (SizeType)m_pTreeRoots.size(); }$/;"	f	class:SPTAG::COMMON::BKTree
size	inc/Core/Common/Heap.h	/^            inline int size() { return count; }$/;"	f	class:SPTAG::COMMON::Heap
size	inc/Core/Common/KDTree.h	/^            inline SizeType size() const { return (SizeType)m_pTreeRoots.size(); }$/;"	f	class:SPTAG::COMMON::KDTree
size	inc/Core/Common/cuda/TPtree.hxx	/^    int size;$/;"	m	class:LeafNode
size	inc/Helper/ConcurrentSet.h	/^                size_t size() const$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentSet
size	inc/Helper/LockFree.h	/^                inline std::uint64_t size() const { return m_size; }$/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
sizePerTree	inc/Core/Common/BKTree.h	/^            inline SizeType sizePerTree() const {$/;"	f	class:SPTAG::COMMON::BKTree
sizePerTree	inc/Core/Common/KDTree.h	/^            inline SizeType sizePerTree() const { $/;"	f	class:SPTAG::COMMON::KDTree
sizes	inc/Core/Common/cuda/TailNeighbors.hxx	/^    int* sizes;$/;"	m	class:QueryGroup
split_dim	inc/Core/Common/KDTree.h	/^            DimensionType split_dim;$/;"	m	struct:SPTAG::COMMON::KDTNode
split_keys	inc/Core/Common/cuda/TPtree.hxx	/^    KEYTYPE* split_keys; $/;"	m	class:TPtree
split_value	inc/Core/Common/KDTree.h	/^            float split_value;$/;"	m	struct:SPTAG::COMMON::KDTNode
std	inc/Socket/ResourceManager.h	/^namespace std$/;"	n
streambuf	inc/Helper/DiskIO.h	/^                streambuf() {}$/;"	f	struct:SPTAG::Helper::SimpleBufferIO::streambuf
streambuf	inc/Helper/DiskIO.h	/^                streambuf(char* buffer, size_t size)$/;"	f	struct:SPTAG::Helper::SimpleBufferIO::streambuf
streambuf	inc/Helper/DiskIO.h	/^            struct streambuf : public std::basic_streambuf<char>$/;"	s	class:SPTAG::Helper::SimpleBufferIO
strtok_s	inc/Core/Common.h	69;"	d
swap	inc/Core/Common/cuda/ThreadHeap.hxx	/^__device__ void swap(DistPair<SUMTYPE>* a, DistPair<SUMTYPE>* b) {$/;"	f
t_start	inc/Core/MultiIndexScan.h	/^        std::chrono::time_point<std::chrono::high_resolution_clock> t_start;$/;"	m	class:SPTAG::MultiIndexScan
tellp	inc/Helper/DiskIO.h	/^                std::uint64_t tellp()$/;"	f	struct:SPTAG::Helper::SimpleBufferIO::streambuf
temp	inc/Core/Common/cuda/ThreadHeap.hxx	/^    DistPair<SUMTYPE> temp;$/;"	m	class:ThreadHeap
termCondVal	inc/Core/MultiIndexScan.h	/^        unsigned int termCondVal;$/;"	m	class:SPTAG::MultiIndexScan
terminate	inc/Core/MultiIndexScan.h	/^        bool terminate;$/;"	m	class:SPTAG::MultiIndexScan
time_begin	inc/SSDServing/Utils.h	/^                std::chrono::steady_clock::time_point time_begin;$/;"	m	class:SPTAG::SSDServing::Utils::StopW
tonode	inc/Core/Common/cuda/TailNeighbors.hxx	/^    SizeType tonode;$/;"	m	struct:GPUEdge
tonode	inc/Core/SearchResult.h	/^        SizeType tonode;$/;"	m	struct:SPTAG::Edge
top	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ SUMTYPE top() {$/;"	f	class:ThreadHeap
try_pop	inc/Helper/ConcurrentSet.h	/^                bool try_pop(T& j)$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentQueue
updateKNNResults	inc/Core/Common/cuda/KNN.hxx	/^inline void updateKNNResults(std::vector< std::vector<SPTAG::SizeType> >& batch_truth, std::vector< std::vector<float> >& batch_dist, std::vector< std::vector<SPTAG::SizeType> >temp_truth, std::vector< std::vector<float> >temp_dist,$/;"	f
update_node_assignments	inc/Core/Common/cuda/TPtree.hxx	/^__global__ void update_node_assignments(PointSet<T>* ps, KEYTYPE* weights, int* node_ids, KEYTYPE* split_keys, int* node_sizes, int N, int level, int Dim) {$/;"	f
useTimer	inc/Core/MultiIndexScan.h	/^        bool useTimer;$/;"	m	class:SPTAG::MultiIndexScan
vals	inc/Core/Common/cuda/ThreadHeap.hxx	/^    DistPair<SUMTYPE>* vals;$/;"	m	class:ThreadHeap
violatesRNG	inc/Core/Common/cuda/Distance.hxx	/^__forceinline__ __device__ bool violatesRNG(T* a, T* b, SUMTYPE dist, SUMTYPE (*comp)(T*, T*)) {$/;"	f
violatesRNG	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __device__ bool violatesRNG(uint8_t* a, uint8_t* b, float distance) {$/;"	f	class:__anon1::GPU_Quantizer
weight	inc/Core/MultiIndexScan.h	/^        std::vector<float> weight;$/;"	m	class:SPTAG::MultiIndexScan
weight_list	inc/Core/Common/cuda/TPtree.hxx	/^    KEYTYPE* weight_list;$/;"	m	class:TPtree
weightedCounts	inc/Core/Common/BKTree.h	/^            float* weightedCounts;$/;"	m	struct:SPTAG::COMMON::KmeansArgs
weighted_val	inc/Core/Common/cuda/TPtree.hxx	/^__device__ KEYTYPE weighted_val(T* data, KEYTYPE* weights, int Dim) {$/;"	f
what	inc/Core/Common.h	/^    const char* what() const { return Exp.c_str(); }$/;"	f	class:SPTAG::MyException
worst	inc/Core/Common/WorkSpace.h	/^            inline float worst() {$/;"	f	class:SPTAG::COMMON::DistPriorityQueue
worstDist	inc/Core/Common/QueryResultSet.h	/^    inline float worstDist() const$/;"	f	class:SPTAG::COMMON::QueryResultSet
writeTruthFile	inc/Core/Common/TruthSet.h	/^            static void writeTruthFile(const std::string truthFile, SizeType queryNumber, const int K, std::vector<std::vector<SPTAG::SizeType>>& truthset, std::vector<std::vector<float>>& distset, SPTAG::TruthFileType TFT) {$/;"	f	class:SPTAG::COMMON::TruthSet
write_to_gmem	inc/Core/Common/cuda/ThreadHeap.hxx	/^    __device__ void write_to_gmem(int* gmem) {$/;"	f	class:ThreadHeap
~Abort	inc/Helper/ThreadPool.h	/^                ~Abort() {}$/;"	f	class:SPTAG::Helper::ThreadPool::Abort
~AggregatorContext	src/Aggregator/AggregatorContext.cpp	/^AggregatorContext::~AggregatorContext()$/;"	f	class:AggregatorContext
~AggregatorExecutionContext	src/Aggregator/AggregatorExecutionContext.cpp	/^AggregatorExecutionContext::~AggregatorExecutionContext()$/;"	f	class:AggregatorExecutionContext
~AggregatorService	src/Aggregator/AggregatorService.cpp	/^AggregatorService::~AggregatorService()$/;"	f	class:AggregatorService
~ArgumentT	inc/Helper/ArgumentsParser.h	/^        virtual ~ArgumentT()$/;"	f	class:SPTAG::Helper::ArgumentsParser::ArgumentT
~ArgumentsParser	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::~ArgumentsParser()$/;"	f	class:ArgumentsParser
~Array	inc/Core/CommonDataStructure.h	/^Array<T>::~Array()$/;"	f	class:SPTAG::Array
~AsyncFileIO	inc/Helper/AsyncFileReader.h	/^            virtual ~AsyncFileIO() { ShutDown(); }$/;"	f	class:SPTAG::Helper::AsyncFileIO
~BKTree	inc/Core/Common/BKTree.h	/^            ~BKTree() {}$/;"	f	class:SPTAG::COMMON::BKTree
~BasicVectorSet	src/Core/VectorSet.cpp	/^BasicVectorSet::~BasicVectorSet()$/;"	f	class:BasicVectorSet
~BuilderOptions	src/IndexBuilder/main.cpp	/^    ~BuilderOptions() {}$/;"	f	class:BuilderOptions
~Client	src/Socket/Client.cpp	/^Client::~Client()$/;"	f	class:Client
~ClientOptions	src/Client/Options.cpp	/^ClientOptions::~ClientOptions()$/;"	f	class:ClientOptions
~ClientWrapper	src/Client/ClientWrapper.cpp	/^ClientWrapper::~ClientWrapper()$/;"	f	class:ClientWrapper
~Compressor	inc/Core/SPANN/Compressor.h	/^            virtual ~Compressor() {}$/;"	f	class:SPTAG::SPANN::Compressor
~ConcurrentMap	inc/Helper/ConcurrentSet.h	/^                ~ConcurrentMap() {}$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentMap
~ConcurrentQueue	inc/Helper/ConcurrentSet.h	/^                ~ConcurrentQueue() {}$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentQueue
~ConcurrentSet	inc/Helper/ConcurrentSet.h	/^                ~ConcurrentSet() {}$/;"	f	class:SPTAG::Helper::Concurrent::ConcurrentSet
~Dataset	inc/Core/Common/Dataset.h	/^            ~Dataset()$/;"	f	class:SPTAG::COMMON::Dataset
~DefaultVectorReader	src/Helper/VectorSetReaders/DefaultReader.cpp	/^DefaultVectorReader::~DefaultVectorReader()$/;"	f	class:DefaultVectorReader
~DiskIO	inc/Helper/DiskIO.h	/^            virtual ~DiskIO() {}$/;"	f	class:SPTAG::Helper::DiskIO
~DynamicNeighbors	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighbors:: ~DynamicNeighbors()$/;"	f	class:DynamicNeighbors
~DynamicNeighborsSet	src/Helper/DynamicNeighbors.cpp	/^DynamicNeighborsSet::~DynamicNeighborsSet()$/;"	f	class:DynamicNeighborsSet
~ExtraFullGraphSearcher	inc/Core/SPANN/ExtraFullGraphSearcher.h	/^            virtual ~ExtraFullGraphSearcher()$/;"	f	class:SPTAG::SPANN::ExtraFullGraphSearcher
~ExtraWorkSpace	inc/Core/SPANN/IExtraSearcher.h	/^            ~ExtraWorkSpace() { g_spaceCount--; }$/;"	f	struct:SPTAG::SPANN::ExtraWorkSpace
~FileLogger	inc/Helper/Logging.h	/^            ~FileLogger()$/;"	f	class:SPTAG::Helper::FileLogger
~FileMetadataSet	src/Core/MetadataSet.cpp	/^FileMetadataSet::~FileMetadataSet()$/;"	f	class:FileMetadataSet
~FineGrainedLock	inc/Core/Common/FineGrainedLock.h	/^            ~FineGrainedLock() {}$/;"	f	class:SPTAG::COMMON::FineGrainedLock
~GPU_Quantizer	inc/Core/Common/cuda/GPUQuantizer.hxx	/^    __host__ ~GPU_Quantizer()$/;"	f	class:__anon1::GPU_Quantizer
~HandleWrapper	inc/Helper/AsyncFileReader.h	/^            ~HandleWrapper() {}$/;"	f	class:SPTAG::Helper::HandleWrapper
~Heap	inc/Core/Common/Heap.h	/^            ~Heap() {}$/;"	f	class:SPTAG::COMMON::Heap
~IArgument	src/Helper/ArgumentsParser.cpp	/^ArgumentsParser::IArgument::~IArgument()$/;"	f	class:ArgumentsParser::IArgument
~IExtraSearcher	inc/Core/SPANN/IExtraSearcher.h	/^            virtual ~IExtraSearcher()$/;"	f	class:SPTAG::SPANN::IExtraSearcher
~Index	inc/Core/BKT/Index.h	/^            ~Index() {}$/;"	f	class:SPTAG::BKT::Index
~Index	inc/Core/KDT/Index.h	/^            ~Index() {}$/;"	f	class:SPTAG::KDT::Index
~Index	inc/Core/SPANN/Index.h	/^            ~Index() {}$/;"	f	class:SPTAG::SPANN::Index
~IniReader	src/Helper/SimpleIniReader.cpp	/^IniReader::~IniReader()$/;"	f	class:IniReader
~Job	inc/Helper/ThreadPool.h	/^                virtual ~Job() {}$/;"	f	class:SPTAG::Helper::ThreadPool::Job
~KDTree	inc/Core/Common/KDTree.h	/^            ~KDTree() {}$/;"	f	class:SPTAG::COMMON::KDTree
~KmeansArgs	inc/Core/Common/BKTree.h	/^            ~KmeansArgs() {$/;"	f	struct:SPTAG::COMMON::KmeansArgs
~LockFreeVector	inc/Helper/LockFree.h	/^                ~LockFreeVector() $/;"	f	class:SPTAG::Helper::LockFree::LockFreeVector
~LockGuard	inc/Helper/Concurrent.h	/^    ~LockGuard() {$/;"	f	class:SPTAG::Helper::Concurrent::LockGuard
~MemMetadataSet	src/Core/MetadataSet.cpp	/^MemMetadataSet::~MemMetadataSet()$/;"	f	class:MemMetadataSet
~MemoryVectorReader	inc/Helper/VectorSetReaders/MemoryReader.h	/^            virtual ~MemoryVectorReader() {}$/;"	f	class:SPTAG::Helper::MemoryVectorReader
~MetadataSet	src/Core/MetadataSet.cpp	/^MetadataSet::~MetadataSet()$/;"	f	class:MetadataSet
~MultiIndexScan	src/Core/MultiIndexScan.cpp	/^    MultiIndexScan::~MultiIndexScan(){$/;"	f	class:SPTAG::MultiIndexScan
~NeighborhoodGraph	inc/Core/Common/NeighborhoodGraph.h	/^            ~NeighborhoodGraph() {}$/;"	f	class:SPTAG::COMMON::NeighborhoodGraph
~OptHashPosVector	inc/Core/Common/WorkSpace.h	/^            ~OptHashPosVector() {}$/;"	f	class:SPTAG::COMMON::OptHashPosVector
~Options	inc/Core/SPANN/Options.h	/^            ~Options() {}$/;"	f	class:SPTAG::SPANN::Options
~PQQuantizer	inc/Core/Common/PQQuantizer.h	/^        PQQuantizer<T>::~PQQuantizer()$/;"	f	class:SPTAG::COMMON::PQQuantizer
~PartitionOptions	src/BalancedDataPartition/main.cpp	/^    ~PartitionOptions() {}$/;"	f	class:PartitionOptions
~QuantizerOptions	inc/Quantizer/Training.h	/^    ~QuantizerOptions() {}$/;"	f	class:QuantizerOptions
~QueryParser	src/Server/QueryParser.cpp	/^QueryParser::~QueryParser()$/;"	f	class:QueryParser
~QueryResult	inc/Core/SearchQuery.h	/^    ~QueryResult()$/;"	f	class:SPTAG::QueryResult
~QueryResultSet	inc/Core/Common/QueryResultSet.h	/^    ~QueryResultSet()$/;"	f	class:SPTAG::COMMON::QueryResultSet
~ReaderOptions	src/Helper/VectorSetReader.cpp	/^ReaderOptions::~ReaderOptions()$/;"	f	class:ReaderOptions
~RequestQueue	inc/Helper/AsyncFileReader.h	/^            ~RequestQueue() {}$/;"	f	class:SPTAG::Helper::RequestQueue
~ResourceManager	inc/Socket/ResourceManager.h	/^    ~ResourceManager()$/;"	f	class:SPTAG::Socket::ResourceManager
~ResultIterator	src/Core/ResultIterator.cpp	/^	ResultIterator::~ResultIterator()$/;"	f	class:ResultIterator
~SPANNResultIterator	inc/Core/SPANN/SPANNResultIterator.h	/^			~SPANNResultIterator()$/;"	f	class:SPTAG::SPANN::SPANNResultIterator
~SearchExecutionContext	src/Server/SearchExecutionContext.cpp	/^SearchExecutionContext::~SearchExecutionContext()$/;"	f	class:SearchExecutionContext
~SearchExecutor	src/Server/SearchExecutor.cpp	/^SearchExecutor::~SearchExecutor()$/;"	f	class:SearchExecutor
~SearchService	src/Server/SearchService.cpp	/^SearchService::~SearchService()$/;"	f	class:SearchService
~SearcherOptions	src/IndexSearcher/main.cpp	/^    ~SearcherOptions() {}$/;"	f	class:SearcherOptions
~SerivceCmdOptions	src/Server/SearchService.cpp	/^    virtual ~SerivceCmdOptions()$/;"	f	class:__anon3::Local::SerivceCmdOptions
~Server	src/Socket/Server.cpp	/^Server::~Server()$/;"	f	class:Server
~ServiceContext	src/Server/ServiceContext.cpp	/^ServiceContext::~ServiceContext()$/;"	f	class:ServiceContext
~SimpleBufferIO	inc/Helper/DiskIO.h	/^            virtual ~SimpleBufferIO()$/;"	f	class:SPTAG::Helper::SimpleBufferIO
~SimpleFileIO	inc/Helper/DiskIO.h	/^            virtual ~SimpleFileIO() { ShutDown(); }$/;"	f	class:SPTAG::Helper::SimpleFileIO
~ThreadPool	inc/Helper/ThreadPool.h	/^            ~ThreadPool() $/;"	f	class:SPTAG::Helper::ThreadPool
~TxtVectorReader	src/Helper/VectorSetReaders/TxtReader.cpp	/^TxtVectorReader::~TxtVectorReader()$/;"	f	class:TxtVectorReader
~VectorIndex	src/Core/VectorIndex.cpp	/^VectorIndex::~VectorIndex()$/;"	f	class:VectorIndex
~VectorSet	src/Core/VectorSet.cpp	/^VectorSet::~VectorSet()$/;"	f	class:VectorSet
~VectorSetReader	src/Helper/VectorSetReader.cpp	/^VectorSetReader:: ~VectorSetReader()$/;"	f	class:VectorSetReader
~WaitSignal	src/Helper/Concurrent.cpp	/^WaitSignal::~WaitSignal()$/;"	f	class:WaitSignal
~WorkSpace	inc/Core/Common/WorkSpace.h	/^            ~WorkSpace() {$/;"	f	struct:SPTAG::COMMON::WorkSpace
~WorkSpacePool	inc/Core/Common/WorkSpacePool.h	/^            ~WorkSpacePool() $/;"	f	class:SPTAG::COMMON::WorkSpacePool
~XvecVectorReader	src/Helper/VectorSetReaders/XvecReader.cpp	/^XvecVectorReader::~XvecVectorReader()$/;"	f	class:XvecVectorReader
